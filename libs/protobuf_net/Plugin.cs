// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Plugin {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Plugin {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Plugin_Common__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Common, global::Plugin.Common.Builder> internal__static_Plugin_Common__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Common_AnyDataType__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.AnyDataType, global::Plugin.Common.Types.AnyDataType.Builder> internal__static_Plugin_Common_AnyDataType__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Common_KeyValue__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.KeyValue, global::Plugin.Common.Types.KeyValue.Builder> internal__static_Plugin_Common_KeyValue__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Common_Host__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.Host, global::Plugin.Common.Types.Host.Builder> internal__static_Plugin_Common_Host__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Common_Header__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.Header, global::Plugin.Common.Types.Header.Builder> internal__static_Plugin_Common_Header__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Common_Attachment__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.Attachment, global::Plugin.Common.Types.Attachment.Builder> internal__static_Plugin_Common_Attachment__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Common_PerformanceData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.PerformanceData, global::Plugin.Common.Types.PerformanceData.Builder> internal__static_Plugin_Common_PerformanceData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Common_PerformanceData_IntValue__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.PerformanceData.Types.IntValue, global::Plugin.Common.Types.PerformanceData.Types.IntValue.Builder> internal__static_Plugin_Common_PerformanceData_IntValue__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Common_PerformanceData_StringValue__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.PerformanceData.Types.StringValue, global::Plugin.Common.Types.PerformanceData.Types.StringValue.Builder> internal__static_Plugin_Common_PerformanceData_StringValue__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Common_PerformanceData_FloatValue__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.PerformanceData.Types.FloatValue, global::Plugin.Common.Types.PerformanceData.Types.FloatValue.Builder> internal__static_Plugin_Common_PerformanceData_FloatValue__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Common_PerformanceData_BoolValue__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.PerformanceData.Types.BoolValue, global::Plugin.Common.Types.PerformanceData.Types.BoolValue.Builder> internal__static_Plugin_Common_PerformanceData_BoolValue__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Common_Result__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.Result, global::Plugin.Common.Types.Result.Builder> internal__static_Plugin_Common_Result__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_QueryRequestMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.QueryRequestMessage, global::Plugin.QueryRequestMessage.Builder> internal__static_Plugin_QueryRequestMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_QueryRequestMessage_Request__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.QueryRequestMessage.Types.Request, global::Plugin.QueryRequestMessage.Types.Request.Builder> internal__static_Plugin_QueryRequestMessage_Request__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_QueryResponseMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.QueryResponseMessage, global::Plugin.QueryResponseMessage.Builder> internal__static_Plugin_QueryResponseMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_QueryResponseMessage_Response__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.QueryResponseMessage.Types.Response, global::Plugin.QueryResponseMessage.Types.Response.Builder> internal__static_Plugin_QueryResponseMessage_Response__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_QueryResponseMessage_Response_Line__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.QueryResponseMessage.Types.Response.Types.Line, global::Plugin.QueryResponseMessage.Types.Response.Types.Line.Builder> internal__static_Plugin_QueryResponseMessage_Response_Line__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_ExecuteRequestMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.ExecuteRequestMessage, global::Plugin.ExecuteRequestMessage.Builder> internal__static_Plugin_ExecuteRequestMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_ExecuteRequestMessage_Request__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.ExecuteRequestMessage.Types.Request, global::Plugin.ExecuteRequestMessage.Types.Request.Builder> internal__static_Plugin_ExecuteRequestMessage_Request__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_ExecuteResponseMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.ExecuteResponseMessage, global::Plugin.ExecuteResponseMessage.Builder> internal__static_Plugin_ExecuteResponseMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_ExecuteResponseMessage_Response__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.ExecuteResponseMessage.Types.Response, global::Plugin.ExecuteResponseMessage.Types.Response.Builder> internal__static_Plugin_ExecuteResponseMessage_Response__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_SubmitRequestMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.SubmitRequestMessage, global::Plugin.SubmitRequestMessage.Builder> internal__static_Plugin_SubmitRequestMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_SubmitResponseMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.SubmitResponseMessage, global::Plugin.SubmitResponseMessage.Builder> internal__static_Plugin_SubmitResponseMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_SubmitResponseMessage_Response__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.SubmitResponseMessage.Types.Response, global::Plugin.SubmitResponseMessage.Types.Response.Builder> internal__static_Plugin_SubmitResponseMessage_Response__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Registry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Registry, global::Plugin.Registry.Builder> internal__static_Plugin_Registry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Registry_Query__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Registry.Types.Query, global::Plugin.Registry.Types.Query.Builder> internal__static_Plugin_Registry_Query__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Registry_Information__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Registry.Types.Information, global::Plugin.Registry.Types.Information.Builder> internal__static_Plugin_Registry_Information__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Registry_KeyWordDescription__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Registry.Types.KeyWordDescription, global::Plugin.Registry.Types.KeyWordDescription.Builder> internal__static_Plugin_Registry_KeyWordDescription__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Registry_ParameterDetail__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Registry.Types.ParameterDetail, global::Plugin.Registry.Types.ParameterDetail.Builder> internal__static_Plugin_Registry_ParameterDetail__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Registry_ParameterDetails__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Registry.Types.ParameterDetails, global::Plugin.Registry.Types.ParameterDetails.Builder> internal__static_Plugin_Registry_ParameterDetails__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Registry_Schedule__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Registry.Types.Schedule, global::Plugin.Registry.Types.Schedule.Builder> internal__static_Plugin_Registry_Schedule__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_RegistryRequestMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.RegistryRequestMessage, global::Plugin.RegistryRequestMessage.Builder> internal__static_Plugin_RegistryRequestMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_RegistryRequestMessage_Request__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.RegistryRequestMessage.Types.Request, global::Plugin.RegistryRequestMessage.Types.Request.Builder> internal__static_Plugin_RegistryRequestMessage_Request__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_RegistryRequestMessage_Request_Registration__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.RegistryRequestMessage.Types.Request.Types.Registration, global::Plugin.RegistryRequestMessage.Types.Request.Types.Registration.Builder> internal__static_Plugin_RegistryRequestMessage_Request_Registration__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_RegistryRequestMessage_Request_Inventory__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.RegistryRequestMessage.Types.Request.Types.Inventory, global::Plugin.RegistryRequestMessage.Types.Request.Types.Inventory.Builder> internal__static_Plugin_RegistryRequestMessage_Request_Inventory__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_RegistryRequestMessage_Request_Control__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.RegistryRequestMessage.Types.Request.Types.Control, global::Plugin.RegistryRequestMessage.Types.Request.Types.Control.Builder> internal__static_Plugin_RegistryRequestMessage_Request_Control__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_RegistryResponseMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.RegistryResponseMessage, global::Plugin.RegistryResponseMessage.Builder> internal__static_Plugin_RegistryResponseMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_RegistryResponseMessage_Response__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.RegistryResponseMessage.Types.Response, global::Plugin.RegistryResponseMessage.Types.Response.Builder> internal__static_Plugin_RegistryResponseMessage_Response__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_RegistryResponseMessage_Response_Registration__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.RegistryResponseMessage.Types.Response.Types.Registration, global::Plugin.RegistryResponseMessage.Types.Response.Types.Registration.Builder> internal__static_Plugin_RegistryResponseMessage_Response_Registration__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_RegistryResponseMessage_Response_Inventory__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.RegistryResponseMessage.Types.Response.Types.Inventory, global::Plugin.RegistryResponseMessage.Types.Response.Types.Inventory.Builder> internal__static_Plugin_RegistryResponseMessage_Response_Inventory__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_RegistryResponseMessage_Response_Control__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.RegistryResponseMessage.Types.Response.Types.Control, global::Plugin.RegistryResponseMessage.Types.Response.Types.Control.Builder> internal__static_Plugin_RegistryResponseMessage_Response_Control__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_ScheduleNotificationMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.ScheduleNotificationMessage, global::Plugin.ScheduleNotificationMessage.Builder> internal__static_Plugin_ScheduleNotificationMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_ScheduleNotificationMessage_Request__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.ScheduleNotificationMessage.Types.Request, global::Plugin.ScheduleNotificationMessage.Types.Request.Builder> internal__static_Plugin_ScheduleNotificationMessage_Request__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Settings__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Settings, global::Plugin.Settings.Builder> internal__static_Plugin_Settings__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Settings_Node__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Settings.Types.Node, global::Plugin.Settings.Types.Node.Builder> internal__static_Plugin_Settings_Node__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Settings_Query__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Settings.Types.Query, global::Plugin.Settings.Types.Query.Builder> internal__static_Plugin_Settings_Query__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Settings_Information__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Settings.Types.Information, global::Plugin.Settings.Types.Information.Builder> internal__static_Plugin_Settings_Information__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_SettingsRequestMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsRequestMessage, global::Plugin.SettingsRequestMessage.Builder> internal__static_Plugin_SettingsRequestMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_SettingsRequestMessage_Request__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsRequestMessage.Types.Request, global::Plugin.SettingsRequestMessage.Types.Request.Builder> internal__static_Plugin_SettingsRequestMessage_Request__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_SettingsRequestMessage_Request_Registration__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsRequestMessage.Types.Request.Types.Registration, global::Plugin.SettingsRequestMessage.Types.Request.Types.Registration.Builder> internal__static_Plugin_SettingsRequestMessage_Request_Registration__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_SettingsRequestMessage_Request_Query__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsRequestMessage.Types.Request.Types.Query, global::Plugin.SettingsRequestMessage.Types.Request.Types.Query.Builder> internal__static_Plugin_SettingsRequestMessage_Request_Query__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_SettingsRequestMessage_Request_Update__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsRequestMessage.Types.Request.Types.Update, global::Plugin.SettingsRequestMessage.Types.Request.Types.Update.Builder> internal__static_Plugin_SettingsRequestMessage_Request_Update__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_SettingsRequestMessage_Request_Inventory__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsRequestMessage.Types.Request.Types.Inventory, global::Plugin.SettingsRequestMessage.Types.Request.Types.Inventory.Builder> internal__static_Plugin_SettingsRequestMessage_Request_Inventory__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_SettingsRequestMessage_Request_Control__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsRequestMessage.Types.Request.Types.Control, global::Plugin.SettingsRequestMessage.Types.Request.Types.Control.Builder> internal__static_Plugin_SettingsRequestMessage_Request_Control__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_SettingsRequestMessage_Request_Status__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsRequestMessage.Types.Request.Types.Status, global::Plugin.SettingsRequestMessage.Types.Request.Types.Status.Builder> internal__static_Plugin_SettingsRequestMessage_Request_Status__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_SettingsResponseMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsResponseMessage, global::Plugin.SettingsResponseMessage.Builder> internal__static_Plugin_SettingsResponseMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_SettingsResponseMessage_Response__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsResponseMessage.Types.Response, global::Plugin.SettingsResponseMessage.Types.Response.Builder> internal__static_Plugin_SettingsResponseMessage_Response__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_SettingsResponseMessage_Response_Registration__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsResponseMessage.Types.Response.Types.Registration, global::Plugin.SettingsResponseMessage.Types.Response.Types.Registration.Builder> internal__static_Plugin_SettingsResponseMessage_Response_Registration__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_SettingsResponseMessage_Response_Query__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsResponseMessage.Types.Response.Types.Query, global::Plugin.SettingsResponseMessage.Types.Response.Types.Query.Builder> internal__static_Plugin_SettingsResponseMessage_Response_Query__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_SettingsResponseMessage_Response_Update__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsResponseMessage.Types.Response.Types.Update, global::Plugin.SettingsResponseMessage.Types.Response.Types.Update.Builder> internal__static_Plugin_SettingsResponseMessage_Response_Update__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_SettingsResponseMessage_Response_Inventory__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsResponseMessage.Types.Response.Types.Inventory, global::Plugin.SettingsResponseMessage.Types.Response.Types.Inventory.Builder> internal__static_Plugin_SettingsResponseMessage_Response_Inventory__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_SettingsResponseMessage_Response_Control__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsResponseMessage.Types.Response.Types.Control, global::Plugin.SettingsResponseMessage.Types.Response.Types.Control.Builder> internal__static_Plugin_SettingsResponseMessage_Response_Control__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_SettingsResponseMessage_Response_Status__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsResponseMessage.Types.Response.Types.Status, global::Plugin.SettingsResponseMessage.Types.Response.Types.Status.Builder> internal__static_Plugin_SettingsResponseMessage_Response_Status__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_LogEntry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.LogEntry, global::Plugin.LogEntry.Builder> internal__static_Plugin_LogEntry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_LogEntry_Entry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.LogEntry.Types.Entry, global::Plugin.LogEntry.Types.Entry.Builder> internal__static_Plugin_LogEntry_Entry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_MetricsMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.MetricsMessage, global::Plugin.MetricsMessage.Builder> internal__static_Plugin_MetricsMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_MetricsMessage_Metric__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.MetricsMessage.Types.Metric, global::Plugin.MetricsMessage.Types.Metric.Builder> internal__static_Plugin_MetricsMessage_Metric__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_MetricsMessage_Metrics__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.MetricsMessage.Types.Metrics, global::Plugin.MetricsMessage.Types.Metrics.Builder> internal__static_Plugin_MetricsMessage_Metrics__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Plugin() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CgxwbHVnaW4ucHJvdG8SBlBsdWdpbiKODAoGQ29tbW9uGm4KC0FueURhdGFU" + 
          "eXBlEhMKC3N0cmluZ19kYXRhGAIgASgJEhAKCGludF9kYXRhGAMgASgDEhIK" + 
          "CmZsb2F0X2RhdGEYBCABKAESEQoJYm9vbF9kYXRhGAUgASgIEhEKCWxpc3Rf" + 
          "ZGF0YRgGIAMoCRomCghLZXlWYWx1ZRILCgNrZXkYASACKAkSDQoFdmFsdWUY" + 
          "AiACKAkajQEKBEhvc3QSCgoCaWQYASABKAkSDAoEaG9zdBgCIAEoCRIPCgdh" + 
          "ZGRyZXNzGAMgASgJEhAKCHByb3RvY29sGAQgASgJEg8KB2NvbW1lbnQYBSAB" + 
          "KAkSKQoIbWV0YWRhdGEYBiADKAsyFy5QbHVnaW4uQ29tbW9uLktleVZhbHVl" + 
          "EgwKBHRhZ3MYByADKAkazQEKBkhlYWRlchIRCglzb3VyY2VfaWQYAyABKAkS" + 
          "EQoJc2VuZGVyX2lkGAQgASgJEhQKDHJlY2lwaWVudF9pZBgFIAEoCRIWCg5k" + 
          "ZXN0aW5hdGlvbl9pZBgGIAEoCRISCgptZXNzYWdlX2lkGBAgASgJEikKCG1l" + 
          "dGFkYXRhGAggAygLMhcuUGx1Z2luLkNvbW1vbi5LZXlWYWx1ZRIMCgR0YWdz" + 
          "GAkgAygJEiIKBWhvc3RzGAogAygLMhMuUGx1Z2luLkNvbW1vbi5Ib3N0Gm0K" + 
          "CkF0dGFjaG1lbnQSCgoCaWQYASABKAMSDAoEdHlwZRgCIAIoCRIpCghtZXRh" + 
          "ZGF0YRgDIAMoCzIXLlBsdWdpbi5Db21tb24uS2V5VmFsdWUSDAoEdGFncxgE" + 
          "IAMoCRIMCgRkYXRhGAUgAigJGuUECg9QZXJmb3JtYW5jZURhdGESDQoFYWxp" + 
          "YXMYASACKAkSOgoJaW50X3ZhbHVlGAMgASgLMicuUGx1Z2luLkNvbW1vbi5Q" + 
          "ZXJmb3JtYW5jZURhdGEuSW50VmFsdWUSQAoMc3RyaW5nX3ZhbHVlGAQgASgL" + 
          "MiouUGx1Z2luLkNvbW1vbi5QZXJmb3JtYW5jZURhdGEuU3RyaW5nVmFsdWUS" + 
          "PgoLZmxvYXRfdmFsdWUYBSABKAsyKS5QbHVnaW4uQ29tbW9uLlBlcmZvcm1h" + 
          "bmNlRGF0YS5GbG9hdFZhbHVlEjwKCmJvb2xfdmFsdWUYBiABKAsyKC5QbHVn" + 
          "aW4uQ29tbW9uLlBlcmZvcm1hbmNlRGF0YS5Cb29sVmFsdWUabAoISW50VmFs" + 
          "dWUSDQoFdmFsdWUYASACKAMSDAoEdW5pdBgCIAEoCRIPCgd3YXJuaW5nGAMg" + 
          "ASgDEhAKCGNyaXRpY2FsGAQgASgDEg8KB21pbmltdW0YBiABKAMSDwoHbWF4" + 
          "aW11bRgHIAEoAxocCgtTdHJpbmdWYWx1ZRINCgV2YWx1ZRgBIAIoCRpuCgpG" + 
          "bG9hdFZhbHVlEg0KBXZhbHVlGAEgAigBEgwKBHVuaXQYAiABKAkSDwoHd2Fy" + 
          "bmluZxgDIAEoARIQCghjcml0aWNhbBgEIAEoARIPCgdtaW5pbXVtGAYgASgB" + 
          "Eg8KB21heGltdW0YByABKAEaSwoJQm9vbFZhbHVlEg0KBXZhbHVlGAEgAigI" + 
          "EgwKBHVuaXQYAiABKAkSDwoHd2FybmluZxgDIAEoCBIQCghjcml0aWNhbBgE" + 
          "IAEoCBq2AQoGUmVzdWx0EjIKBGNvZGUYASACKA4yJC5QbHVnaW4uQ29tbW9u" + 
          "LlJlc3VsdC5TdGF0dXNDb2RlVHlwZRIPCgdtZXNzYWdlGAIgASgJEgwKBGRh" + 
          "dGEYAyABKAkiWQoOU3RhdHVzQ29kZVR5cGUSDQoJU1RBVFVTX09LEAASEgoO" + 
          "U1RBVFVTX1dBUk5JTkcQARIQCgxTVEFUVVNfRVJST1IQAhISCg5TVEFUVVNf" + 
          "REVMQVlFRBADIjwKClJlc3VsdENvZGUSBgoCT0sQABILCgdXQVJOSU5HEAES" + 
          "DAoIQ1JJVElDQUwQAhILCgdVTktOT1dOEAMiPgoIRGF0YVR5cGUSBwoDSU5U" + 
          "EAESCgoGU1RSSU5HEAISCQoFRkxPQVQQAxIICgRCT09MEAQSCAoETElTVBAF" + 
          "Iq0CChNRdWVyeVJlcXVlc3RNZXNzYWdlEiUKBmhlYWRlchgBIAEoCzIVLlBs" + 
          "dWdpbi5Db21tb24uSGVhZGVyEjQKB3BheWxvYWQYAiADKAsyIy5QbHVnaW4u" + 
          "UXVlcnlSZXF1ZXN0TWVzc2FnZS5SZXF1ZXN0Ei4KC2F0dGFjaG1lbnRzGAMg" + 
          "AygLMhkuUGx1Z2luLkNvbW1vbi5BdHRhY2htZW50GogBCgdSZXF1ZXN0EgoK" + 
          "AmlkGAEgASgFEg4KBnRhcmdldBgHIAEoCRIPCgdjb21tYW5kGAIgAigJEg0K" + 
          "BWFsaWFzGAMgASgJEhEKCWFyZ3VtZW50cxgEIAMoCRIuCgthdHRhY2htZW50" + 
          "cxgRIAMoCzIZLlBsdWdpbi5Db21tb24uQXR0YWNobWVudCLsAwoUUXVlcnlS" + 
          "ZXNwb25zZU1lc3NhZ2USJQoGaGVhZGVyGAEgASgLMhUuUGx1Z2luLkNvbW1v" + 
          "bi5IZWFkZXISNgoHcGF5bG9hZBgCIAMoCzIlLlBsdWdpbi5RdWVyeVJlc3Bv" + 
          "bnNlTWVzc2FnZS5SZXNwb25zZRIuCgthdHRhY2htZW50cxgDIAMoCzIZLlBs" + 
          "dWdpbi5Db21tb24uQXR0YWNobWVudBrEAgoIUmVzcG9uc2USCgoCaWQYASAB" + 
          "KAUSDgoGc291cmNlGAcgASgJEg8KB2NvbW1hbmQYAiACKAkSDQoFYWxpYXMY" + 
          "AyABKAkSEQoJYXJndW1lbnRzGBAgAygJEikKBnJlc3VsdBgEIAIoDjIZLlBs" + 
          "dWdpbi5Db21tb24uUmVzdWx0Q29kZRI5CgVsaW5lcxgJIAMoCzIqLlBsdWdp" + 
          "bi5RdWVyeVJlc3BvbnNlTWVzc2FnZS5SZXNwb25zZS5MaW5lEi4KC2F0dGFj" + 
          "aG1lbnRzGBEgAygLMhkuUGx1Z2luLkNvbW1vbi5BdHRhY2htZW50EgwKBGRh" + 
          "dGEYBSABKAwaRQoETGluZRIPCgdtZXNzYWdlGAEgAigJEiwKBHBlcmYYAiAD" + 
          "KAsyHi5QbHVnaW4uQ29tbW9uLlBlcmZvcm1hbmNlRGF0YSKRAgoVRXhlY3V0" + 
          "ZVJlcXVlc3RNZXNzYWdlEiUKBmhlYWRlchgBIAEoCzIVLlBsdWdpbi5Db21t" + 
          "b24uSGVhZGVyEjYKB3BheWxvYWQYAiADKAsyJS5QbHVnaW4uRXhlY3V0ZVJl" + 
          "cXVlc3RNZXNzYWdlLlJlcXVlc3QSLgoLYXR0YWNobWVudHMYAyADKAsyGS5Q" + 
          "bHVnaW4uQ29tbW9uLkF0dGFjaG1lbnQaaQoHUmVxdWVzdBIKCgJpZBgBIAEo" + 
          "BRIPCgdjb21tYW5kGAIgAigJEhEKCWFyZ3VtZW50cxgDIAMoCRIuCgthdHRh" + 
          "Y2htZW50cxgRIAMoCzIZLlBsdWdpbi5Db21tb24uQXR0YWNobWVudCLgAgoW" + 
          "RXhlY3V0ZVJlc3BvbnNlTWVzc2FnZRIlCgZoZWFkZXIYASABKAsyFS5QbHVn" + 
          "aW4uQ29tbW9uLkhlYWRlchI4CgdwYXlsb2FkGAIgAygLMicuUGx1Z2luLkV4" + 
          "ZWN1dGVSZXNwb25zZU1lc3NhZ2UuUmVzcG9uc2USLgoLYXR0YWNobWVudHMY" + 
          "AyADKAsyGS5QbHVnaW4uQ29tbW9uLkF0dGFjaG1lbnQatAEKCFJlc3BvbnNl" + 
          "EgoKAmlkGAIgASgFEg8KB2NvbW1hbmQYBSACKAkSEQoJYXJndW1lbnRzGBAg" + 
          "AygJEikKBnJlc3VsdBgJIAIoDjIZLlBsdWdpbi5Db21tb24uUmVzdWx0Q29k" + 
          "ZRIPCgdtZXNzYWdlGAogAigJEgwKBGRhdGEYByABKAwSLgoLYXR0YWNobWVu" + 
          "dHMYESADKAsyGS5QbHVnaW4uQ29tbW9uLkF0dGFjaG1lbnQitgEKFFN1Ym1p" + 
          "dFJlcXVlc3RNZXNzYWdlEiUKBmhlYWRlchgBIAEoCzIVLlBsdWdpbi5Db21t" + 
          "b24uSGVhZGVyEg8KB2NoYW5uZWwYAiACKAkSNgoHcGF5bG9hZBgDIAMoCzIl" + 
          "LlBsdWdpbi5RdWVyeVJlc3BvbnNlTWVzc2FnZS5SZXNwb25zZRIuCgthdHRh" + 
          "Y2htZW50cxgEIAMoCzIZLlBsdWdpbi5Db21tb24uQXR0YWNobWVudCKnAgoV" + 
          "U3VibWl0UmVzcG9uc2VNZXNzYWdlEiUKBmhlYWRlchgBIAEoCzIVLlBsdWdp" + 
          "bi5Db21tb24uSGVhZGVyEjcKB3BheWxvYWQYAiADKAsyJi5QbHVnaW4uU3Vi" + 
          "bWl0UmVzcG9uc2VNZXNzYWdlLlJlc3BvbnNlEi4KC2F0dGFjaG1lbnRzGAMg" + 
          "AygLMhkuUGx1Z2luLkNvbW1vbi5BdHRhY2htZW50Gn4KCFJlc3BvbnNlEgoK" + 
          "AmlkGAEgASgFEg8KB2NvbW1hbmQYAiACKAkSJQoGcmVzdWx0GAMgAigLMhUu" + 
          "UGx1Z2luLkNvbW1vbi5SZXN1bHQSLgoLYXR0YWNobWVudHMYESADKAsyGS5Q" + 
          "bHVnaW4uQ29tbW9uLkF0dGFjaG1lbnQi8gYKCFJlZ2lzdHJ5GhsKBVF1ZXJ5" + 
          "EhIKCmV4cHJlc3Npb24YASABKAkaqAEKC0luZm9ybWF0aW9uEg0KBXRpdGxl" + 
          "GAEgASgJEhMKC2Rlc2NyaXB0aW9uGAIgASgJEikKCG1ldGFkYXRhGAMgAygL" + 
          "MhcuUGx1Z2luLkNvbW1vbi5LZXlWYWx1ZRITCgttaW5fdmVyc2lvbhgFIAEo" + 
          "CRITCgttYXhfdmVyc2lvbhgGIAEoCRIQCghhZHZhbmNlZBgIIAEoCBIOCgZw" + 
          "bHVnaW4YCSADKAkaegoSS2V5V29yZERlc2NyaXB0aW9uEhEKCXBhcmFtZXRl" + 
          "chgBIAIoCRIPCgdjb250ZXh0GAIgASgJEgsKA2tleRgDIAIoCRIZChFzaG9y" + 
          "dF9kZXNjcmlwdGlvbhgFIAEoCRIYChBsb25nX2Rlc2NyaXB0aW9uGAYgASgJ" + 
          "GvYBCg9QYXJhbWV0ZXJEZXRhaWwSDAoEbmFtZRgBIAEoCRIVCg1kZWZhdWx0" + 
          "X3ZhbHVlGAIgASgJEhAKCHJlcXVpcmVkGAMgASgIEhIKCnJlcGVhdGFibGUY" + 
          "BCABKAgSLQoMY29udGVudF90eXBlGAUgASgOMhcuUGx1Z2luLkNvbW1vbi5E" + 
          "YXRhVHlwZRIZChFzaG9ydF9kZXNjcmlwdGlvbhgGIAEoCRIYChBsb25nX2Rl" + 
          "c2NyaXB0aW9uGAcgASgJEjQKB2tleXdvcmQYCCADKAsyIy5QbHVnaW4uUmVn" + 
          "aXN0cnkuS2V5V29yZERlc2NyaXB0aW9uGkcKEFBhcmFtZXRlckRldGFpbHMS" + 
          "MwoJcGFyYW1ldGVyGAEgAygLMiAuUGx1Z2luLlJlZ2lzdHJ5LlBhcmFtZXRl" + 
          "ckRldGFpbBo2CghTY2hlZHVsZRIKCgJpZBgBIAEoCRIMCgRjcm9uGAIgASgJ" + 
          "EhAKCGludGVydmFsGAMgASgJInsKCEl0ZW1UeXBlEgkKBVFVRVJZEAESCwoH" + 
          "Q09NTUFORBACEgsKB0hBTkRMRVIQAxIKCgZQTFVHSU4QBBIPCgtRVUVSWV9B" + 
          "TElBUxAFEgoKBlJPVVRFUhAGEgoKBk1PRFVMRRAHEgwKCFNDSEVEVUxFEAgS" + 
          "BwoDQUxMEGMiKwoHQ29tbWFuZBIICgRMT0FEEAESCgoGVU5MT0FEEAISCgoG" + 
          "UkVMT0FEEAMitwYKFlJlZ2lzdHJ5UmVxdWVzdE1lc3NhZ2USJQoGaGVhZGVy" + 
          "GAEgASgLMhUuUGx1Z2luLkNvbW1vbi5IZWFkZXISNwoHcGF5bG9hZBgCIAMo" + 
          "CzImLlBsdWdpbi5SZWdpc3RyeVJlcXVlc3RNZXNzYWdlLlJlcXVlc3QavAUK" + 
          "B1JlcXVlc3QSCgoCaWQYASABKAMSSQoMcmVnaXN0cmF0aW9uGAMgASgLMjMu" + 
          "UGx1Z2luLlJlZ2lzdHJ5UmVxdWVzdE1lc3NhZ2UuUmVxdWVzdC5SZWdpc3Ry" + 
          "YXRpb24SQwoJaW52ZW50b3J5GAQgASgLMjAuUGx1Z2luLlJlZ2lzdHJ5UmVx" + 
          "dWVzdE1lc3NhZ2UuUmVxdWVzdC5JbnZlbnRvcnkSPwoHY29udHJvbBgFIAEo" + 
          "CzIuLlBsdWdpbi5SZWdpc3RyeVJlcXVlc3RNZXNzYWdlLlJlcXVlc3QuQ29u" + 
          "dHJvbBrUAQoMUmVnaXN0cmF0aW9uEhEKCXBsdWdpbl9pZBgBIAEoBRInCgR0" + 
          "eXBlGAIgAigOMhkuUGx1Z2luLlJlZ2lzdHJ5Lkl0ZW1UeXBlEgwKBG5hbWUY" + 
          "AyACKAkSKgoEaW5mbxgEIAEoCzIcLlBsdWdpbi5SZWdpc3RyeS5JbmZvcm1h" + 
          "dGlvbhISCgp1bnJlZ2lzdGVyGAUgASgIEg0KBWFsaWFzGAkgAygJEisKCHNj" + 
          "aGVkdWxlGBQgAygLMhkuUGx1Z2luLlJlZ2lzdHJ5LlNjaGVkdWxlGoABCglJ" + 
          "bnZlbnRvcnkSDgoGcGx1Z2luGAEgASgJEicKBHR5cGUYAiADKA4yGS5QbHVn" + 
          "aW4uUmVnaXN0cnkuSXRlbVR5cGUSDAoEbmFtZRgDIAEoCRIRCglmZXRjaF9h" + 
          "bGwYBiABKAgSGQoRZmV0Y2hfaW5mb3JtYXRpb24YByABKAgaegoHQ29udHJv" + 
          "bBIpCgdjb21tYW5kGAEgAigOMhguUGx1Z2luLlJlZ2lzdHJ5LkNvbW1hbmQS" + 
          "JwoEdHlwZRgCIAIoDjIZLlBsdWdpbi5SZWdpc3RyeS5JdGVtVHlwZRIMCgRu" + 
          "YW1lGAMgASgJEg0KBWFsaWFzGAQgASgJIqMFChdSZWdpc3RyeVJlc3BvbnNl" + 
          "TWVzc2FnZRIlCgZoZWFkZXIYASABKAsyFS5QbHVnaW4uQ29tbW9uLkhlYWRl" + 
          "chI5CgdwYXlsb2FkGAIgAygLMiguUGx1Z2luLlJlZ2lzdHJ5UmVzcG9uc2VN" + 
          "ZXNzYWdlLlJlc3BvbnNlGqUECghSZXNwb25zZRIKCgJpZBgBIAEoAxIlCgZy" + 
          "ZXN1bHQYAiACKAsyFS5QbHVnaW4uQ29tbW9uLlJlc3VsdBJLCgxyZWdpc3Ry" + 
          "YXRpb24YAyABKAsyNS5QbHVnaW4uUmVnaXN0cnlSZXNwb25zZU1lc3NhZ2Uu" + 
          "UmVzcG9uc2UuUmVnaXN0cmF0aW9uEkUKCWludmVudG9yeRgEIAMoCzIyLlBs" + 
          "dWdpbi5SZWdpc3RyeVJlc3BvbnNlTWVzc2FnZS5SZXNwb25zZS5JbnZlbnRv" + 
          "cnkSQQoHY29udHJvbBgFIAEoCzIwLlBsdWdpbi5SZWdpc3RyeVJlc3BvbnNl" + 
          "TWVzc2FnZS5SZXNwb25zZS5Db250cm9sGh8KDFJlZ2lzdHJhdGlvbhIPCgdp" + 
          "dGVtX2lkGAEgASgFGuIBCglJbnZlbnRvcnkSDgoGcGx1Z2luGAEgAygJEicK" + 
          "BHR5cGUYAiACKA4yGS5QbHVnaW4uUmVnaXN0cnkuSXRlbVR5cGUSDAoEbmFt" + 
          "ZRgDIAIoCRIqCgRpbmZvGAQgASgLMhwuUGx1Z2luLlJlZ2lzdHJ5LkluZm9y" + 
          "bWF0aW9uEjUKCnBhcmFtZXRlcnMYBSABKAsyIS5QbHVnaW4uUmVnaXN0cnku" + 
          "UGFyYW1ldGVyRGV0YWlscxIrCghzY2hlZHVsZRgUIAMoCzIZLlBsdWdpbi5S" + 
          "ZWdpc3RyeS5TY2hlZHVsZRoJCgdDb250cm9sIoYCChtTY2hlZHVsZU5vdGlm" + 
          "aWNhdGlvbk1lc3NhZ2USJQoGaGVhZGVyGAEgASgLMhUuUGx1Z2luLkNvbW1v" + 
          "bi5IZWFkZXISPAoHcGF5bG9hZBgCIAMoCzIrLlBsdWdpbi5TY2hlZHVsZU5v" + 
          "dGlmaWNhdGlvbk1lc3NhZ2UuUmVxdWVzdBqBAQoHUmVxdWVzdBIKCgJpZBgB" + 
          "IAEoAxIRCglwbHVnaW5faWQYAyACKAUSKgoEaW5mbxgEIAEoCzIcLlBsdWdp" + 
          "bi5SZWdpc3RyeS5JbmZvcm1hdGlvbhIrCghzY2hlZHVsZRgUIAEoCzIZLlBs" + 
          "dWdpbi5SZWdpc3RyeS5TY2hlZHVsZSLOAgoIU2V0dGluZ3MaIQoETm9kZRIM" + 
          "CgRwYXRoGAEgAigJEgsKA2tleRgCIAEoCRobCgVRdWVyeRISCgpleHByZXNz" + 
          "aW9uGAEgASgJGtYBCgtJbmZvcm1hdGlvbhINCgV0aXRsZRgBIAEoCRITCgtk" + 
          "ZXNjcmlwdGlvbhgCIAEoCRIxCg1kZWZhdWx0X3ZhbHVlGAMgASgLMhouUGx1" + 
          "Z2luLkNvbW1vbi5BbnlEYXRhVHlwZRITCgttaW5fdmVyc2lvbhgEIAEoCRIT" + 
          "CgttYXhfdmVyc2lvbhgFIAEoCRIQCghhZHZhbmNlZBgGIAEoCBIOCgZzYW1w" + 
          "bGUYByABKAgSFAoMc2FtcGxlX3VzYWdlGAggASgJEg4KBnBsdWdpbhgJIAMo" + 
          "CSIpCgdDb21tYW5kEggKBExPQUQQARIICgRTQVZFEAISCgoGUkVMT0FEEAMi" + 
          "1wkKFlNldHRpbmdzUmVxdWVzdE1lc3NhZ2USJQoGaGVhZGVyGAEgASgLMhUu" + 
          "UGx1Z2luLkNvbW1vbi5IZWFkZXISNwoHcGF5bG9hZBgCIAMoCzImLlBsdWdp" + 
          "bi5TZXR0aW5nc1JlcXVlc3RNZXNzYWdlLlJlcXVlc3Qa3AgKB1JlcXVlc3QS" + 
          "CgoCaWQYASABKAMSEQoJcGx1Z2luX2lkGAMgAigFEkkKDHJlZ2lzdHJhdGlv" + 
          "bhgKIAEoCzIzLlBsdWdpbi5TZXR0aW5nc1JlcXVlc3RNZXNzYWdlLlJlcXVl" + 
          "c3QuUmVnaXN0cmF0aW9uEjsKBXF1ZXJ5GAsgASgLMiwuUGx1Z2luLlNldHRp" + 
          "bmdzUmVxdWVzdE1lc3NhZ2UuUmVxdWVzdC5RdWVyeRI9CgZ1cGRhdGUYDCAB" + 
          "KAsyLS5QbHVnaW4uU2V0dGluZ3NSZXF1ZXN0TWVzc2FnZS5SZXF1ZXN0LlVw" + 
          "ZGF0ZRJDCglpbnZlbnRvcnkYDSABKAsyMC5QbHVnaW4uU2V0dGluZ3NSZXF1" + 
          "ZXN0TWVzc2FnZS5SZXF1ZXN0LkludmVudG9yeRI/Cgdjb250cm9sGA4gASgL" + 
          "Mi4uUGx1Z2luLlNldHRpbmdzUmVxdWVzdE1lc3NhZ2UuUmVxdWVzdC5Db250" + 
          "cm9sEj0KBnN0YXR1cxgPIAEoCzItLlBsdWdpbi5TZXR0aW5nc1JlcXVlc3RN" + 
          "ZXNzYWdlLlJlcXVlc3QuU3RhdHVzGl8KDFJlZ2lzdHJhdGlvbhIjCgRub2Rl" + 
          "GAEgASgLMhUuUGx1Z2luLlNldHRpbmdzLk5vZGUSKgoEaW5mbxgCIAEoCzIc" + 
          "LlBsdWdpbi5TZXR0aW5ncy5JbmZvcm1hdGlvbhrAAQoFUXVlcnkSIwoEbm9k" + 
          "ZRgBIAEoCzIVLlBsdWdpbi5TZXR0aW5ncy5Ob2RlEiUKBXF1ZXJ5GAQgASgL" + 
          "MhYuUGx1Z2luLlNldHRpbmdzLlF1ZXJ5EhEKCXJlY3Vyc2l2ZRgCIAEoCBIl" + 
          "CgR0eXBlGAMgASgOMhcuUGx1Z2luLkNvbW1vbi5EYXRhVHlwZRIxCg1kZWZh" + 
          "dWx0X3ZhbHVlGAUgASgLMhouUGx1Z2luLkNvbW1vbi5BbnlEYXRhVHlwZRpY" + 
          "CgZVcGRhdGUSIwoEbm9kZRgBIAEoCzIVLlBsdWdpbi5TZXR0aW5ncy5Ob2Rl" + 
          "EikKBXZhbHVlGAIgASgLMhouUGx1Z2luLkNvbW1vbi5BbnlEYXRhVHlwZRrW" + 
          "AQoJSW52ZW50b3J5Eg4KBnBsdWdpbhgLIAEoCRIjCgRub2RlGAEgASgLMhUu" + 
          "UGx1Z2luLlNldHRpbmdzLk5vZGUSJQoFcXVlcnkYCiABKAsyFi5QbHVnaW4u" + 
          "U2V0dGluZ3MuUXVlcnkSFwoPcmVjdXJzaXZlX2ZldGNoGAIgASgIEhIKCmZl" + 
          "dGNoX2tleXMYAyABKAgSEwoLZmV0Y2hfcGF0aHMYBCABKAgSFQoNZmV0Y2hf" + 
          "c2FtcGxlcxgFIAEoCBIUCgxkZXNjcmlwdGlvbnMYBiABKAgaRQoHQ29udHJv" + 
          "bBIpCgdjb21tYW5kGAEgAigOMhguUGx1Z2luLlNldHRpbmdzLkNvbW1hbmQS" + 
          "DwoHY29udGV4dBgCIAEoCRoICgZTdGF0dXMimQcKF1NldHRpbmdzUmVzcG9u" + 
          "c2VNZXNzYWdlEiUKBmhlYWRlchgBIAEoCzIVLlBsdWdpbi5Db21tb24uSGVh" + 
          "ZGVyEjkKB3BheWxvYWQYAiADKAsyKC5QbHVnaW4uU2V0dGluZ3NSZXNwb25z" + 
          "ZU1lc3NhZ2UuUmVzcG9uc2UamwYKCFJlc3BvbnNlEgoKAmlkGAEgASgDEiUK" + 
          "BnJlc3VsdBgCIAIoCzIVLlBsdWdpbi5Db21tb24uUmVzdWx0EksKDHJlZ2lz" + 
          "dHJhdGlvbhgKIAEoCzI1LlBsdWdpbi5TZXR0aW5nc1Jlc3BvbnNlTWVzc2Fn" + 
          "ZS5SZXNwb25zZS5SZWdpc3RyYXRpb24SPQoFcXVlcnkYCyABKAsyLi5QbHVn" + 
          "aW4uU2V0dGluZ3NSZXNwb25zZU1lc3NhZ2UuUmVzcG9uc2UuUXVlcnkSPwoG" + 
          "dXBkYXRlGAwgASgLMi8uUGx1Z2luLlNldHRpbmdzUmVzcG9uc2VNZXNzYWdl" + 
          "LlJlc3BvbnNlLlVwZGF0ZRJFCglpbnZlbnRvcnkYDSADKAsyMi5QbHVnaW4u" + 
          "U2V0dGluZ3NSZXNwb25zZU1lc3NhZ2UuUmVzcG9uc2UuSW52ZW50b3J5EkEK" + 
          "B2NvbnRyb2wYDiABKAsyMC5QbHVnaW4uU2V0dGluZ3NSZXNwb25zZU1lc3Nh" + 
          "Z2UuUmVzcG9uc2UuQ29udHJvbBI/CgZzdGF0dXMYDyABKAsyLy5QbHVnaW4u" + 
          "U2V0dGluZ3NSZXNwb25zZU1lc3NhZ2UuUmVzcG9uc2UuU3RhdHVzGg4KDFJl" + 
          "Z2lzdHJhdGlvbhpXCgVRdWVyeRIjCgRub2RlGAEgAigLMhUuUGx1Z2luLlNl" + 
          "dHRpbmdzLk5vZGUSKQoFdmFsdWUYAiACKAsyGi5QbHVnaW4uQ29tbW9uLkFu" + 
          "eURhdGFUeXBlGggKBlVwZGF0ZRqHAQoJSW52ZW50b3J5EiMKBG5vZGUYASAC" + 
          "KAsyFS5QbHVnaW4uU2V0dGluZ3MuTm9kZRIqCgRpbmZvGAIgAigLMhwuUGx1" + 
          "Z2luLlNldHRpbmdzLkluZm9ybWF0aW9uEikKBXZhbHVlGAMgASgLMhouUGx1" + 
          "Z2luLkNvbW1vbi5BbnlEYXRhVHlwZRoJCgdDb250cm9sGjwKBlN0YXR1cxIP" + 
          "Cgdjb250ZXh0GAEgASgJEgwKBHR5cGUYAiABKAkSEwoLaGFzX2NoYW5nZWQY" + 
          "AyABKAgijQIKCExvZ0VudHJ5EiUKBWVudHJ5GAEgAygLMhYuUGx1Z2luLkxv" + 
          "Z0VudHJ5LkVudHJ5GtkBCgVFbnRyeRIrCgVsZXZlbBgBIAIoDjIcLlBsdWdp" + 
          "bi5Mb2dFbnRyeS5FbnRyeS5MZXZlbBIOCgZzZW5kZXIYAiABKAkSDAoEZmls" + 
          "ZRgDIAEoCRIMCgRsaW5lGAQgASgFEg8KB21lc3NhZ2UYBSABKAkSDAoEZGF0" + 
          "ZRgGIAEoBSJYCgVMZXZlbBIOCglMT0dfREVCVUcQ9AMSDQoITE9HX0lORk8Q" + 
          "lgESDwoLTE9HX1dBUk5JTkcQMhINCglMT0dfRVJST1IQChIQCgxMT0dfQ1JJ" + 
          "VElDQUwQASKyAgoOTWV0cmljc01lc3NhZ2USJQoGaGVhZGVyGAEgASgLMhUu" + 
          "UGx1Z2luLkNvbW1vbi5IZWFkZXISLwoHcGF5bG9hZBgCIAMoCzIeLlBsdWdp" + 
          "bi5NZXRyaWNzTWVzc2FnZS5NZXRyaWNzEi4KC2F0dGFjaG1lbnRzGAMgAygL" + 
          "MhkuUGx1Z2luLkNvbW1vbi5BdHRhY2htZW50GkAKBk1ldHJpYxILCgNrZXkY" + 
          "ASACKAkSKQoFdmFsdWUYAiABKAsyGi5QbHVnaW4uQ29tbW9uLkFueURhdGFU" + 
          "eXBlGlYKB01ldHJpY3MSCgoCaWQYASABKAUSDgoGdGFyZ2V0GAcgASgJEi8K" + 
          "B21ldHJpY3MYAiADKAsyHi5QbHVnaW4uTWV0cmljc01lc3NhZ2UuTWV0cmlj" + 
          "cw==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Plugin_Common__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Plugin_Common__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Common, global::Plugin.Common.Builder>(internal__static_Plugin_Common__Descriptor,
                new string[] { });
        internal__static_Plugin_Common_AnyDataType__Descriptor = internal__static_Plugin_Common__Descriptor.NestedTypes[0];
        internal__static_Plugin_Common_AnyDataType__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.AnyDataType, global::Plugin.Common.Types.AnyDataType.Builder>(internal__static_Plugin_Common_AnyDataType__Descriptor,
                new string[] { "StringData", "IntData", "FloatData", "BoolData", "ListData", });
        internal__static_Plugin_Common_KeyValue__Descriptor = internal__static_Plugin_Common__Descriptor.NestedTypes[1];
        internal__static_Plugin_Common_KeyValue__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.KeyValue, global::Plugin.Common.Types.KeyValue.Builder>(internal__static_Plugin_Common_KeyValue__Descriptor,
                new string[] { "Key", "Value", });
        internal__static_Plugin_Common_Host__Descriptor = internal__static_Plugin_Common__Descriptor.NestedTypes[2];
        internal__static_Plugin_Common_Host__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.Host, global::Plugin.Common.Types.Host.Builder>(internal__static_Plugin_Common_Host__Descriptor,
                new string[] { "Id", "Host_", "Address", "Protocol", "Comment", "Metadata", "Tags", });
        internal__static_Plugin_Common_Header__Descriptor = internal__static_Plugin_Common__Descriptor.NestedTypes[3];
        internal__static_Plugin_Common_Header__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.Header, global::Plugin.Common.Types.Header.Builder>(internal__static_Plugin_Common_Header__Descriptor,
                new string[] { "SourceId", "SenderId", "RecipientId", "DestinationId", "MessageId", "Metadata", "Tags", "Hosts", });
        internal__static_Plugin_Common_Attachment__Descriptor = internal__static_Plugin_Common__Descriptor.NestedTypes[4];
        internal__static_Plugin_Common_Attachment__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.Attachment, global::Plugin.Common.Types.Attachment.Builder>(internal__static_Plugin_Common_Attachment__Descriptor,
                new string[] { "Id", "Type", "Metadata", "Tags", "Data", });
        internal__static_Plugin_Common_PerformanceData__Descriptor = internal__static_Plugin_Common__Descriptor.NestedTypes[5];
        internal__static_Plugin_Common_PerformanceData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.PerformanceData, global::Plugin.Common.Types.PerformanceData.Builder>(internal__static_Plugin_Common_PerformanceData__Descriptor,
                new string[] { "Alias", "IntValue", "StringValue", "FloatValue", "BoolValue", });
        internal__static_Plugin_Common_PerformanceData_IntValue__Descriptor = internal__static_Plugin_Common_PerformanceData__Descriptor.NestedTypes[0];
        internal__static_Plugin_Common_PerformanceData_IntValue__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.PerformanceData.Types.IntValue, global::Plugin.Common.Types.PerformanceData.Types.IntValue.Builder>(internal__static_Plugin_Common_PerformanceData_IntValue__Descriptor,
                new string[] { "Value", "Unit", "Warning", "Critical", "Minimum", "Maximum", });
        internal__static_Plugin_Common_PerformanceData_StringValue__Descriptor = internal__static_Plugin_Common_PerformanceData__Descriptor.NestedTypes[1];
        internal__static_Plugin_Common_PerformanceData_StringValue__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.PerformanceData.Types.StringValue, global::Plugin.Common.Types.PerformanceData.Types.StringValue.Builder>(internal__static_Plugin_Common_PerformanceData_StringValue__Descriptor,
                new string[] { "Value", });
        internal__static_Plugin_Common_PerformanceData_FloatValue__Descriptor = internal__static_Plugin_Common_PerformanceData__Descriptor.NestedTypes[2];
        internal__static_Plugin_Common_PerformanceData_FloatValue__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.PerformanceData.Types.FloatValue, global::Plugin.Common.Types.PerformanceData.Types.FloatValue.Builder>(internal__static_Plugin_Common_PerformanceData_FloatValue__Descriptor,
                new string[] { "Value", "Unit", "Warning", "Critical", "Minimum", "Maximum", });
        internal__static_Plugin_Common_PerformanceData_BoolValue__Descriptor = internal__static_Plugin_Common_PerformanceData__Descriptor.NestedTypes[3];
        internal__static_Plugin_Common_PerformanceData_BoolValue__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.PerformanceData.Types.BoolValue, global::Plugin.Common.Types.PerformanceData.Types.BoolValue.Builder>(internal__static_Plugin_Common_PerformanceData_BoolValue__Descriptor,
                new string[] { "Value", "Unit", "Warning", "Critical", });
        internal__static_Plugin_Common_Result__Descriptor = internal__static_Plugin_Common__Descriptor.NestedTypes[6];
        internal__static_Plugin_Common_Result__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.Result, global::Plugin.Common.Types.Result.Builder>(internal__static_Plugin_Common_Result__Descriptor,
                new string[] { "Code", "Message", "Data", });
        internal__static_Plugin_QueryRequestMessage__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Plugin_QueryRequestMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.QueryRequestMessage, global::Plugin.QueryRequestMessage.Builder>(internal__static_Plugin_QueryRequestMessage__Descriptor,
                new string[] { "Header", "Payload", "Attachments", });
        internal__static_Plugin_QueryRequestMessage_Request__Descriptor = internal__static_Plugin_QueryRequestMessage__Descriptor.NestedTypes[0];
        internal__static_Plugin_QueryRequestMessage_Request__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.QueryRequestMessage.Types.Request, global::Plugin.QueryRequestMessage.Types.Request.Builder>(internal__static_Plugin_QueryRequestMessage_Request__Descriptor,
                new string[] { "Id", "Target", "Command", "Alias", "Arguments", "Attachments", });
        internal__static_Plugin_QueryResponseMessage__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Plugin_QueryResponseMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.QueryResponseMessage, global::Plugin.QueryResponseMessage.Builder>(internal__static_Plugin_QueryResponseMessage__Descriptor,
                new string[] { "Header", "Payload", "Attachments", });
        internal__static_Plugin_QueryResponseMessage_Response__Descriptor = internal__static_Plugin_QueryResponseMessage__Descriptor.NestedTypes[0];
        internal__static_Plugin_QueryResponseMessage_Response__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.QueryResponseMessage.Types.Response, global::Plugin.QueryResponseMessage.Types.Response.Builder>(internal__static_Plugin_QueryResponseMessage_Response__Descriptor,
                new string[] { "Id", "Source", "Command", "Alias", "Arguments", "Result", "Lines", "Attachments", "Data", });
        internal__static_Plugin_QueryResponseMessage_Response_Line__Descriptor = internal__static_Plugin_QueryResponseMessage_Response__Descriptor.NestedTypes[0];
        internal__static_Plugin_QueryResponseMessage_Response_Line__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.QueryResponseMessage.Types.Response.Types.Line, global::Plugin.QueryResponseMessage.Types.Response.Types.Line.Builder>(internal__static_Plugin_QueryResponseMessage_Response_Line__Descriptor,
                new string[] { "Message", "Perf", });
        internal__static_Plugin_ExecuteRequestMessage__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Plugin_ExecuteRequestMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.ExecuteRequestMessage, global::Plugin.ExecuteRequestMessage.Builder>(internal__static_Plugin_ExecuteRequestMessage__Descriptor,
                new string[] { "Header", "Payload", "Attachments", });
        internal__static_Plugin_ExecuteRequestMessage_Request__Descriptor = internal__static_Plugin_ExecuteRequestMessage__Descriptor.NestedTypes[0];
        internal__static_Plugin_ExecuteRequestMessage_Request__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.ExecuteRequestMessage.Types.Request, global::Plugin.ExecuteRequestMessage.Types.Request.Builder>(internal__static_Plugin_ExecuteRequestMessage_Request__Descriptor,
                new string[] { "Id", "Command", "Arguments", "Attachments", });
        internal__static_Plugin_ExecuteResponseMessage__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Plugin_ExecuteResponseMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.ExecuteResponseMessage, global::Plugin.ExecuteResponseMessage.Builder>(internal__static_Plugin_ExecuteResponseMessage__Descriptor,
                new string[] { "Header", "Payload", "Attachments", });
        internal__static_Plugin_ExecuteResponseMessage_Response__Descriptor = internal__static_Plugin_ExecuteResponseMessage__Descriptor.NestedTypes[0];
        internal__static_Plugin_ExecuteResponseMessage_Response__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.ExecuteResponseMessage.Types.Response, global::Plugin.ExecuteResponseMessage.Types.Response.Builder>(internal__static_Plugin_ExecuteResponseMessage_Response__Descriptor,
                new string[] { "Id", "Command", "Arguments", "Result", "Message", "Data", "Attachments", });
        internal__static_Plugin_SubmitRequestMessage__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Plugin_SubmitRequestMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.SubmitRequestMessage, global::Plugin.SubmitRequestMessage.Builder>(internal__static_Plugin_SubmitRequestMessage__Descriptor,
                new string[] { "Header", "Channel", "Payload", "Attachments", });
        internal__static_Plugin_SubmitResponseMessage__Descriptor = Descriptor.MessageTypes[6];
        internal__static_Plugin_SubmitResponseMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.SubmitResponseMessage, global::Plugin.SubmitResponseMessage.Builder>(internal__static_Plugin_SubmitResponseMessage__Descriptor,
                new string[] { "Header", "Payload", "Attachments", });
        internal__static_Plugin_SubmitResponseMessage_Response__Descriptor = internal__static_Plugin_SubmitResponseMessage__Descriptor.NestedTypes[0];
        internal__static_Plugin_SubmitResponseMessage_Response__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.SubmitResponseMessage.Types.Response, global::Plugin.SubmitResponseMessage.Types.Response.Builder>(internal__static_Plugin_SubmitResponseMessage_Response__Descriptor,
                new string[] { "Id", "Command", "Result", "Attachments", });
        internal__static_Plugin_Registry__Descriptor = Descriptor.MessageTypes[7];
        internal__static_Plugin_Registry__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Registry, global::Plugin.Registry.Builder>(internal__static_Plugin_Registry__Descriptor,
                new string[] { });
        internal__static_Plugin_Registry_Query__Descriptor = internal__static_Plugin_Registry__Descriptor.NestedTypes[0];
        internal__static_Plugin_Registry_Query__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Registry.Types.Query, global::Plugin.Registry.Types.Query.Builder>(internal__static_Plugin_Registry_Query__Descriptor,
                new string[] { "Expression", });
        internal__static_Plugin_Registry_Information__Descriptor = internal__static_Plugin_Registry__Descriptor.NestedTypes[1];
        internal__static_Plugin_Registry_Information__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Registry.Types.Information, global::Plugin.Registry.Types.Information.Builder>(internal__static_Plugin_Registry_Information__Descriptor,
                new string[] { "Title", "Description", "Metadata", "MinVersion", "MaxVersion", "Advanced", "Plugin", });
        internal__static_Plugin_Registry_KeyWordDescription__Descriptor = internal__static_Plugin_Registry__Descriptor.NestedTypes[2];
        internal__static_Plugin_Registry_KeyWordDescription__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Registry.Types.KeyWordDescription, global::Plugin.Registry.Types.KeyWordDescription.Builder>(internal__static_Plugin_Registry_KeyWordDescription__Descriptor,
                new string[] { "Parameter", "Context", "Key", "ShortDescription", "LongDescription", });
        internal__static_Plugin_Registry_ParameterDetail__Descriptor = internal__static_Plugin_Registry__Descriptor.NestedTypes[3];
        internal__static_Plugin_Registry_ParameterDetail__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Registry.Types.ParameterDetail, global::Plugin.Registry.Types.ParameterDetail.Builder>(internal__static_Plugin_Registry_ParameterDetail__Descriptor,
                new string[] { "Name", "DefaultValue", "Required", "Repeatable", "ContentType", "ShortDescription", "LongDescription", "Keyword", });
        internal__static_Plugin_Registry_ParameterDetails__Descriptor = internal__static_Plugin_Registry__Descriptor.NestedTypes[4];
        internal__static_Plugin_Registry_ParameterDetails__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Registry.Types.ParameterDetails, global::Plugin.Registry.Types.ParameterDetails.Builder>(internal__static_Plugin_Registry_ParameterDetails__Descriptor,
                new string[] { "Parameter", });
        internal__static_Plugin_Registry_Schedule__Descriptor = internal__static_Plugin_Registry__Descriptor.NestedTypes[5];
        internal__static_Plugin_Registry_Schedule__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Registry.Types.Schedule, global::Plugin.Registry.Types.Schedule.Builder>(internal__static_Plugin_Registry_Schedule__Descriptor,
                new string[] { "Id", "Cron", "Interval", });
        internal__static_Plugin_RegistryRequestMessage__Descriptor = Descriptor.MessageTypes[8];
        internal__static_Plugin_RegistryRequestMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.RegistryRequestMessage, global::Plugin.RegistryRequestMessage.Builder>(internal__static_Plugin_RegistryRequestMessage__Descriptor,
                new string[] { "Header", "Payload", });
        internal__static_Plugin_RegistryRequestMessage_Request__Descriptor = internal__static_Plugin_RegistryRequestMessage__Descriptor.NestedTypes[0];
        internal__static_Plugin_RegistryRequestMessage_Request__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.RegistryRequestMessage.Types.Request, global::Plugin.RegistryRequestMessage.Types.Request.Builder>(internal__static_Plugin_RegistryRequestMessage_Request__Descriptor,
                new string[] { "Id", "Registration", "Inventory", "Control", });
        internal__static_Plugin_RegistryRequestMessage_Request_Registration__Descriptor = internal__static_Plugin_RegistryRequestMessage_Request__Descriptor.NestedTypes[0];
        internal__static_Plugin_RegistryRequestMessage_Request_Registration__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.RegistryRequestMessage.Types.Request.Types.Registration, global::Plugin.RegistryRequestMessage.Types.Request.Types.Registration.Builder>(internal__static_Plugin_RegistryRequestMessage_Request_Registration__Descriptor,
                new string[] { "PluginId", "Type", "Name", "Info", "Unregister", "Alias", "Schedule", });
        internal__static_Plugin_RegistryRequestMessage_Request_Inventory__Descriptor = internal__static_Plugin_RegistryRequestMessage_Request__Descriptor.NestedTypes[1];
        internal__static_Plugin_RegistryRequestMessage_Request_Inventory__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.RegistryRequestMessage.Types.Request.Types.Inventory, global::Plugin.RegistryRequestMessage.Types.Request.Types.Inventory.Builder>(internal__static_Plugin_RegistryRequestMessage_Request_Inventory__Descriptor,
                new string[] { "Plugin", "Type", "Name", "FetchAll", "FetchInformation", });
        internal__static_Plugin_RegistryRequestMessage_Request_Control__Descriptor = internal__static_Plugin_RegistryRequestMessage_Request__Descriptor.NestedTypes[2];
        internal__static_Plugin_RegistryRequestMessage_Request_Control__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.RegistryRequestMessage.Types.Request.Types.Control, global::Plugin.RegistryRequestMessage.Types.Request.Types.Control.Builder>(internal__static_Plugin_RegistryRequestMessage_Request_Control__Descriptor,
                new string[] { "Command", "Type", "Name", "Alias", });
        internal__static_Plugin_RegistryResponseMessage__Descriptor = Descriptor.MessageTypes[9];
        internal__static_Plugin_RegistryResponseMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.RegistryResponseMessage, global::Plugin.RegistryResponseMessage.Builder>(internal__static_Plugin_RegistryResponseMessage__Descriptor,
                new string[] { "Header", "Payload", });
        internal__static_Plugin_RegistryResponseMessage_Response__Descriptor = internal__static_Plugin_RegistryResponseMessage__Descriptor.NestedTypes[0];
        internal__static_Plugin_RegistryResponseMessage_Response__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.RegistryResponseMessage.Types.Response, global::Plugin.RegistryResponseMessage.Types.Response.Builder>(internal__static_Plugin_RegistryResponseMessage_Response__Descriptor,
                new string[] { "Id", "Result", "Registration", "Inventory", "Control", });
        internal__static_Plugin_RegistryResponseMessage_Response_Registration__Descriptor = internal__static_Plugin_RegistryResponseMessage_Response__Descriptor.NestedTypes[0];
        internal__static_Plugin_RegistryResponseMessage_Response_Registration__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.RegistryResponseMessage.Types.Response.Types.Registration, global::Plugin.RegistryResponseMessage.Types.Response.Types.Registration.Builder>(internal__static_Plugin_RegistryResponseMessage_Response_Registration__Descriptor,
                new string[] { "ItemId", });
        internal__static_Plugin_RegistryResponseMessage_Response_Inventory__Descriptor = internal__static_Plugin_RegistryResponseMessage_Response__Descriptor.NestedTypes[1];
        internal__static_Plugin_RegistryResponseMessage_Response_Inventory__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.RegistryResponseMessage.Types.Response.Types.Inventory, global::Plugin.RegistryResponseMessage.Types.Response.Types.Inventory.Builder>(internal__static_Plugin_RegistryResponseMessage_Response_Inventory__Descriptor,
                new string[] { "Plugin", "Type", "Name", "Info", "Parameters", "Schedule", });
        internal__static_Plugin_RegistryResponseMessage_Response_Control__Descriptor = internal__static_Plugin_RegistryResponseMessage_Response__Descriptor.NestedTypes[2];
        internal__static_Plugin_RegistryResponseMessage_Response_Control__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.RegistryResponseMessage.Types.Response.Types.Control, global::Plugin.RegistryResponseMessage.Types.Response.Types.Control.Builder>(internal__static_Plugin_RegistryResponseMessage_Response_Control__Descriptor,
                new string[] { });
        internal__static_Plugin_ScheduleNotificationMessage__Descriptor = Descriptor.MessageTypes[10];
        internal__static_Plugin_ScheduleNotificationMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.ScheduleNotificationMessage, global::Plugin.ScheduleNotificationMessage.Builder>(internal__static_Plugin_ScheduleNotificationMessage__Descriptor,
                new string[] { "Header", "Payload", });
        internal__static_Plugin_ScheduleNotificationMessage_Request__Descriptor = internal__static_Plugin_ScheduleNotificationMessage__Descriptor.NestedTypes[0];
        internal__static_Plugin_ScheduleNotificationMessage_Request__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.ScheduleNotificationMessage.Types.Request, global::Plugin.ScheduleNotificationMessage.Types.Request.Builder>(internal__static_Plugin_ScheduleNotificationMessage_Request__Descriptor,
                new string[] { "Id", "PluginId", "Info", "Schedule", });
        internal__static_Plugin_Settings__Descriptor = Descriptor.MessageTypes[11];
        internal__static_Plugin_Settings__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Settings, global::Plugin.Settings.Builder>(internal__static_Plugin_Settings__Descriptor,
                new string[] { });
        internal__static_Plugin_Settings_Node__Descriptor = internal__static_Plugin_Settings__Descriptor.NestedTypes[0];
        internal__static_Plugin_Settings_Node__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Settings.Types.Node, global::Plugin.Settings.Types.Node.Builder>(internal__static_Plugin_Settings_Node__Descriptor,
                new string[] { "Path", "Key", });
        internal__static_Plugin_Settings_Query__Descriptor = internal__static_Plugin_Settings__Descriptor.NestedTypes[1];
        internal__static_Plugin_Settings_Query__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Settings.Types.Query, global::Plugin.Settings.Types.Query.Builder>(internal__static_Plugin_Settings_Query__Descriptor,
                new string[] { "Expression", });
        internal__static_Plugin_Settings_Information__Descriptor = internal__static_Plugin_Settings__Descriptor.NestedTypes[2];
        internal__static_Plugin_Settings_Information__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Settings.Types.Information, global::Plugin.Settings.Types.Information.Builder>(internal__static_Plugin_Settings_Information__Descriptor,
                new string[] { "Title", "Description", "DefaultValue", "MinVersion", "MaxVersion", "Advanced", "Sample", "SampleUsage", "Plugin", });
        internal__static_Plugin_SettingsRequestMessage__Descriptor = Descriptor.MessageTypes[12];
        internal__static_Plugin_SettingsRequestMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsRequestMessage, global::Plugin.SettingsRequestMessage.Builder>(internal__static_Plugin_SettingsRequestMessage__Descriptor,
                new string[] { "Header", "Payload", });
        internal__static_Plugin_SettingsRequestMessage_Request__Descriptor = internal__static_Plugin_SettingsRequestMessage__Descriptor.NestedTypes[0];
        internal__static_Plugin_SettingsRequestMessage_Request__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsRequestMessage.Types.Request, global::Plugin.SettingsRequestMessage.Types.Request.Builder>(internal__static_Plugin_SettingsRequestMessage_Request__Descriptor,
                new string[] { "Id", "PluginId", "Registration", "Query", "Update", "Inventory", "Control", "Status", });
        internal__static_Plugin_SettingsRequestMessage_Request_Registration__Descriptor = internal__static_Plugin_SettingsRequestMessage_Request__Descriptor.NestedTypes[0];
        internal__static_Plugin_SettingsRequestMessage_Request_Registration__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsRequestMessage.Types.Request.Types.Registration, global::Plugin.SettingsRequestMessage.Types.Request.Types.Registration.Builder>(internal__static_Plugin_SettingsRequestMessage_Request_Registration__Descriptor,
                new string[] { "Node", "Info", });
        internal__static_Plugin_SettingsRequestMessage_Request_Query__Descriptor = internal__static_Plugin_SettingsRequestMessage_Request__Descriptor.NestedTypes[1];
        internal__static_Plugin_SettingsRequestMessage_Request_Query__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsRequestMessage.Types.Request.Types.Query, global::Plugin.SettingsRequestMessage.Types.Request.Types.Query.Builder>(internal__static_Plugin_SettingsRequestMessage_Request_Query__Descriptor,
                new string[] { "Node", "Query_", "Recursive", "Type", "DefaultValue", });
        internal__static_Plugin_SettingsRequestMessage_Request_Update__Descriptor = internal__static_Plugin_SettingsRequestMessage_Request__Descriptor.NestedTypes[2];
        internal__static_Plugin_SettingsRequestMessage_Request_Update__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsRequestMessage.Types.Request.Types.Update, global::Plugin.SettingsRequestMessage.Types.Request.Types.Update.Builder>(internal__static_Plugin_SettingsRequestMessage_Request_Update__Descriptor,
                new string[] { "Node", "Value", });
        internal__static_Plugin_SettingsRequestMessage_Request_Inventory__Descriptor = internal__static_Plugin_SettingsRequestMessage_Request__Descriptor.NestedTypes[3];
        internal__static_Plugin_SettingsRequestMessage_Request_Inventory__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsRequestMessage.Types.Request.Types.Inventory, global::Plugin.SettingsRequestMessage.Types.Request.Types.Inventory.Builder>(internal__static_Plugin_SettingsRequestMessage_Request_Inventory__Descriptor,
                new string[] { "Plugin", "Node", "Query", "RecursiveFetch", "FetchKeys", "FetchPaths", "FetchSamples", "Descriptions", });
        internal__static_Plugin_SettingsRequestMessage_Request_Control__Descriptor = internal__static_Plugin_SettingsRequestMessage_Request__Descriptor.NestedTypes[4];
        internal__static_Plugin_SettingsRequestMessage_Request_Control__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsRequestMessage.Types.Request.Types.Control, global::Plugin.SettingsRequestMessage.Types.Request.Types.Control.Builder>(internal__static_Plugin_SettingsRequestMessage_Request_Control__Descriptor,
                new string[] { "Command", "Context", });
        internal__static_Plugin_SettingsRequestMessage_Request_Status__Descriptor = internal__static_Plugin_SettingsRequestMessage_Request__Descriptor.NestedTypes[5];
        internal__static_Plugin_SettingsRequestMessage_Request_Status__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsRequestMessage.Types.Request.Types.Status, global::Plugin.SettingsRequestMessage.Types.Request.Types.Status.Builder>(internal__static_Plugin_SettingsRequestMessage_Request_Status__Descriptor,
                new string[] { });
        internal__static_Plugin_SettingsResponseMessage__Descriptor = Descriptor.MessageTypes[13];
        internal__static_Plugin_SettingsResponseMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsResponseMessage, global::Plugin.SettingsResponseMessage.Builder>(internal__static_Plugin_SettingsResponseMessage__Descriptor,
                new string[] { "Header", "Payload", });
        internal__static_Plugin_SettingsResponseMessage_Response__Descriptor = internal__static_Plugin_SettingsResponseMessage__Descriptor.NestedTypes[0];
        internal__static_Plugin_SettingsResponseMessage_Response__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsResponseMessage.Types.Response, global::Plugin.SettingsResponseMessage.Types.Response.Builder>(internal__static_Plugin_SettingsResponseMessage_Response__Descriptor,
                new string[] { "Id", "Result", "Registration", "Query", "Update", "Inventory", "Control", "Status", });
        internal__static_Plugin_SettingsResponseMessage_Response_Registration__Descriptor = internal__static_Plugin_SettingsResponseMessage_Response__Descriptor.NestedTypes[0];
        internal__static_Plugin_SettingsResponseMessage_Response_Registration__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsResponseMessage.Types.Response.Types.Registration, global::Plugin.SettingsResponseMessage.Types.Response.Types.Registration.Builder>(internal__static_Plugin_SettingsResponseMessage_Response_Registration__Descriptor,
                new string[] { });
        internal__static_Plugin_SettingsResponseMessage_Response_Query__Descriptor = internal__static_Plugin_SettingsResponseMessage_Response__Descriptor.NestedTypes[1];
        internal__static_Plugin_SettingsResponseMessage_Response_Query__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsResponseMessage.Types.Response.Types.Query, global::Plugin.SettingsResponseMessage.Types.Response.Types.Query.Builder>(internal__static_Plugin_SettingsResponseMessage_Response_Query__Descriptor,
                new string[] { "Node", "Value", });
        internal__static_Plugin_SettingsResponseMessage_Response_Update__Descriptor = internal__static_Plugin_SettingsResponseMessage_Response__Descriptor.NestedTypes[2];
        internal__static_Plugin_SettingsResponseMessage_Response_Update__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsResponseMessage.Types.Response.Types.Update, global::Plugin.SettingsResponseMessage.Types.Response.Types.Update.Builder>(internal__static_Plugin_SettingsResponseMessage_Response_Update__Descriptor,
                new string[] { });
        internal__static_Plugin_SettingsResponseMessage_Response_Inventory__Descriptor = internal__static_Plugin_SettingsResponseMessage_Response__Descriptor.NestedTypes[3];
        internal__static_Plugin_SettingsResponseMessage_Response_Inventory__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsResponseMessage.Types.Response.Types.Inventory, global::Plugin.SettingsResponseMessage.Types.Response.Types.Inventory.Builder>(internal__static_Plugin_SettingsResponseMessage_Response_Inventory__Descriptor,
                new string[] { "Node", "Info", "Value", });
        internal__static_Plugin_SettingsResponseMessage_Response_Control__Descriptor = internal__static_Plugin_SettingsResponseMessage_Response__Descriptor.NestedTypes[4];
        internal__static_Plugin_SettingsResponseMessage_Response_Control__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsResponseMessage.Types.Response.Types.Control, global::Plugin.SettingsResponseMessage.Types.Response.Types.Control.Builder>(internal__static_Plugin_SettingsResponseMessage_Response_Control__Descriptor,
                new string[] { });
        internal__static_Plugin_SettingsResponseMessage_Response_Status__Descriptor = internal__static_Plugin_SettingsResponseMessage_Response__Descriptor.NestedTypes[5];
        internal__static_Plugin_SettingsResponseMessage_Response_Status__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.SettingsResponseMessage.Types.Response.Types.Status, global::Plugin.SettingsResponseMessage.Types.Response.Types.Status.Builder>(internal__static_Plugin_SettingsResponseMessage_Response_Status__Descriptor,
                new string[] { "Context", "Type", "HasChanged", });
        internal__static_Plugin_LogEntry__Descriptor = Descriptor.MessageTypes[14];
        internal__static_Plugin_LogEntry__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.LogEntry, global::Plugin.LogEntry.Builder>(internal__static_Plugin_LogEntry__Descriptor,
                new string[] { "Entry", });
        internal__static_Plugin_LogEntry_Entry__Descriptor = internal__static_Plugin_LogEntry__Descriptor.NestedTypes[0];
        internal__static_Plugin_LogEntry_Entry__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.LogEntry.Types.Entry, global::Plugin.LogEntry.Types.Entry.Builder>(internal__static_Plugin_LogEntry_Entry__Descriptor,
                new string[] { "Level", "Sender", "File", "Line", "Message", "Date", });
        internal__static_Plugin_MetricsMessage__Descriptor = Descriptor.MessageTypes[15];
        internal__static_Plugin_MetricsMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.MetricsMessage, global::Plugin.MetricsMessage.Builder>(internal__static_Plugin_MetricsMessage__Descriptor,
                new string[] { "Header", "Payload", "Attachments", });
        internal__static_Plugin_MetricsMessage_Metric__Descriptor = internal__static_Plugin_MetricsMessage__Descriptor.NestedTypes[0];
        internal__static_Plugin_MetricsMessage_Metric__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.MetricsMessage.Types.Metric, global::Plugin.MetricsMessage.Types.Metric.Builder>(internal__static_Plugin_MetricsMessage_Metric__Descriptor,
                new string[] { "Key", "Value", });
        internal__static_Plugin_MetricsMessage_Metrics__Descriptor = internal__static_Plugin_MetricsMessage__Descriptor.NestedTypes[1];
        internal__static_Plugin_MetricsMessage_Metrics__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.MetricsMessage.Types.Metrics, global::Plugin.MetricsMessage.Types.Metrics.Builder>(internal__static_Plugin_MetricsMessage_Metrics__Descriptor,
                new string[] { "Id", "Target", "Metrics_", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Common : pb::GeneratedMessage<Common, Common.Builder> {
    private Common() { }
    private static readonly Common defaultInstance = new Common().MakeReadOnly();
    private static readonly string[] _commonFieldNames = new string[] {  };
    private static readonly uint[] _commonFieldTags = new uint[] {  };
    public static Common DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Common DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Common ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_Common__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Common, Common.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_Common__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum ResultCode {
        OK = 0,
        WARNING = 1,
        CRITICAL = 2,
        UNKNOWN = 3,
      }
      
      public enum DataType {
        INT = 1,
        STRING = 2,
        FLOAT = 3,
        BOOL = 4,
        LIST = 5,
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class AnyDataType : pb::GeneratedMessage<AnyDataType, AnyDataType.Builder> {
        private AnyDataType() { }
        private static readonly AnyDataType defaultInstance = new AnyDataType().MakeReadOnly();
        private static readonly string[] _anyDataTypeFieldNames = new string[] { "bool_data", "float_data", "int_data", "list_data", "string_data" };
        private static readonly uint[] _anyDataTypeFieldTags = new uint[] { 40, 33, 24, 50, 18 };
        public static AnyDataType DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override AnyDataType DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override AnyDataType ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_AnyDataType__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<AnyDataType, AnyDataType.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_AnyDataType__FieldAccessorTable; }
        }
        
        public const int StringDataFieldNumber = 2;
        private bool hasStringData;
        private string stringData_ = "";
        public bool HasStringData {
          get { return hasStringData; }
        }
        public string StringData {
          get { return stringData_; }
        }
        
        public const int IntDataFieldNumber = 3;
        private bool hasIntData;
        private long intData_;
        public bool HasIntData {
          get { return hasIntData; }
        }
        public long IntData {
          get { return intData_; }
        }
        
        public const int FloatDataFieldNumber = 4;
        private bool hasFloatData;
        private double floatData_;
        public bool HasFloatData {
          get { return hasFloatData; }
        }
        public double FloatData {
          get { return floatData_; }
        }
        
        public const int BoolDataFieldNumber = 5;
        private bool hasBoolData;
        private bool boolData_;
        public bool HasBoolData {
          get { return hasBoolData; }
        }
        public bool BoolData {
          get { return boolData_; }
        }
        
        public const int ListDataFieldNumber = 6;
        private pbc::PopsicleList<string> listData_ = new pbc::PopsicleList<string>();
        public scg::IList<string> ListDataList {
          get { return pbc::Lists.AsReadOnly(listData_); }
        }
        public int ListDataCount {
          get { return listData_.Count; }
        }
        public string GetListData(int index) {
          return listData_[index];
        }
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _anyDataTypeFieldNames;
          if (hasStringData) {
            output.WriteString(2, field_names[4], StringData);
          }
          if (hasIntData) {
            output.WriteInt64(3, field_names[2], IntData);
          }
          if (hasFloatData) {
            output.WriteDouble(4, field_names[1], FloatData);
          }
          if (hasBoolData) {
            output.WriteBool(5, field_names[0], BoolData);
          }
          if (listData_.Count > 0) {
            output.WriteStringArray(6, field_names[3], listData_);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasStringData) {
              size += pb::CodedOutputStream.ComputeStringSize(2, StringData);
            }
            if (hasIntData) {
              size += pb::CodedOutputStream.ComputeInt64Size(3, IntData);
            }
            if (hasFloatData) {
              size += pb::CodedOutputStream.ComputeDoubleSize(4, FloatData);
            }
            if (hasBoolData) {
              size += pb::CodedOutputStream.ComputeBoolSize(5, BoolData);
            }
            {
              int dataSize = 0;
              foreach (string element in ListDataList) {
                dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
              }
              size += dataSize;
              size += 1 * listData_.Count;
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static AnyDataType ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AnyDataType ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AnyDataType ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AnyDataType ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AnyDataType ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AnyDataType ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static AnyDataType ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static AnyDataType ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static AnyDataType ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AnyDataType ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private AnyDataType MakeReadOnly() {
          listData_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(AnyDataType prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<AnyDataType, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(AnyDataType cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private AnyDataType result;
          
          private AnyDataType PrepareBuilder() {
            if (resultIsReadOnly) {
              AnyDataType original = result;
              result = new AnyDataType();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override AnyDataType MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.Common.Types.AnyDataType.Descriptor; }
          }
          
          public override AnyDataType DefaultInstanceForType {
            get { return global::Plugin.Common.Types.AnyDataType.DefaultInstance; }
          }
          
          public override AnyDataType BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is AnyDataType) {
              return MergeFrom((AnyDataType) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(AnyDataType other) {
            if (other == global::Plugin.Common.Types.AnyDataType.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasStringData) {
              StringData = other.StringData;
            }
            if (other.HasIntData) {
              IntData = other.IntData;
            }
            if (other.HasFloatData) {
              FloatData = other.FloatData;
            }
            if (other.HasBoolData) {
              BoolData = other.BoolData;
            }
            if (other.listData_.Count != 0) {
              result.listData_.Add(other.listData_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_anyDataTypeFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _anyDataTypeFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 18: {
                  result.hasStringData = input.ReadString(ref result.stringData_);
                  break;
                }
                case 24: {
                  result.hasIntData = input.ReadInt64(ref result.intData_);
                  break;
                }
                case 33: {
                  result.hasFloatData = input.ReadDouble(ref result.floatData_);
                  break;
                }
                case 40: {
                  result.hasBoolData = input.ReadBool(ref result.boolData_);
                  break;
                }
                case 50: {
                  input.ReadStringArray(tag, field_name, result.listData_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasStringData {
            get { return result.hasStringData; }
          }
          public string StringData {
            get { return result.StringData; }
            set { SetStringData(value); }
          }
          public Builder SetStringData(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasStringData = true;
            result.stringData_ = value;
            return this;
          }
          public Builder ClearStringData() {
            PrepareBuilder();
            result.hasStringData = false;
            result.stringData_ = "";
            return this;
          }
          
          public bool HasIntData {
            get { return result.hasIntData; }
          }
          public long IntData {
            get { return result.IntData; }
            set { SetIntData(value); }
          }
          public Builder SetIntData(long value) {
            PrepareBuilder();
            result.hasIntData = true;
            result.intData_ = value;
            return this;
          }
          public Builder ClearIntData() {
            PrepareBuilder();
            result.hasIntData = false;
            result.intData_ = 0L;
            return this;
          }
          
          public bool HasFloatData {
            get { return result.hasFloatData; }
          }
          public double FloatData {
            get { return result.FloatData; }
            set { SetFloatData(value); }
          }
          public Builder SetFloatData(double value) {
            PrepareBuilder();
            result.hasFloatData = true;
            result.floatData_ = value;
            return this;
          }
          public Builder ClearFloatData() {
            PrepareBuilder();
            result.hasFloatData = false;
            result.floatData_ = 0D;
            return this;
          }
          
          public bool HasBoolData {
            get { return result.hasBoolData; }
          }
          public bool BoolData {
            get { return result.BoolData; }
            set { SetBoolData(value); }
          }
          public Builder SetBoolData(bool value) {
            PrepareBuilder();
            result.hasBoolData = true;
            result.boolData_ = value;
            return this;
          }
          public Builder ClearBoolData() {
            PrepareBuilder();
            result.hasBoolData = false;
            result.boolData_ = false;
            return this;
          }
          
          public pbc::IPopsicleList<string> ListDataList {
            get { return PrepareBuilder().listData_; }
          }
          public int ListDataCount {
            get { return result.ListDataCount; }
          }
          public string GetListData(int index) {
            return result.GetListData(index);
          }
          public Builder SetListData(int index, string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.listData_[index] = value;
            return this;
          }
          public Builder AddListData(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.listData_.Add(value);
            return this;
          }
          public Builder AddRangeListData(scg::IEnumerable<string> values) {
            PrepareBuilder();
            result.listData_.Add(values);
            return this;
          }
          public Builder ClearListData() {
            PrepareBuilder();
            result.listData_.Clear();
            return this;
          }
        }
        static AnyDataType() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class KeyValue : pb::GeneratedMessage<KeyValue, KeyValue.Builder> {
        private KeyValue() { }
        private static readonly KeyValue defaultInstance = new KeyValue().MakeReadOnly();
        private static readonly string[] _keyValueFieldNames = new string[] { "key", "value" };
        private static readonly uint[] _keyValueFieldTags = new uint[] { 10, 18 };
        public static KeyValue DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override KeyValue DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override KeyValue ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_KeyValue__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<KeyValue, KeyValue.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_KeyValue__FieldAccessorTable; }
        }
        
        public const int KeyFieldNumber = 1;
        private bool hasKey;
        private string key_ = "";
        public bool HasKey {
          get { return hasKey; }
        }
        public string Key {
          get { return key_; }
        }
        
        public const int ValueFieldNumber = 2;
        private bool hasValue;
        private string value_ = "";
        public bool HasValue {
          get { return hasValue; }
        }
        public string Value {
          get { return value_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasKey) return false;
            if (!hasValue) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _keyValueFieldNames;
          if (hasKey) {
            output.WriteString(1, field_names[0], Key);
          }
          if (hasValue) {
            output.WriteString(2, field_names[1], Value);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasKey) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Key);
            }
            if (hasValue) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Value);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static KeyValue ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static KeyValue ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static KeyValue ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static KeyValue ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static KeyValue ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static KeyValue ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static KeyValue ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static KeyValue ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static KeyValue ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static KeyValue ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private KeyValue MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(KeyValue prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<KeyValue, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(KeyValue cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private KeyValue result;
          
          private KeyValue PrepareBuilder() {
            if (resultIsReadOnly) {
              KeyValue original = result;
              result = new KeyValue();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override KeyValue MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.Common.Types.KeyValue.Descriptor; }
          }
          
          public override KeyValue DefaultInstanceForType {
            get { return global::Plugin.Common.Types.KeyValue.DefaultInstance; }
          }
          
          public override KeyValue BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is KeyValue) {
              return MergeFrom((KeyValue) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(KeyValue other) {
            if (other == global::Plugin.Common.Types.KeyValue.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasKey) {
              Key = other.Key;
            }
            if (other.HasValue) {
              Value = other.Value;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_keyValueFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _keyValueFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasKey = input.ReadString(ref result.key_);
                  break;
                }
                case 18: {
                  result.hasValue = input.ReadString(ref result.value_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasKey {
            get { return result.hasKey; }
          }
          public string Key {
            get { return result.Key; }
            set { SetKey(value); }
          }
          public Builder SetKey(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasKey = true;
            result.key_ = value;
            return this;
          }
          public Builder ClearKey() {
            PrepareBuilder();
            result.hasKey = false;
            result.key_ = "";
            return this;
          }
          
          public bool HasValue {
            get { return result.hasValue; }
          }
          public string Value {
            get { return result.Value; }
            set { SetValue(value); }
          }
          public Builder SetValue(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasValue = true;
            result.value_ = value;
            return this;
          }
          public Builder ClearValue() {
            PrepareBuilder();
            result.hasValue = false;
            result.value_ = "";
            return this;
          }
        }
        static KeyValue() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Host : pb::GeneratedMessage<Host, Host.Builder> {
        private Host() { }
        private static readonly Host defaultInstance = new Host().MakeReadOnly();
        private static readonly string[] _hostFieldNames = new string[] { "address", "comment", "host", "id", "metadata", "protocol", "tags" };
        private static readonly uint[] _hostFieldTags = new uint[] { 26, 42, 18, 10, 50, 34, 58 };
        public static Host DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Host DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Host ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_Host__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Host, Host.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_Host__FieldAccessorTable; }
        }
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private string id_ = "";
        public bool HasId {
          get { return hasId; }
        }
        public string Id {
          get { return id_; }
        }
        
        public const int Host_FieldNumber = 2;
        private bool hasHost_;
        private string host_ = "";
        public bool HasHost_ {
          get { return hasHost_; }
        }
        public string Host_ {
          get { return host_; }
        }
        
        public const int AddressFieldNumber = 3;
        private bool hasAddress;
        private string address_ = "";
        public bool HasAddress {
          get { return hasAddress; }
        }
        public string Address {
          get { return address_; }
        }
        
        public const int ProtocolFieldNumber = 4;
        private bool hasProtocol;
        private string protocol_ = "";
        public bool HasProtocol {
          get { return hasProtocol; }
        }
        public string Protocol {
          get { return protocol_; }
        }
        
        public const int CommentFieldNumber = 5;
        private bool hasComment;
        private string comment_ = "";
        public bool HasComment {
          get { return hasComment; }
        }
        public string Comment {
          get { return comment_; }
        }
        
        public const int MetadataFieldNumber = 6;
        private pbc::PopsicleList<global::Plugin.Common.Types.KeyValue> metadata_ = new pbc::PopsicleList<global::Plugin.Common.Types.KeyValue>();
        public scg::IList<global::Plugin.Common.Types.KeyValue> MetadataList {
          get { return metadata_; }
        }
        public int MetadataCount {
          get { return metadata_.Count; }
        }
        public global::Plugin.Common.Types.KeyValue GetMetadata(int index) {
          return metadata_[index];
        }
        
        public const int TagsFieldNumber = 7;
        private pbc::PopsicleList<string> tags_ = new pbc::PopsicleList<string>();
        public scg::IList<string> TagsList {
          get { return pbc::Lists.AsReadOnly(tags_); }
        }
        public int TagsCount {
          get { return tags_.Count; }
        }
        public string GetTags(int index) {
          return tags_[index];
        }
        
        public override bool IsInitialized {
          get {
            foreach (global::Plugin.Common.Types.KeyValue element in MetadataList) {
              if (!element.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _hostFieldNames;
          if (hasId) {
            output.WriteString(1, field_names[3], Id);
          }
          if (hasHost_) {
            output.WriteString(2, field_names[2], Host_);
          }
          if (hasAddress) {
            output.WriteString(3, field_names[0], Address);
          }
          if (hasProtocol) {
            output.WriteString(4, field_names[5], Protocol);
          }
          if (hasComment) {
            output.WriteString(5, field_names[1], Comment);
          }
          if (metadata_.Count > 0) {
            output.WriteMessageArray(6, field_names[4], metadata_);
          }
          if (tags_.Count > 0) {
            output.WriteStringArray(7, field_names[6], tags_);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasId) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Id);
            }
            if (hasHost_) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Host_);
            }
            if (hasAddress) {
              size += pb::CodedOutputStream.ComputeStringSize(3, Address);
            }
            if (hasProtocol) {
              size += pb::CodedOutputStream.ComputeStringSize(4, Protocol);
            }
            if (hasComment) {
              size += pb::CodedOutputStream.ComputeStringSize(5, Comment);
            }
            foreach (global::Plugin.Common.Types.KeyValue element in MetadataList) {
              size += pb::CodedOutputStream.ComputeMessageSize(6, element);
            }
            {
              int dataSize = 0;
              foreach (string element in TagsList) {
                dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
              }
              size += dataSize;
              size += 1 * tags_.Count;
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Host ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Host ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Host ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Host ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Host ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Host ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Host ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Host ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Host ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Host ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Host MakeReadOnly() {
          metadata_.MakeReadOnly();
          tags_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Host prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Host, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Host cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Host result;
          
          private Host PrepareBuilder() {
            if (resultIsReadOnly) {
              Host original = result;
              result = new Host();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Host MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.Common.Types.Host.Descriptor; }
          }
          
          public override Host DefaultInstanceForType {
            get { return global::Plugin.Common.Types.Host.DefaultInstance; }
          }
          
          public override Host BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Host) {
              return MergeFrom((Host) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Host other) {
            if (other == global::Plugin.Common.Types.Host.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasHost_) {
              Host_ = other.Host_;
            }
            if (other.HasAddress) {
              Address = other.Address;
            }
            if (other.HasProtocol) {
              Protocol = other.Protocol;
            }
            if (other.HasComment) {
              Comment = other.Comment;
            }
            if (other.metadata_.Count != 0) {
              result.metadata_.Add(other.metadata_);
            }
            if (other.tags_.Count != 0) {
              result.tags_.Add(other.tags_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_hostFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _hostFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasId = input.ReadString(ref result.id_);
                  break;
                }
                case 18: {
                  result.hasHost_ = input.ReadString(ref result.host_);
                  break;
                }
                case 26: {
                  result.hasAddress = input.ReadString(ref result.address_);
                  break;
                }
                case 34: {
                  result.hasProtocol = input.ReadString(ref result.protocol_);
                  break;
                }
                case 42: {
                  result.hasComment = input.ReadString(ref result.comment_);
                  break;
                }
                case 50: {
                  input.ReadMessageArray(tag, field_name, result.metadata_, global::Plugin.Common.Types.KeyValue.DefaultInstance, extensionRegistry);
                  break;
                }
                case 58: {
                  input.ReadStringArray(tag, field_name, result.tags_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public string Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = "";
            return this;
          }
          
          public bool HasHost_ {
            get { return result.hasHost_; }
          }
          public string Host_ {
            get { return result.Host_; }
            set { SetHost_(value); }
          }
          public Builder SetHost_(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasHost_ = true;
            result.host_ = value;
            return this;
          }
          public Builder ClearHost_() {
            PrepareBuilder();
            result.hasHost_ = false;
            result.host_ = "";
            return this;
          }
          
          public bool HasAddress {
            get { return result.hasAddress; }
          }
          public string Address {
            get { return result.Address; }
            set { SetAddress(value); }
          }
          public Builder SetAddress(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasAddress = true;
            result.address_ = value;
            return this;
          }
          public Builder ClearAddress() {
            PrepareBuilder();
            result.hasAddress = false;
            result.address_ = "";
            return this;
          }
          
          public bool HasProtocol {
            get { return result.hasProtocol; }
          }
          public string Protocol {
            get { return result.Protocol; }
            set { SetProtocol(value); }
          }
          public Builder SetProtocol(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasProtocol = true;
            result.protocol_ = value;
            return this;
          }
          public Builder ClearProtocol() {
            PrepareBuilder();
            result.hasProtocol = false;
            result.protocol_ = "";
            return this;
          }
          
          public bool HasComment {
            get { return result.hasComment; }
          }
          public string Comment {
            get { return result.Comment; }
            set { SetComment(value); }
          }
          public Builder SetComment(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasComment = true;
            result.comment_ = value;
            return this;
          }
          public Builder ClearComment() {
            PrepareBuilder();
            result.hasComment = false;
            result.comment_ = "";
            return this;
          }
          
          public pbc::IPopsicleList<global::Plugin.Common.Types.KeyValue> MetadataList {
            get { return PrepareBuilder().metadata_; }
          }
          public int MetadataCount {
            get { return result.MetadataCount; }
          }
          public global::Plugin.Common.Types.KeyValue GetMetadata(int index) {
            return result.GetMetadata(index);
          }
          public Builder SetMetadata(int index, global::Plugin.Common.Types.KeyValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.metadata_[index] = value;
            return this;
          }
          public Builder SetMetadata(int index, global::Plugin.Common.Types.KeyValue.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.metadata_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddMetadata(global::Plugin.Common.Types.KeyValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.metadata_.Add(value);
            return this;
          }
          public Builder AddMetadata(global::Plugin.Common.Types.KeyValue.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.metadata_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeMetadata(scg::IEnumerable<global::Plugin.Common.Types.KeyValue> values) {
            PrepareBuilder();
            result.metadata_.Add(values);
            return this;
          }
          public Builder ClearMetadata() {
            PrepareBuilder();
            result.metadata_.Clear();
            return this;
          }
          
          public pbc::IPopsicleList<string> TagsList {
            get { return PrepareBuilder().tags_; }
          }
          public int TagsCount {
            get { return result.TagsCount; }
          }
          public string GetTags(int index) {
            return result.GetTags(index);
          }
          public Builder SetTags(int index, string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.tags_[index] = value;
            return this;
          }
          public Builder AddTags(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.tags_.Add(value);
            return this;
          }
          public Builder AddRangeTags(scg::IEnumerable<string> values) {
            PrepareBuilder();
            result.tags_.Add(values);
            return this;
          }
          public Builder ClearTags() {
            PrepareBuilder();
            result.tags_.Clear();
            return this;
          }
        }
        static Host() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Header : pb::GeneratedMessage<Header, Header.Builder> {
        private Header() { }
        private static readonly Header defaultInstance = new Header().MakeReadOnly();
        private static readonly string[] _headerFieldNames = new string[] { "destination_id", "hosts", "message_id", "metadata", "recipient_id", "sender_id", "source_id", "tags" };
        private static readonly uint[] _headerFieldTags = new uint[] { 50, 82, 130, 66, 42, 34, 26, 74 };
        public static Header DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Header DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Header ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_Header__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Header, Header.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_Header__FieldAccessorTable; }
        }
        
        public const int SourceIdFieldNumber = 3;
        private bool hasSourceId;
        private string sourceId_ = "";
        public bool HasSourceId {
          get { return hasSourceId; }
        }
        public string SourceId {
          get { return sourceId_; }
        }
        
        public const int SenderIdFieldNumber = 4;
        private bool hasSenderId;
        private string senderId_ = "";
        public bool HasSenderId {
          get { return hasSenderId; }
        }
        public string SenderId {
          get { return senderId_; }
        }
        
        public const int RecipientIdFieldNumber = 5;
        private bool hasRecipientId;
        private string recipientId_ = "";
        public bool HasRecipientId {
          get { return hasRecipientId; }
        }
        public string RecipientId {
          get { return recipientId_; }
        }
        
        public const int DestinationIdFieldNumber = 6;
        private bool hasDestinationId;
        private string destinationId_ = "";
        public bool HasDestinationId {
          get { return hasDestinationId; }
        }
        public string DestinationId {
          get { return destinationId_; }
        }
        
        public const int MessageIdFieldNumber = 16;
        private bool hasMessageId;
        private string messageId_ = "";
        public bool HasMessageId {
          get { return hasMessageId; }
        }
        public string MessageId {
          get { return messageId_; }
        }
        
        public const int MetadataFieldNumber = 8;
        private pbc::PopsicleList<global::Plugin.Common.Types.KeyValue> metadata_ = new pbc::PopsicleList<global::Plugin.Common.Types.KeyValue>();
        public scg::IList<global::Plugin.Common.Types.KeyValue> MetadataList {
          get { return metadata_; }
        }
        public int MetadataCount {
          get { return metadata_.Count; }
        }
        public global::Plugin.Common.Types.KeyValue GetMetadata(int index) {
          return metadata_[index];
        }
        
        public const int TagsFieldNumber = 9;
        private pbc::PopsicleList<string> tags_ = new pbc::PopsicleList<string>();
        public scg::IList<string> TagsList {
          get { return pbc::Lists.AsReadOnly(tags_); }
        }
        public int TagsCount {
          get { return tags_.Count; }
        }
        public string GetTags(int index) {
          return tags_[index];
        }
        
        public const int HostsFieldNumber = 10;
        private pbc::PopsicleList<global::Plugin.Common.Types.Host> hosts_ = new pbc::PopsicleList<global::Plugin.Common.Types.Host>();
        public scg::IList<global::Plugin.Common.Types.Host> HostsList {
          get { return hosts_; }
        }
        public int HostsCount {
          get { return hosts_.Count; }
        }
        public global::Plugin.Common.Types.Host GetHosts(int index) {
          return hosts_[index];
        }
        
        public override bool IsInitialized {
          get {
            foreach (global::Plugin.Common.Types.KeyValue element in MetadataList) {
              if (!element.IsInitialized) return false;
            }
            foreach (global::Plugin.Common.Types.Host element in HostsList) {
              if (!element.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _headerFieldNames;
          if (hasSourceId) {
            output.WriteString(3, field_names[6], SourceId);
          }
          if (hasSenderId) {
            output.WriteString(4, field_names[5], SenderId);
          }
          if (hasRecipientId) {
            output.WriteString(5, field_names[4], RecipientId);
          }
          if (hasDestinationId) {
            output.WriteString(6, field_names[0], DestinationId);
          }
          if (metadata_.Count > 0) {
            output.WriteMessageArray(8, field_names[3], metadata_);
          }
          if (tags_.Count > 0) {
            output.WriteStringArray(9, field_names[7], tags_);
          }
          if (hosts_.Count > 0) {
            output.WriteMessageArray(10, field_names[1], hosts_);
          }
          if (hasMessageId) {
            output.WriteString(16, field_names[2], MessageId);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasSourceId) {
              size += pb::CodedOutputStream.ComputeStringSize(3, SourceId);
            }
            if (hasSenderId) {
              size += pb::CodedOutputStream.ComputeStringSize(4, SenderId);
            }
            if (hasRecipientId) {
              size += pb::CodedOutputStream.ComputeStringSize(5, RecipientId);
            }
            if (hasDestinationId) {
              size += pb::CodedOutputStream.ComputeStringSize(6, DestinationId);
            }
            if (hasMessageId) {
              size += pb::CodedOutputStream.ComputeStringSize(16, MessageId);
            }
            foreach (global::Plugin.Common.Types.KeyValue element in MetadataList) {
              size += pb::CodedOutputStream.ComputeMessageSize(8, element);
            }
            {
              int dataSize = 0;
              foreach (string element in TagsList) {
                dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
              }
              size += dataSize;
              size += 1 * tags_.Count;
            }
            foreach (global::Plugin.Common.Types.Host element in HostsList) {
              size += pb::CodedOutputStream.ComputeMessageSize(10, element);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Header ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Header ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Header ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Header ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Header ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Header ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Header ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Header ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Header ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Header ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Header MakeReadOnly() {
          metadata_.MakeReadOnly();
          tags_.MakeReadOnly();
          hosts_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Header prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Header, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Header cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Header result;
          
          private Header PrepareBuilder() {
            if (resultIsReadOnly) {
              Header original = result;
              result = new Header();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Header MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.Common.Types.Header.Descriptor; }
          }
          
          public override Header DefaultInstanceForType {
            get { return global::Plugin.Common.Types.Header.DefaultInstance; }
          }
          
          public override Header BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Header) {
              return MergeFrom((Header) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Header other) {
            if (other == global::Plugin.Common.Types.Header.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasSourceId) {
              SourceId = other.SourceId;
            }
            if (other.HasSenderId) {
              SenderId = other.SenderId;
            }
            if (other.HasRecipientId) {
              RecipientId = other.RecipientId;
            }
            if (other.HasDestinationId) {
              DestinationId = other.DestinationId;
            }
            if (other.HasMessageId) {
              MessageId = other.MessageId;
            }
            if (other.metadata_.Count != 0) {
              result.metadata_.Add(other.metadata_);
            }
            if (other.tags_.Count != 0) {
              result.tags_.Add(other.tags_);
            }
            if (other.hosts_.Count != 0) {
              result.hosts_.Add(other.hosts_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_headerFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _headerFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 26: {
                  result.hasSourceId = input.ReadString(ref result.sourceId_);
                  break;
                }
                case 34: {
                  result.hasSenderId = input.ReadString(ref result.senderId_);
                  break;
                }
                case 42: {
                  result.hasRecipientId = input.ReadString(ref result.recipientId_);
                  break;
                }
                case 50: {
                  result.hasDestinationId = input.ReadString(ref result.destinationId_);
                  break;
                }
                case 66: {
                  input.ReadMessageArray(tag, field_name, result.metadata_, global::Plugin.Common.Types.KeyValue.DefaultInstance, extensionRegistry);
                  break;
                }
                case 74: {
                  input.ReadStringArray(tag, field_name, result.tags_);
                  break;
                }
                case 82: {
                  input.ReadMessageArray(tag, field_name, result.hosts_, global::Plugin.Common.Types.Host.DefaultInstance, extensionRegistry);
                  break;
                }
                case 130: {
                  result.hasMessageId = input.ReadString(ref result.messageId_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasSourceId {
            get { return result.hasSourceId; }
          }
          public string SourceId {
            get { return result.SourceId; }
            set { SetSourceId(value); }
          }
          public Builder SetSourceId(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasSourceId = true;
            result.sourceId_ = value;
            return this;
          }
          public Builder ClearSourceId() {
            PrepareBuilder();
            result.hasSourceId = false;
            result.sourceId_ = "";
            return this;
          }
          
          public bool HasSenderId {
            get { return result.hasSenderId; }
          }
          public string SenderId {
            get { return result.SenderId; }
            set { SetSenderId(value); }
          }
          public Builder SetSenderId(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasSenderId = true;
            result.senderId_ = value;
            return this;
          }
          public Builder ClearSenderId() {
            PrepareBuilder();
            result.hasSenderId = false;
            result.senderId_ = "";
            return this;
          }
          
          public bool HasRecipientId {
            get { return result.hasRecipientId; }
          }
          public string RecipientId {
            get { return result.RecipientId; }
            set { SetRecipientId(value); }
          }
          public Builder SetRecipientId(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasRecipientId = true;
            result.recipientId_ = value;
            return this;
          }
          public Builder ClearRecipientId() {
            PrepareBuilder();
            result.hasRecipientId = false;
            result.recipientId_ = "";
            return this;
          }
          
          public bool HasDestinationId {
            get { return result.hasDestinationId; }
          }
          public string DestinationId {
            get { return result.DestinationId; }
            set { SetDestinationId(value); }
          }
          public Builder SetDestinationId(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasDestinationId = true;
            result.destinationId_ = value;
            return this;
          }
          public Builder ClearDestinationId() {
            PrepareBuilder();
            result.hasDestinationId = false;
            result.destinationId_ = "";
            return this;
          }
          
          public bool HasMessageId {
            get { return result.hasMessageId; }
          }
          public string MessageId {
            get { return result.MessageId; }
            set { SetMessageId(value); }
          }
          public Builder SetMessageId(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasMessageId = true;
            result.messageId_ = value;
            return this;
          }
          public Builder ClearMessageId() {
            PrepareBuilder();
            result.hasMessageId = false;
            result.messageId_ = "";
            return this;
          }
          
          public pbc::IPopsicleList<global::Plugin.Common.Types.KeyValue> MetadataList {
            get { return PrepareBuilder().metadata_; }
          }
          public int MetadataCount {
            get { return result.MetadataCount; }
          }
          public global::Plugin.Common.Types.KeyValue GetMetadata(int index) {
            return result.GetMetadata(index);
          }
          public Builder SetMetadata(int index, global::Plugin.Common.Types.KeyValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.metadata_[index] = value;
            return this;
          }
          public Builder SetMetadata(int index, global::Plugin.Common.Types.KeyValue.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.metadata_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddMetadata(global::Plugin.Common.Types.KeyValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.metadata_.Add(value);
            return this;
          }
          public Builder AddMetadata(global::Plugin.Common.Types.KeyValue.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.metadata_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeMetadata(scg::IEnumerable<global::Plugin.Common.Types.KeyValue> values) {
            PrepareBuilder();
            result.metadata_.Add(values);
            return this;
          }
          public Builder ClearMetadata() {
            PrepareBuilder();
            result.metadata_.Clear();
            return this;
          }
          
          public pbc::IPopsicleList<string> TagsList {
            get { return PrepareBuilder().tags_; }
          }
          public int TagsCount {
            get { return result.TagsCount; }
          }
          public string GetTags(int index) {
            return result.GetTags(index);
          }
          public Builder SetTags(int index, string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.tags_[index] = value;
            return this;
          }
          public Builder AddTags(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.tags_.Add(value);
            return this;
          }
          public Builder AddRangeTags(scg::IEnumerable<string> values) {
            PrepareBuilder();
            result.tags_.Add(values);
            return this;
          }
          public Builder ClearTags() {
            PrepareBuilder();
            result.tags_.Clear();
            return this;
          }
          
          public pbc::IPopsicleList<global::Plugin.Common.Types.Host> HostsList {
            get { return PrepareBuilder().hosts_; }
          }
          public int HostsCount {
            get { return result.HostsCount; }
          }
          public global::Plugin.Common.Types.Host GetHosts(int index) {
            return result.GetHosts(index);
          }
          public Builder SetHosts(int index, global::Plugin.Common.Types.Host value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hosts_[index] = value;
            return this;
          }
          public Builder SetHosts(int index, global::Plugin.Common.Types.Host.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hosts_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddHosts(global::Plugin.Common.Types.Host value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hosts_.Add(value);
            return this;
          }
          public Builder AddHosts(global::Plugin.Common.Types.Host.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hosts_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeHosts(scg::IEnumerable<global::Plugin.Common.Types.Host> values) {
            PrepareBuilder();
            result.hosts_.Add(values);
            return this;
          }
          public Builder ClearHosts() {
            PrepareBuilder();
            result.hosts_.Clear();
            return this;
          }
        }
        static Header() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Attachment : pb::GeneratedMessage<Attachment, Attachment.Builder> {
        private Attachment() { }
        private static readonly Attachment defaultInstance = new Attachment().MakeReadOnly();
        private static readonly string[] _attachmentFieldNames = new string[] { "data", "id", "metadata", "tags", "type" };
        private static readonly uint[] _attachmentFieldTags = new uint[] { 42, 8, 26, 34, 18 };
        public static Attachment DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Attachment DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Attachment ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_Attachment__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Attachment, Attachment.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_Attachment__FieldAccessorTable; }
        }
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private long id_;
        public bool HasId {
          get { return hasId; }
        }
        public long Id {
          get { return id_; }
        }
        
        public const int TypeFieldNumber = 2;
        private bool hasType;
        private string type_ = "";
        public bool HasType {
          get { return hasType; }
        }
        public string Type {
          get { return type_; }
        }
        
        public const int MetadataFieldNumber = 3;
        private pbc::PopsicleList<global::Plugin.Common.Types.KeyValue> metadata_ = new pbc::PopsicleList<global::Plugin.Common.Types.KeyValue>();
        public scg::IList<global::Plugin.Common.Types.KeyValue> MetadataList {
          get { return metadata_; }
        }
        public int MetadataCount {
          get { return metadata_.Count; }
        }
        public global::Plugin.Common.Types.KeyValue GetMetadata(int index) {
          return metadata_[index];
        }
        
        public const int TagsFieldNumber = 4;
        private pbc::PopsicleList<string> tags_ = new pbc::PopsicleList<string>();
        public scg::IList<string> TagsList {
          get { return pbc::Lists.AsReadOnly(tags_); }
        }
        public int TagsCount {
          get { return tags_.Count; }
        }
        public string GetTags(int index) {
          return tags_[index];
        }
        
        public const int DataFieldNumber = 5;
        private bool hasData;
        private string data_ = "";
        public bool HasData {
          get { return hasData; }
        }
        public string Data {
          get { return data_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasType) return false;
            if (!hasData) return false;
            foreach (global::Plugin.Common.Types.KeyValue element in MetadataList) {
              if (!element.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _attachmentFieldNames;
          if (hasId) {
            output.WriteInt64(1, field_names[1], Id);
          }
          if (hasType) {
            output.WriteString(2, field_names[4], Type);
          }
          if (metadata_.Count > 0) {
            output.WriteMessageArray(3, field_names[2], metadata_);
          }
          if (tags_.Count > 0) {
            output.WriteStringArray(4, field_names[3], tags_);
          }
          if (hasData) {
            output.WriteString(5, field_names[0], Data);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasId) {
              size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
            }
            if (hasType) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Type);
            }
            foreach (global::Plugin.Common.Types.KeyValue element in MetadataList) {
              size += pb::CodedOutputStream.ComputeMessageSize(3, element);
            }
            {
              int dataSize = 0;
              foreach (string element in TagsList) {
                dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
              }
              size += dataSize;
              size += 1 * tags_.Count;
            }
            if (hasData) {
              size += pb::CodedOutputStream.ComputeStringSize(5, Data);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Attachment ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Attachment ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Attachment ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Attachment ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Attachment ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Attachment ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Attachment ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Attachment ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Attachment ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Attachment ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Attachment MakeReadOnly() {
          metadata_.MakeReadOnly();
          tags_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Attachment prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Attachment, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Attachment cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Attachment result;
          
          private Attachment PrepareBuilder() {
            if (resultIsReadOnly) {
              Attachment original = result;
              result = new Attachment();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Attachment MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.Common.Types.Attachment.Descriptor; }
          }
          
          public override Attachment DefaultInstanceForType {
            get { return global::Plugin.Common.Types.Attachment.DefaultInstance; }
          }
          
          public override Attachment BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Attachment) {
              return MergeFrom((Attachment) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Attachment other) {
            if (other == global::Plugin.Common.Types.Attachment.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasType) {
              Type = other.Type;
            }
            if (other.metadata_.Count != 0) {
              result.metadata_.Add(other.metadata_);
            }
            if (other.tags_.Count != 0) {
              result.tags_.Add(other.tags_);
            }
            if (other.HasData) {
              Data = other.Data;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_attachmentFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _attachmentFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasId = input.ReadInt64(ref result.id_);
                  break;
                }
                case 18: {
                  result.hasType = input.ReadString(ref result.type_);
                  break;
                }
                case 26: {
                  input.ReadMessageArray(tag, field_name, result.metadata_, global::Plugin.Common.Types.KeyValue.DefaultInstance, extensionRegistry);
                  break;
                }
                case 34: {
                  input.ReadStringArray(tag, field_name, result.tags_);
                  break;
                }
                case 42: {
                  result.hasData = input.ReadString(ref result.data_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public long Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(long value) {
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = 0L;
            return this;
          }
          
          public bool HasType {
            get { return result.hasType; }
          }
          public string Type {
            get { return result.Type; }
            set { SetType(value); }
          }
          public Builder SetType(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasType = true;
            result.type_ = value;
            return this;
          }
          public Builder ClearType() {
            PrepareBuilder();
            result.hasType = false;
            result.type_ = "";
            return this;
          }
          
          public pbc::IPopsicleList<global::Plugin.Common.Types.KeyValue> MetadataList {
            get { return PrepareBuilder().metadata_; }
          }
          public int MetadataCount {
            get { return result.MetadataCount; }
          }
          public global::Plugin.Common.Types.KeyValue GetMetadata(int index) {
            return result.GetMetadata(index);
          }
          public Builder SetMetadata(int index, global::Plugin.Common.Types.KeyValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.metadata_[index] = value;
            return this;
          }
          public Builder SetMetadata(int index, global::Plugin.Common.Types.KeyValue.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.metadata_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddMetadata(global::Plugin.Common.Types.KeyValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.metadata_.Add(value);
            return this;
          }
          public Builder AddMetadata(global::Plugin.Common.Types.KeyValue.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.metadata_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeMetadata(scg::IEnumerable<global::Plugin.Common.Types.KeyValue> values) {
            PrepareBuilder();
            result.metadata_.Add(values);
            return this;
          }
          public Builder ClearMetadata() {
            PrepareBuilder();
            result.metadata_.Clear();
            return this;
          }
          
          public pbc::IPopsicleList<string> TagsList {
            get { return PrepareBuilder().tags_; }
          }
          public int TagsCount {
            get { return result.TagsCount; }
          }
          public string GetTags(int index) {
            return result.GetTags(index);
          }
          public Builder SetTags(int index, string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.tags_[index] = value;
            return this;
          }
          public Builder AddTags(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.tags_.Add(value);
            return this;
          }
          public Builder AddRangeTags(scg::IEnumerable<string> values) {
            PrepareBuilder();
            result.tags_.Add(values);
            return this;
          }
          public Builder ClearTags() {
            PrepareBuilder();
            result.tags_.Clear();
            return this;
          }
          
          public bool HasData {
            get { return result.hasData; }
          }
          public string Data {
            get { return result.Data; }
            set { SetData(value); }
          }
          public Builder SetData(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasData = true;
            result.data_ = value;
            return this;
          }
          public Builder ClearData() {
            PrepareBuilder();
            result.hasData = false;
            result.data_ = "";
            return this;
          }
        }
        static Attachment() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class PerformanceData : pb::GeneratedMessage<PerformanceData, PerformanceData.Builder> {
        private PerformanceData() { }
        private static readonly PerformanceData defaultInstance = new PerformanceData().MakeReadOnly();
        private static readonly string[] _performanceDataFieldNames = new string[] { "alias", "bool_value", "float_value", "int_value", "string_value" };
        private static readonly uint[] _performanceDataFieldTags = new uint[] { 10, 50, 42, 26, 34 };
        public static PerformanceData DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override PerformanceData DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override PerformanceData ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_PerformanceData__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<PerformanceData, PerformanceData.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_PerformanceData__FieldAccessorTable; }
        }
        
        #region Nested types
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static partial class Types {
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class IntValue : pb::GeneratedMessage<IntValue, IntValue.Builder> {
            private IntValue() { }
            private static readonly IntValue defaultInstance = new IntValue().MakeReadOnly();
            private static readonly string[] _intValueFieldNames = new string[] { "critical", "maximum", "minimum", "unit", "value", "warning" };
            private static readonly uint[] _intValueFieldTags = new uint[] { 32, 56, 48, 18, 8, 24 };
            public static IntValue DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override IntValue DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override IntValue ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_Common_PerformanceData_IntValue__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<IntValue, IntValue.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_Common_PerformanceData_IntValue__FieldAccessorTable; }
            }
            
            public const int ValueFieldNumber = 1;
            private bool hasValue;
            private long value_;
            public bool HasValue {
              get { return hasValue; }
            }
            public long Value {
              get { return value_; }
            }
            
            public const int UnitFieldNumber = 2;
            private bool hasUnit;
            private string unit_ = "";
            public bool HasUnit {
              get { return hasUnit; }
            }
            public string Unit {
              get { return unit_; }
            }
            
            public const int WarningFieldNumber = 3;
            private bool hasWarning;
            private long warning_;
            public bool HasWarning {
              get { return hasWarning; }
            }
            public long Warning {
              get { return warning_; }
            }
            
            public const int CriticalFieldNumber = 4;
            private bool hasCritical;
            private long critical_;
            public bool HasCritical {
              get { return hasCritical; }
            }
            public long Critical {
              get { return critical_; }
            }
            
            public const int MinimumFieldNumber = 6;
            private bool hasMinimum;
            private long minimum_;
            public bool HasMinimum {
              get { return hasMinimum; }
            }
            public long Minimum {
              get { return minimum_; }
            }
            
            public const int MaximumFieldNumber = 7;
            private bool hasMaximum;
            private long maximum_;
            public bool HasMaximum {
              get { return hasMaximum; }
            }
            public long Maximum {
              get { return maximum_; }
            }
            
            public override bool IsInitialized {
              get {
                if (!hasValue) return false;
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _intValueFieldNames;
              if (hasValue) {
                output.WriteInt64(1, field_names[4], Value);
              }
              if (hasUnit) {
                output.WriteString(2, field_names[3], Unit);
              }
              if (hasWarning) {
                output.WriteInt64(3, field_names[5], Warning);
              }
              if (hasCritical) {
                output.WriteInt64(4, field_names[0], Critical);
              }
              if (hasMinimum) {
                output.WriteInt64(6, field_names[2], Minimum);
              }
              if (hasMaximum) {
                output.WriteInt64(7, field_names[1], Maximum);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                if (hasValue) {
                  size += pb::CodedOutputStream.ComputeInt64Size(1, Value);
                }
                if (hasUnit) {
                  size += pb::CodedOutputStream.ComputeStringSize(2, Unit);
                }
                if (hasWarning) {
                  size += pb::CodedOutputStream.ComputeInt64Size(3, Warning);
                }
                if (hasCritical) {
                  size += pb::CodedOutputStream.ComputeInt64Size(4, Critical);
                }
                if (hasMinimum) {
                  size += pb::CodedOutputStream.ComputeInt64Size(6, Minimum);
                }
                if (hasMaximum) {
                  size += pb::CodedOutputStream.ComputeInt64Size(7, Maximum);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static IntValue ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static IntValue ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static IntValue ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static IntValue ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static IntValue ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static IntValue ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static IntValue ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static IntValue ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static IntValue ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static IntValue ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private IntValue MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(IntValue prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<IntValue, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(IntValue cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private IntValue result;
              
              private IntValue PrepareBuilder() {
                if (resultIsReadOnly) {
                  IntValue original = result;
                  result = new IntValue();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override IntValue MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.Common.Types.PerformanceData.Types.IntValue.Descriptor; }
              }
              
              public override IntValue DefaultInstanceForType {
                get { return global::Plugin.Common.Types.PerformanceData.Types.IntValue.DefaultInstance; }
              }
              
              public override IntValue BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is IntValue) {
                  return MergeFrom((IntValue) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(IntValue other) {
                if (other == global::Plugin.Common.Types.PerformanceData.Types.IntValue.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasValue) {
                  Value = other.Value;
                }
                if (other.HasUnit) {
                  Unit = other.Unit;
                }
                if (other.HasWarning) {
                  Warning = other.Warning;
                }
                if (other.HasCritical) {
                  Critical = other.Critical;
                }
                if (other.HasMinimum) {
                  Minimum = other.Minimum;
                }
                if (other.HasMaximum) {
                  Maximum = other.Maximum;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_intValueFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _intValueFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 8: {
                      result.hasValue = input.ReadInt64(ref result.value_);
                      break;
                    }
                    case 18: {
                      result.hasUnit = input.ReadString(ref result.unit_);
                      break;
                    }
                    case 24: {
                      result.hasWarning = input.ReadInt64(ref result.warning_);
                      break;
                    }
                    case 32: {
                      result.hasCritical = input.ReadInt64(ref result.critical_);
                      break;
                    }
                    case 48: {
                      result.hasMinimum = input.ReadInt64(ref result.minimum_);
                      break;
                    }
                    case 56: {
                      result.hasMaximum = input.ReadInt64(ref result.maximum_);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasValue {
                get { return result.hasValue; }
              }
              public long Value {
                get { return result.Value; }
                set { SetValue(value); }
              }
              public Builder SetValue(long value) {
                PrepareBuilder();
                result.hasValue = true;
                result.value_ = value;
                return this;
              }
              public Builder ClearValue() {
                PrepareBuilder();
                result.hasValue = false;
                result.value_ = 0L;
                return this;
              }
              
              public bool HasUnit {
                get { return result.hasUnit; }
              }
              public string Unit {
                get { return result.Unit; }
                set { SetUnit(value); }
              }
              public Builder SetUnit(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasUnit = true;
                result.unit_ = value;
                return this;
              }
              public Builder ClearUnit() {
                PrepareBuilder();
                result.hasUnit = false;
                result.unit_ = "";
                return this;
              }
              
              public bool HasWarning {
                get { return result.hasWarning; }
              }
              public long Warning {
                get { return result.Warning; }
                set { SetWarning(value); }
              }
              public Builder SetWarning(long value) {
                PrepareBuilder();
                result.hasWarning = true;
                result.warning_ = value;
                return this;
              }
              public Builder ClearWarning() {
                PrepareBuilder();
                result.hasWarning = false;
                result.warning_ = 0L;
                return this;
              }
              
              public bool HasCritical {
                get { return result.hasCritical; }
              }
              public long Critical {
                get { return result.Critical; }
                set { SetCritical(value); }
              }
              public Builder SetCritical(long value) {
                PrepareBuilder();
                result.hasCritical = true;
                result.critical_ = value;
                return this;
              }
              public Builder ClearCritical() {
                PrepareBuilder();
                result.hasCritical = false;
                result.critical_ = 0L;
                return this;
              }
              
              public bool HasMinimum {
                get { return result.hasMinimum; }
              }
              public long Minimum {
                get { return result.Minimum; }
                set { SetMinimum(value); }
              }
              public Builder SetMinimum(long value) {
                PrepareBuilder();
                result.hasMinimum = true;
                result.minimum_ = value;
                return this;
              }
              public Builder ClearMinimum() {
                PrepareBuilder();
                result.hasMinimum = false;
                result.minimum_ = 0L;
                return this;
              }
              
              public bool HasMaximum {
                get { return result.hasMaximum; }
              }
              public long Maximum {
                get { return result.Maximum; }
                set { SetMaximum(value); }
              }
              public Builder SetMaximum(long value) {
                PrepareBuilder();
                result.hasMaximum = true;
                result.maximum_ = value;
                return this;
              }
              public Builder ClearMaximum() {
                PrepareBuilder();
                result.hasMaximum = false;
                result.maximum_ = 0L;
                return this;
              }
            }
            static IntValue() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class StringValue : pb::GeneratedMessage<StringValue, StringValue.Builder> {
            private StringValue() { }
            private static readonly StringValue defaultInstance = new StringValue().MakeReadOnly();
            private static readonly string[] _stringValueFieldNames = new string[] { "value" };
            private static readonly uint[] _stringValueFieldTags = new uint[] { 10 };
            public static StringValue DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override StringValue DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override StringValue ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_Common_PerformanceData_StringValue__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<StringValue, StringValue.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_Common_PerformanceData_StringValue__FieldAccessorTable; }
            }
            
            public const int ValueFieldNumber = 1;
            private bool hasValue;
            private string value_ = "";
            public bool HasValue {
              get { return hasValue; }
            }
            public string Value {
              get { return value_; }
            }
            
            public override bool IsInitialized {
              get {
                if (!hasValue) return false;
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _stringValueFieldNames;
              if (hasValue) {
                output.WriteString(1, field_names[0], Value);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                if (hasValue) {
                  size += pb::CodedOutputStream.ComputeStringSize(1, Value);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static StringValue ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static StringValue ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static StringValue ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static StringValue ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static StringValue ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static StringValue ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static StringValue ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static StringValue ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static StringValue ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static StringValue ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private StringValue MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(StringValue prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<StringValue, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(StringValue cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private StringValue result;
              
              private StringValue PrepareBuilder() {
                if (resultIsReadOnly) {
                  StringValue original = result;
                  result = new StringValue();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override StringValue MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.Common.Types.PerformanceData.Types.StringValue.Descriptor; }
              }
              
              public override StringValue DefaultInstanceForType {
                get { return global::Plugin.Common.Types.PerformanceData.Types.StringValue.DefaultInstance; }
              }
              
              public override StringValue BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is StringValue) {
                  return MergeFrom((StringValue) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(StringValue other) {
                if (other == global::Plugin.Common.Types.PerformanceData.Types.StringValue.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasValue) {
                  Value = other.Value;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_stringValueFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _stringValueFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 10: {
                      result.hasValue = input.ReadString(ref result.value_);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasValue {
                get { return result.hasValue; }
              }
              public string Value {
                get { return result.Value; }
                set { SetValue(value); }
              }
              public Builder SetValue(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasValue = true;
                result.value_ = value;
                return this;
              }
              public Builder ClearValue() {
                PrepareBuilder();
                result.hasValue = false;
                result.value_ = "";
                return this;
              }
            }
            static StringValue() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class FloatValue : pb::GeneratedMessage<FloatValue, FloatValue.Builder> {
            private FloatValue() { }
            private static readonly FloatValue defaultInstance = new FloatValue().MakeReadOnly();
            private static readonly string[] _floatValueFieldNames = new string[] { "critical", "maximum", "minimum", "unit", "value", "warning" };
            private static readonly uint[] _floatValueFieldTags = new uint[] { 33, 57, 49, 18, 9, 25 };
            public static FloatValue DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override FloatValue DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override FloatValue ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_Common_PerformanceData_FloatValue__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<FloatValue, FloatValue.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_Common_PerformanceData_FloatValue__FieldAccessorTable; }
            }
            
            public const int ValueFieldNumber = 1;
            private bool hasValue;
            private double value_;
            public bool HasValue {
              get { return hasValue; }
            }
            public double Value {
              get { return value_; }
            }
            
            public const int UnitFieldNumber = 2;
            private bool hasUnit;
            private string unit_ = "";
            public bool HasUnit {
              get { return hasUnit; }
            }
            public string Unit {
              get { return unit_; }
            }
            
            public const int WarningFieldNumber = 3;
            private bool hasWarning;
            private double warning_;
            public bool HasWarning {
              get { return hasWarning; }
            }
            public double Warning {
              get { return warning_; }
            }
            
            public const int CriticalFieldNumber = 4;
            private bool hasCritical;
            private double critical_;
            public bool HasCritical {
              get { return hasCritical; }
            }
            public double Critical {
              get { return critical_; }
            }
            
            public const int MinimumFieldNumber = 6;
            private bool hasMinimum;
            private double minimum_;
            public bool HasMinimum {
              get { return hasMinimum; }
            }
            public double Minimum {
              get { return minimum_; }
            }
            
            public const int MaximumFieldNumber = 7;
            private bool hasMaximum;
            private double maximum_;
            public bool HasMaximum {
              get { return hasMaximum; }
            }
            public double Maximum {
              get { return maximum_; }
            }
            
            public override bool IsInitialized {
              get {
                if (!hasValue) return false;
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _floatValueFieldNames;
              if (hasValue) {
                output.WriteDouble(1, field_names[4], Value);
              }
              if (hasUnit) {
                output.WriteString(2, field_names[3], Unit);
              }
              if (hasWarning) {
                output.WriteDouble(3, field_names[5], Warning);
              }
              if (hasCritical) {
                output.WriteDouble(4, field_names[0], Critical);
              }
              if (hasMinimum) {
                output.WriteDouble(6, field_names[2], Minimum);
              }
              if (hasMaximum) {
                output.WriteDouble(7, field_names[1], Maximum);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                if (hasValue) {
                  size += pb::CodedOutputStream.ComputeDoubleSize(1, Value);
                }
                if (hasUnit) {
                  size += pb::CodedOutputStream.ComputeStringSize(2, Unit);
                }
                if (hasWarning) {
                  size += pb::CodedOutputStream.ComputeDoubleSize(3, Warning);
                }
                if (hasCritical) {
                  size += pb::CodedOutputStream.ComputeDoubleSize(4, Critical);
                }
                if (hasMinimum) {
                  size += pb::CodedOutputStream.ComputeDoubleSize(6, Minimum);
                }
                if (hasMaximum) {
                  size += pb::CodedOutputStream.ComputeDoubleSize(7, Maximum);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static FloatValue ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static FloatValue ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static FloatValue ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static FloatValue ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static FloatValue ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static FloatValue ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static FloatValue ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static FloatValue ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static FloatValue ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static FloatValue ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private FloatValue MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(FloatValue prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<FloatValue, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(FloatValue cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private FloatValue result;
              
              private FloatValue PrepareBuilder() {
                if (resultIsReadOnly) {
                  FloatValue original = result;
                  result = new FloatValue();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override FloatValue MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.Common.Types.PerformanceData.Types.FloatValue.Descriptor; }
              }
              
              public override FloatValue DefaultInstanceForType {
                get { return global::Plugin.Common.Types.PerformanceData.Types.FloatValue.DefaultInstance; }
              }
              
              public override FloatValue BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is FloatValue) {
                  return MergeFrom((FloatValue) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(FloatValue other) {
                if (other == global::Plugin.Common.Types.PerformanceData.Types.FloatValue.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasValue) {
                  Value = other.Value;
                }
                if (other.HasUnit) {
                  Unit = other.Unit;
                }
                if (other.HasWarning) {
                  Warning = other.Warning;
                }
                if (other.HasCritical) {
                  Critical = other.Critical;
                }
                if (other.HasMinimum) {
                  Minimum = other.Minimum;
                }
                if (other.HasMaximum) {
                  Maximum = other.Maximum;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_floatValueFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _floatValueFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 9: {
                      result.hasValue = input.ReadDouble(ref result.value_);
                      break;
                    }
                    case 18: {
                      result.hasUnit = input.ReadString(ref result.unit_);
                      break;
                    }
                    case 25: {
                      result.hasWarning = input.ReadDouble(ref result.warning_);
                      break;
                    }
                    case 33: {
                      result.hasCritical = input.ReadDouble(ref result.critical_);
                      break;
                    }
                    case 49: {
                      result.hasMinimum = input.ReadDouble(ref result.minimum_);
                      break;
                    }
                    case 57: {
                      result.hasMaximum = input.ReadDouble(ref result.maximum_);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasValue {
                get { return result.hasValue; }
              }
              public double Value {
                get { return result.Value; }
                set { SetValue(value); }
              }
              public Builder SetValue(double value) {
                PrepareBuilder();
                result.hasValue = true;
                result.value_ = value;
                return this;
              }
              public Builder ClearValue() {
                PrepareBuilder();
                result.hasValue = false;
                result.value_ = 0D;
                return this;
              }
              
              public bool HasUnit {
                get { return result.hasUnit; }
              }
              public string Unit {
                get { return result.Unit; }
                set { SetUnit(value); }
              }
              public Builder SetUnit(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasUnit = true;
                result.unit_ = value;
                return this;
              }
              public Builder ClearUnit() {
                PrepareBuilder();
                result.hasUnit = false;
                result.unit_ = "";
                return this;
              }
              
              public bool HasWarning {
                get { return result.hasWarning; }
              }
              public double Warning {
                get { return result.Warning; }
                set { SetWarning(value); }
              }
              public Builder SetWarning(double value) {
                PrepareBuilder();
                result.hasWarning = true;
                result.warning_ = value;
                return this;
              }
              public Builder ClearWarning() {
                PrepareBuilder();
                result.hasWarning = false;
                result.warning_ = 0D;
                return this;
              }
              
              public bool HasCritical {
                get { return result.hasCritical; }
              }
              public double Critical {
                get { return result.Critical; }
                set { SetCritical(value); }
              }
              public Builder SetCritical(double value) {
                PrepareBuilder();
                result.hasCritical = true;
                result.critical_ = value;
                return this;
              }
              public Builder ClearCritical() {
                PrepareBuilder();
                result.hasCritical = false;
                result.critical_ = 0D;
                return this;
              }
              
              public bool HasMinimum {
                get { return result.hasMinimum; }
              }
              public double Minimum {
                get { return result.Minimum; }
                set { SetMinimum(value); }
              }
              public Builder SetMinimum(double value) {
                PrepareBuilder();
                result.hasMinimum = true;
                result.minimum_ = value;
                return this;
              }
              public Builder ClearMinimum() {
                PrepareBuilder();
                result.hasMinimum = false;
                result.minimum_ = 0D;
                return this;
              }
              
              public bool HasMaximum {
                get { return result.hasMaximum; }
              }
              public double Maximum {
                get { return result.Maximum; }
                set { SetMaximum(value); }
              }
              public Builder SetMaximum(double value) {
                PrepareBuilder();
                result.hasMaximum = true;
                result.maximum_ = value;
                return this;
              }
              public Builder ClearMaximum() {
                PrepareBuilder();
                result.hasMaximum = false;
                result.maximum_ = 0D;
                return this;
              }
            }
            static FloatValue() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class BoolValue : pb::GeneratedMessage<BoolValue, BoolValue.Builder> {
            private BoolValue() { }
            private static readonly BoolValue defaultInstance = new BoolValue().MakeReadOnly();
            private static readonly string[] _boolValueFieldNames = new string[] { "critical", "unit", "value", "warning" };
            private static readonly uint[] _boolValueFieldTags = new uint[] { 32, 18, 8, 24 };
            public static BoolValue DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override BoolValue DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override BoolValue ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_Common_PerformanceData_BoolValue__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<BoolValue, BoolValue.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_Common_PerformanceData_BoolValue__FieldAccessorTable; }
            }
            
            public const int ValueFieldNumber = 1;
            private bool hasValue;
            private bool value_;
            public bool HasValue {
              get { return hasValue; }
            }
            public bool Value {
              get { return value_; }
            }
            
            public const int UnitFieldNumber = 2;
            private bool hasUnit;
            private string unit_ = "";
            public bool HasUnit {
              get { return hasUnit; }
            }
            public string Unit {
              get { return unit_; }
            }
            
            public const int WarningFieldNumber = 3;
            private bool hasWarning;
            private bool warning_;
            public bool HasWarning {
              get { return hasWarning; }
            }
            public bool Warning {
              get { return warning_; }
            }
            
            public const int CriticalFieldNumber = 4;
            private bool hasCritical;
            private bool critical_;
            public bool HasCritical {
              get { return hasCritical; }
            }
            public bool Critical {
              get { return critical_; }
            }
            
            public override bool IsInitialized {
              get {
                if (!hasValue) return false;
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _boolValueFieldNames;
              if (hasValue) {
                output.WriteBool(1, field_names[2], Value);
              }
              if (hasUnit) {
                output.WriteString(2, field_names[1], Unit);
              }
              if (hasWarning) {
                output.WriteBool(3, field_names[3], Warning);
              }
              if (hasCritical) {
                output.WriteBool(4, field_names[0], Critical);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                if (hasValue) {
                  size += pb::CodedOutputStream.ComputeBoolSize(1, Value);
                }
                if (hasUnit) {
                  size += pb::CodedOutputStream.ComputeStringSize(2, Unit);
                }
                if (hasWarning) {
                  size += pb::CodedOutputStream.ComputeBoolSize(3, Warning);
                }
                if (hasCritical) {
                  size += pb::CodedOutputStream.ComputeBoolSize(4, Critical);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static BoolValue ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static BoolValue ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static BoolValue ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static BoolValue ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static BoolValue ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static BoolValue ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static BoolValue ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static BoolValue ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static BoolValue ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static BoolValue ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private BoolValue MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(BoolValue prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<BoolValue, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(BoolValue cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private BoolValue result;
              
              private BoolValue PrepareBuilder() {
                if (resultIsReadOnly) {
                  BoolValue original = result;
                  result = new BoolValue();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override BoolValue MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.Common.Types.PerformanceData.Types.BoolValue.Descriptor; }
              }
              
              public override BoolValue DefaultInstanceForType {
                get { return global::Plugin.Common.Types.PerformanceData.Types.BoolValue.DefaultInstance; }
              }
              
              public override BoolValue BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is BoolValue) {
                  return MergeFrom((BoolValue) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(BoolValue other) {
                if (other == global::Plugin.Common.Types.PerformanceData.Types.BoolValue.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasValue) {
                  Value = other.Value;
                }
                if (other.HasUnit) {
                  Unit = other.Unit;
                }
                if (other.HasWarning) {
                  Warning = other.Warning;
                }
                if (other.HasCritical) {
                  Critical = other.Critical;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_boolValueFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _boolValueFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 8: {
                      result.hasValue = input.ReadBool(ref result.value_);
                      break;
                    }
                    case 18: {
                      result.hasUnit = input.ReadString(ref result.unit_);
                      break;
                    }
                    case 24: {
                      result.hasWarning = input.ReadBool(ref result.warning_);
                      break;
                    }
                    case 32: {
                      result.hasCritical = input.ReadBool(ref result.critical_);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasValue {
                get { return result.hasValue; }
              }
              public bool Value {
                get { return result.Value; }
                set { SetValue(value); }
              }
              public Builder SetValue(bool value) {
                PrepareBuilder();
                result.hasValue = true;
                result.value_ = value;
                return this;
              }
              public Builder ClearValue() {
                PrepareBuilder();
                result.hasValue = false;
                result.value_ = false;
                return this;
              }
              
              public bool HasUnit {
                get { return result.hasUnit; }
              }
              public string Unit {
                get { return result.Unit; }
                set { SetUnit(value); }
              }
              public Builder SetUnit(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasUnit = true;
                result.unit_ = value;
                return this;
              }
              public Builder ClearUnit() {
                PrepareBuilder();
                result.hasUnit = false;
                result.unit_ = "";
                return this;
              }
              
              public bool HasWarning {
                get { return result.hasWarning; }
              }
              public bool Warning {
                get { return result.Warning; }
                set { SetWarning(value); }
              }
              public Builder SetWarning(bool value) {
                PrepareBuilder();
                result.hasWarning = true;
                result.warning_ = value;
                return this;
              }
              public Builder ClearWarning() {
                PrepareBuilder();
                result.hasWarning = false;
                result.warning_ = false;
                return this;
              }
              
              public bool HasCritical {
                get { return result.hasCritical; }
              }
              public bool Critical {
                get { return result.Critical; }
                set { SetCritical(value); }
              }
              public Builder SetCritical(bool value) {
                PrepareBuilder();
                result.hasCritical = true;
                result.critical_ = value;
                return this;
              }
              public Builder ClearCritical() {
                PrepareBuilder();
                result.hasCritical = false;
                result.critical_ = false;
                return this;
              }
            }
            static BoolValue() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
        }
        #endregion
        
        public const int AliasFieldNumber = 1;
        private bool hasAlias;
        private string alias_ = "";
        public bool HasAlias {
          get { return hasAlias; }
        }
        public string Alias {
          get { return alias_; }
        }
        
        public const int IntValueFieldNumber = 3;
        private bool hasIntValue;
        private global::Plugin.Common.Types.PerformanceData.Types.IntValue intValue_;
        public bool HasIntValue {
          get { return hasIntValue; }
        }
        public global::Plugin.Common.Types.PerformanceData.Types.IntValue IntValue {
          get { return intValue_ ?? global::Plugin.Common.Types.PerformanceData.Types.IntValue.DefaultInstance; }
        }
        
        public const int StringValueFieldNumber = 4;
        private bool hasStringValue;
        private global::Plugin.Common.Types.PerformanceData.Types.StringValue stringValue_;
        public bool HasStringValue {
          get { return hasStringValue; }
        }
        public global::Plugin.Common.Types.PerformanceData.Types.StringValue StringValue {
          get { return stringValue_ ?? global::Plugin.Common.Types.PerformanceData.Types.StringValue.DefaultInstance; }
        }
        
        public const int FloatValueFieldNumber = 5;
        private bool hasFloatValue;
        private global::Plugin.Common.Types.PerformanceData.Types.FloatValue floatValue_;
        public bool HasFloatValue {
          get { return hasFloatValue; }
        }
        public global::Plugin.Common.Types.PerformanceData.Types.FloatValue FloatValue {
          get { return floatValue_ ?? global::Plugin.Common.Types.PerformanceData.Types.FloatValue.DefaultInstance; }
        }
        
        public const int BoolValueFieldNumber = 6;
        private bool hasBoolValue;
        private global::Plugin.Common.Types.PerformanceData.Types.BoolValue boolValue_;
        public bool HasBoolValue {
          get { return hasBoolValue; }
        }
        public global::Plugin.Common.Types.PerformanceData.Types.BoolValue BoolValue {
          get { return boolValue_ ?? global::Plugin.Common.Types.PerformanceData.Types.BoolValue.DefaultInstance; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasAlias) return false;
            if (HasIntValue) {
              if (!IntValue.IsInitialized) return false;
            }
            if (HasStringValue) {
              if (!StringValue.IsInitialized) return false;
            }
            if (HasFloatValue) {
              if (!FloatValue.IsInitialized) return false;
            }
            if (HasBoolValue) {
              if (!BoolValue.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _performanceDataFieldNames;
          if (hasAlias) {
            output.WriteString(1, field_names[0], Alias);
          }
          if (hasIntValue) {
            output.WriteMessage(3, field_names[3], IntValue);
          }
          if (hasStringValue) {
            output.WriteMessage(4, field_names[4], StringValue);
          }
          if (hasFloatValue) {
            output.WriteMessage(5, field_names[2], FloatValue);
          }
          if (hasBoolValue) {
            output.WriteMessage(6, field_names[1], BoolValue);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasAlias) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Alias);
            }
            if (hasIntValue) {
              size += pb::CodedOutputStream.ComputeMessageSize(3, IntValue);
            }
            if (hasStringValue) {
              size += pb::CodedOutputStream.ComputeMessageSize(4, StringValue);
            }
            if (hasFloatValue) {
              size += pb::CodedOutputStream.ComputeMessageSize(5, FloatValue);
            }
            if (hasBoolValue) {
              size += pb::CodedOutputStream.ComputeMessageSize(6, BoolValue);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static PerformanceData ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static PerformanceData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static PerformanceData ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static PerformanceData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static PerformanceData ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static PerformanceData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static PerformanceData ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static PerformanceData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static PerformanceData ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static PerformanceData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private PerformanceData MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(PerformanceData prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<PerformanceData, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(PerformanceData cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private PerformanceData result;
          
          private PerformanceData PrepareBuilder() {
            if (resultIsReadOnly) {
              PerformanceData original = result;
              result = new PerformanceData();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override PerformanceData MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.Common.Types.PerformanceData.Descriptor; }
          }
          
          public override PerformanceData DefaultInstanceForType {
            get { return global::Plugin.Common.Types.PerformanceData.DefaultInstance; }
          }
          
          public override PerformanceData BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is PerformanceData) {
              return MergeFrom((PerformanceData) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(PerformanceData other) {
            if (other == global::Plugin.Common.Types.PerformanceData.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasAlias) {
              Alias = other.Alias;
            }
            if (other.HasIntValue) {
              MergeIntValue(other.IntValue);
            }
            if (other.HasStringValue) {
              MergeStringValue(other.StringValue);
            }
            if (other.HasFloatValue) {
              MergeFloatValue(other.FloatValue);
            }
            if (other.HasBoolValue) {
              MergeBoolValue(other.BoolValue);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_performanceDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _performanceDataFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasAlias = input.ReadString(ref result.alias_);
                  break;
                }
                case 26: {
                  global::Plugin.Common.Types.PerformanceData.Types.IntValue.Builder subBuilder = global::Plugin.Common.Types.PerformanceData.Types.IntValue.CreateBuilder();
                  if (result.hasIntValue) {
                    subBuilder.MergeFrom(IntValue);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  IntValue = subBuilder.BuildPartial();
                  break;
                }
                case 34: {
                  global::Plugin.Common.Types.PerformanceData.Types.StringValue.Builder subBuilder = global::Plugin.Common.Types.PerformanceData.Types.StringValue.CreateBuilder();
                  if (result.hasStringValue) {
                    subBuilder.MergeFrom(StringValue);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  StringValue = subBuilder.BuildPartial();
                  break;
                }
                case 42: {
                  global::Plugin.Common.Types.PerformanceData.Types.FloatValue.Builder subBuilder = global::Plugin.Common.Types.PerformanceData.Types.FloatValue.CreateBuilder();
                  if (result.hasFloatValue) {
                    subBuilder.MergeFrom(FloatValue);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  FloatValue = subBuilder.BuildPartial();
                  break;
                }
                case 50: {
                  global::Plugin.Common.Types.PerformanceData.Types.BoolValue.Builder subBuilder = global::Plugin.Common.Types.PerformanceData.Types.BoolValue.CreateBuilder();
                  if (result.hasBoolValue) {
                    subBuilder.MergeFrom(BoolValue);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  BoolValue = subBuilder.BuildPartial();
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasAlias {
            get { return result.hasAlias; }
          }
          public string Alias {
            get { return result.Alias; }
            set { SetAlias(value); }
          }
          public Builder SetAlias(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasAlias = true;
            result.alias_ = value;
            return this;
          }
          public Builder ClearAlias() {
            PrepareBuilder();
            result.hasAlias = false;
            result.alias_ = "";
            return this;
          }
          
          public bool HasIntValue {
           get { return result.hasIntValue; }
          }
          public global::Plugin.Common.Types.PerformanceData.Types.IntValue IntValue {
            get { return result.IntValue; }
            set { SetIntValue(value); }
          }
          public Builder SetIntValue(global::Plugin.Common.Types.PerformanceData.Types.IntValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasIntValue = true;
            result.intValue_ = value;
            return this;
          }
          public Builder SetIntValue(global::Plugin.Common.Types.PerformanceData.Types.IntValue.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasIntValue = true;
            result.intValue_ = builderForValue.Build();
            return this;
          }
          public Builder MergeIntValue(global::Plugin.Common.Types.PerformanceData.Types.IntValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasIntValue &&
                result.intValue_ != global::Plugin.Common.Types.PerformanceData.Types.IntValue.DefaultInstance) {
                result.intValue_ = global::Plugin.Common.Types.PerformanceData.Types.IntValue.CreateBuilder(result.intValue_).MergeFrom(value).BuildPartial();
            } else {
              result.intValue_ = value;
            }
            result.hasIntValue = true;
            return this;
          }
          public Builder ClearIntValue() {
            PrepareBuilder();
            result.hasIntValue = false;
            result.intValue_ = null;
            return this;
          }
          
          public bool HasStringValue {
           get { return result.hasStringValue; }
          }
          public global::Plugin.Common.Types.PerformanceData.Types.StringValue StringValue {
            get { return result.StringValue; }
            set { SetStringValue(value); }
          }
          public Builder SetStringValue(global::Plugin.Common.Types.PerformanceData.Types.StringValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasStringValue = true;
            result.stringValue_ = value;
            return this;
          }
          public Builder SetStringValue(global::Plugin.Common.Types.PerformanceData.Types.StringValue.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasStringValue = true;
            result.stringValue_ = builderForValue.Build();
            return this;
          }
          public Builder MergeStringValue(global::Plugin.Common.Types.PerformanceData.Types.StringValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasStringValue &&
                result.stringValue_ != global::Plugin.Common.Types.PerformanceData.Types.StringValue.DefaultInstance) {
                result.stringValue_ = global::Plugin.Common.Types.PerformanceData.Types.StringValue.CreateBuilder(result.stringValue_).MergeFrom(value).BuildPartial();
            } else {
              result.stringValue_ = value;
            }
            result.hasStringValue = true;
            return this;
          }
          public Builder ClearStringValue() {
            PrepareBuilder();
            result.hasStringValue = false;
            result.stringValue_ = null;
            return this;
          }
          
          public bool HasFloatValue {
           get { return result.hasFloatValue; }
          }
          public global::Plugin.Common.Types.PerformanceData.Types.FloatValue FloatValue {
            get { return result.FloatValue; }
            set { SetFloatValue(value); }
          }
          public Builder SetFloatValue(global::Plugin.Common.Types.PerformanceData.Types.FloatValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasFloatValue = true;
            result.floatValue_ = value;
            return this;
          }
          public Builder SetFloatValue(global::Plugin.Common.Types.PerformanceData.Types.FloatValue.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasFloatValue = true;
            result.floatValue_ = builderForValue.Build();
            return this;
          }
          public Builder MergeFloatValue(global::Plugin.Common.Types.PerformanceData.Types.FloatValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasFloatValue &&
                result.floatValue_ != global::Plugin.Common.Types.PerformanceData.Types.FloatValue.DefaultInstance) {
                result.floatValue_ = global::Plugin.Common.Types.PerformanceData.Types.FloatValue.CreateBuilder(result.floatValue_).MergeFrom(value).BuildPartial();
            } else {
              result.floatValue_ = value;
            }
            result.hasFloatValue = true;
            return this;
          }
          public Builder ClearFloatValue() {
            PrepareBuilder();
            result.hasFloatValue = false;
            result.floatValue_ = null;
            return this;
          }
          
          public bool HasBoolValue {
           get { return result.hasBoolValue; }
          }
          public global::Plugin.Common.Types.PerformanceData.Types.BoolValue BoolValue {
            get { return result.BoolValue; }
            set { SetBoolValue(value); }
          }
          public Builder SetBoolValue(global::Plugin.Common.Types.PerformanceData.Types.BoolValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasBoolValue = true;
            result.boolValue_ = value;
            return this;
          }
          public Builder SetBoolValue(global::Plugin.Common.Types.PerformanceData.Types.BoolValue.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasBoolValue = true;
            result.boolValue_ = builderForValue.Build();
            return this;
          }
          public Builder MergeBoolValue(global::Plugin.Common.Types.PerformanceData.Types.BoolValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasBoolValue &&
                result.boolValue_ != global::Plugin.Common.Types.PerformanceData.Types.BoolValue.DefaultInstance) {
                result.boolValue_ = global::Plugin.Common.Types.PerformanceData.Types.BoolValue.CreateBuilder(result.boolValue_).MergeFrom(value).BuildPartial();
            } else {
              result.boolValue_ = value;
            }
            result.hasBoolValue = true;
            return this;
          }
          public Builder ClearBoolValue() {
            PrepareBuilder();
            result.hasBoolValue = false;
            result.boolValue_ = null;
            return this;
          }
        }
        static PerformanceData() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Result : pb::GeneratedMessage<Result, Result.Builder> {
        private Result() { }
        private static readonly Result defaultInstance = new Result().MakeReadOnly();
        private static readonly string[] _resultFieldNames = new string[] { "code", "data", "message" };
        private static readonly uint[] _resultFieldTags = new uint[] { 8, 26, 18 };
        public static Result DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Result DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Result ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_Result__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Result, Result.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_Result__FieldAccessorTable; }
        }
        
        #region Nested types
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static partial class Types {
          public enum StatusCodeType {
            STATUS_OK = 0,
            STATUS_WARNING = 1,
            STATUS_ERROR = 2,
            STATUS_DELAYED = 3,
          }
          
        }
        #endregion
        
        public const int CodeFieldNumber = 1;
        private bool hasCode;
        private global::Plugin.Common.Types.Result.Types.StatusCodeType code_ = global::Plugin.Common.Types.Result.Types.StatusCodeType.STATUS_OK;
        public bool HasCode {
          get { return hasCode; }
        }
        public global::Plugin.Common.Types.Result.Types.StatusCodeType Code {
          get { return code_; }
        }
        
        public const int MessageFieldNumber = 2;
        private bool hasMessage;
        private string message_ = "";
        public bool HasMessage {
          get { return hasMessage; }
        }
        public string Message {
          get { return message_; }
        }
        
        public const int DataFieldNumber = 3;
        private bool hasData;
        private string data_ = "";
        public bool HasData {
          get { return hasData; }
        }
        public string Data {
          get { return data_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasCode) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _resultFieldNames;
          if (hasCode) {
            output.WriteEnum(1, field_names[0], (int) Code, Code);
          }
          if (hasMessage) {
            output.WriteString(2, field_names[2], Message);
          }
          if (hasData) {
            output.WriteString(3, field_names[1], Data);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasCode) {
              size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Code);
            }
            if (hasMessage) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Message);
            }
            if (hasData) {
              size += pb::CodedOutputStream.ComputeStringSize(3, Data);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Result ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Result ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Result ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Result ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Result ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Result ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Result ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Result ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Result ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Result ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Result MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Result prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Result, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Result cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Result result;
          
          private Result PrepareBuilder() {
            if (resultIsReadOnly) {
              Result original = result;
              result = new Result();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Result MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.Common.Types.Result.Descriptor; }
          }
          
          public override Result DefaultInstanceForType {
            get { return global::Plugin.Common.Types.Result.DefaultInstance; }
          }
          
          public override Result BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Result) {
              return MergeFrom((Result) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Result other) {
            if (other == global::Plugin.Common.Types.Result.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasCode) {
              Code = other.Code;
            }
            if (other.HasMessage) {
              Message = other.Message;
            }
            if (other.HasData) {
              Data = other.Data;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_resultFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _resultFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  object unknown;
                  if(input.ReadEnum(ref result.code_, out unknown)) {
                    result.hasCode = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(1, (ulong)(int)unknown);
                  }
                  break;
                }
                case 18: {
                  result.hasMessage = input.ReadString(ref result.message_);
                  break;
                }
                case 26: {
                  result.hasData = input.ReadString(ref result.data_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasCode {
           get { return result.hasCode; }
          }
          public global::Plugin.Common.Types.Result.Types.StatusCodeType Code {
            get { return result.Code; }
            set { SetCode(value); }
          }
          public Builder SetCode(global::Plugin.Common.Types.Result.Types.StatusCodeType value) {
            PrepareBuilder();
            result.hasCode = true;
            result.code_ = value;
            return this;
          }
          public Builder ClearCode() {
            PrepareBuilder();
            result.hasCode = false;
            result.code_ = global::Plugin.Common.Types.Result.Types.StatusCodeType.STATUS_OK;
            return this;
          }
          
          public bool HasMessage {
            get { return result.hasMessage; }
          }
          public string Message {
            get { return result.Message; }
            set { SetMessage(value); }
          }
          public Builder SetMessage(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasMessage = true;
            result.message_ = value;
            return this;
          }
          public Builder ClearMessage() {
            PrepareBuilder();
            result.hasMessage = false;
            result.message_ = "";
            return this;
          }
          
          public bool HasData {
            get { return result.hasData; }
          }
          public string Data {
            get { return result.Data; }
            set { SetData(value); }
          }
          public Builder SetData(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasData = true;
            result.data_ = value;
            return this;
          }
          public Builder ClearData() {
            PrepareBuilder();
            result.hasData = false;
            result.data_ = "";
            return this;
          }
        }
        static Result() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commonFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Common ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Common ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Common ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Common ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Common ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Common ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Common ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Common ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Common ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Common ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Common MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Common prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Common, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Common cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Common result;
      
      private Common PrepareBuilder() {
        if (resultIsReadOnly) {
          Common original = result;
          result = new Common();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Common MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.Common.Descriptor; }
      }
      
      public override Common DefaultInstanceForType {
        get { return global::Plugin.Common.DefaultInstance; }
      }
      
      public override Common BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Common) {
          return MergeFrom((Common) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Common other) {
        if (other == global::Plugin.Common.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commonFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commonFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static Common() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class QueryRequestMessage : pb::GeneratedMessage<QueryRequestMessage, QueryRequestMessage.Builder> {
    private QueryRequestMessage() { }
    private static readonly QueryRequestMessage defaultInstance = new QueryRequestMessage().MakeReadOnly();
    private static readonly string[] _queryRequestMessageFieldNames = new string[] { "attachments", "header", "payload" };
    private static readonly uint[] _queryRequestMessageFieldTags = new uint[] { 26, 10, 18 };
    public static QueryRequestMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QueryRequestMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override QueryRequestMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_QueryRequestMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QueryRequestMessage, QueryRequestMessage.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_QueryRequestMessage__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Request : pb::GeneratedMessage<Request, Request.Builder> {
        private Request() { }
        private static readonly Request defaultInstance = new Request().MakeReadOnly();
        private static readonly string[] _requestFieldNames = new string[] { "alias", "arguments", "attachments", "command", "id", "target" };
        private static readonly uint[] _requestFieldTags = new uint[] { 26, 34, 138, 18, 8, 58 };
        public static Request DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Request DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Request ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_QueryRequestMessage_Request__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Request, Request.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_QueryRequestMessage_Request__FieldAccessorTable; }
        }
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private int id_;
        public bool HasId {
          get { return hasId; }
        }
        public int Id {
          get { return id_; }
        }
        
        public const int TargetFieldNumber = 7;
        private bool hasTarget;
        private string target_ = "";
        public bool HasTarget {
          get { return hasTarget; }
        }
        public string Target {
          get { return target_; }
        }
        
        public const int CommandFieldNumber = 2;
        private bool hasCommand;
        private string command_ = "";
        public bool HasCommand {
          get { return hasCommand; }
        }
        public string Command {
          get { return command_; }
        }
        
        public const int AliasFieldNumber = 3;
        private bool hasAlias;
        private string alias_ = "";
        public bool HasAlias {
          get { return hasAlias; }
        }
        public string Alias {
          get { return alias_; }
        }
        
        public const int ArgumentsFieldNumber = 4;
        private pbc::PopsicleList<string> arguments_ = new pbc::PopsicleList<string>();
        public scg::IList<string> ArgumentsList {
          get { return pbc::Lists.AsReadOnly(arguments_); }
        }
        public int ArgumentsCount {
          get { return arguments_.Count; }
        }
        public string GetArguments(int index) {
          return arguments_[index];
        }
        
        public const int AttachmentsFieldNumber = 17;
        private pbc::PopsicleList<global::Plugin.Common.Types.Attachment> attachments_ = new pbc::PopsicleList<global::Plugin.Common.Types.Attachment>();
        public scg::IList<global::Plugin.Common.Types.Attachment> AttachmentsList {
          get { return attachments_; }
        }
        public int AttachmentsCount {
          get { return attachments_.Count; }
        }
        public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
          return attachments_[index];
        }
        
        public override bool IsInitialized {
          get {
            if (!hasCommand) return false;
            foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
              if (!element.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _requestFieldNames;
          if (hasId) {
            output.WriteInt32(1, field_names[4], Id);
          }
          if (hasCommand) {
            output.WriteString(2, field_names[3], Command);
          }
          if (hasAlias) {
            output.WriteString(3, field_names[0], Alias);
          }
          if (arguments_.Count > 0) {
            output.WriteStringArray(4, field_names[1], arguments_);
          }
          if (hasTarget) {
            output.WriteString(7, field_names[5], Target);
          }
          if (attachments_.Count > 0) {
            output.WriteMessageArray(17, field_names[2], attachments_);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasId) {
              size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
            }
            if (hasTarget) {
              size += pb::CodedOutputStream.ComputeStringSize(7, Target);
            }
            if (hasCommand) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Command);
            }
            if (hasAlias) {
              size += pb::CodedOutputStream.ComputeStringSize(3, Alias);
            }
            {
              int dataSize = 0;
              foreach (string element in ArgumentsList) {
                dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
              }
              size += dataSize;
              size += 1 * arguments_.Count;
            }
            foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
              size += pb::CodedOutputStream.ComputeMessageSize(17, element);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Request ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Request ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Request ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Request ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Request ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Request ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Request ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Request ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Request ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Request ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Request MakeReadOnly() {
          arguments_.MakeReadOnly();
          attachments_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Request prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Request, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Request cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Request result;
          
          private Request PrepareBuilder() {
            if (resultIsReadOnly) {
              Request original = result;
              result = new Request();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Request MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.QueryRequestMessage.Types.Request.Descriptor; }
          }
          
          public override Request DefaultInstanceForType {
            get { return global::Plugin.QueryRequestMessage.Types.Request.DefaultInstance; }
          }
          
          public override Request BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Request) {
              return MergeFrom((Request) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Request other) {
            if (other == global::Plugin.QueryRequestMessage.Types.Request.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasTarget) {
              Target = other.Target;
            }
            if (other.HasCommand) {
              Command = other.Command;
            }
            if (other.HasAlias) {
              Alias = other.Alias;
            }
            if (other.arguments_.Count != 0) {
              result.arguments_.Add(other.arguments_);
            }
            if (other.attachments_.Count != 0) {
              result.attachments_.Add(other.attachments_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_requestFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _requestFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasId = input.ReadInt32(ref result.id_);
                  break;
                }
                case 18: {
                  result.hasCommand = input.ReadString(ref result.command_);
                  break;
                }
                case 26: {
                  result.hasAlias = input.ReadString(ref result.alias_);
                  break;
                }
                case 34: {
                  input.ReadStringArray(tag, field_name, result.arguments_);
                  break;
                }
                case 58: {
                  result.hasTarget = input.ReadString(ref result.target_);
                  break;
                }
                case 138: {
                  input.ReadMessageArray(tag, field_name, result.attachments_, global::Plugin.Common.Types.Attachment.DefaultInstance, extensionRegistry);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public int Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(int value) {
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = 0;
            return this;
          }
          
          public bool HasTarget {
            get { return result.hasTarget; }
          }
          public string Target {
            get { return result.Target; }
            set { SetTarget(value); }
          }
          public Builder SetTarget(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasTarget = true;
            result.target_ = value;
            return this;
          }
          public Builder ClearTarget() {
            PrepareBuilder();
            result.hasTarget = false;
            result.target_ = "";
            return this;
          }
          
          public bool HasCommand {
            get { return result.hasCommand; }
          }
          public string Command {
            get { return result.Command; }
            set { SetCommand(value); }
          }
          public Builder SetCommand(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasCommand = true;
            result.command_ = value;
            return this;
          }
          public Builder ClearCommand() {
            PrepareBuilder();
            result.hasCommand = false;
            result.command_ = "";
            return this;
          }
          
          public bool HasAlias {
            get { return result.hasAlias; }
          }
          public string Alias {
            get { return result.Alias; }
            set { SetAlias(value); }
          }
          public Builder SetAlias(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasAlias = true;
            result.alias_ = value;
            return this;
          }
          public Builder ClearAlias() {
            PrepareBuilder();
            result.hasAlias = false;
            result.alias_ = "";
            return this;
          }
          
          public pbc::IPopsicleList<string> ArgumentsList {
            get { return PrepareBuilder().arguments_; }
          }
          public int ArgumentsCount {
            get { return result.ArgumentsCount; }
          }
          public string GetArguments(int index) {
            return result.GetArguments(index);
          }
          public Builder SetArguments(int index, string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.arguments_[index] = value;
            return this;
          }
          public Builder AddArguments(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.arguments_.Add(value);
            return this;
          }
          public Builder AddRangeArguments(scg::IEnumerable<string> values) {
            PrepareBuilder();
            result.arguments_.Add(values);
            return this;
          }
          public Builder ClearArguments() {
            PrepareBuilder();
            result.arguments_.Clear();
            return this;
          }
          
          public pbc::IPopsicleList<global::Plugin.Common.Types.Attachment> AttachmentsList {
            get { return PrepareBuilder().attachments_; }
          }
          public int AttachmentsCount {
            get { return result.AttachmentsCount; }
          }
          public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
            return result.GetAttachments(index);
          }
          public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.attachments_[index] = value;
            return this;
          }
          public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.attachments_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddAttachments(global::Plugin.Common.Types.Attachment value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.attachments_.Add(value);
            return this;
          }
          public Builder AddAttachments(global::Plugin.Common.Types.Attachment.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.attachments_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeAttachments(scg::IEnumerable<global::Plugin.Common.Types.Attachment> values) {
            PrepareBuilder();
            result.attachments_.Add(values);
            return this;
          }
          public Builder ClearAttachments() {
            PrepareBuilder();
            result.attachments_.Clear();
            return this;
          }
        }
        static Request() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::Plugin.Common.Types.Header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::Plugin.Common.Types.Header Header {
      get { return header_ ?? global::Plugin.Common.Types.Header.DefaultInstance; }
    }
    
    public const int PayloadFieldNumber = 2;
    private pbc::PopsicleList<global::Plugin.QueryRequestMessage.Types.Request> payload_ = new pbc::PopsicleList<global::Plugin.QueryRequestMessage.Types.Request>();
    public scg::IList<global::Plugin.QueryRequestMessage.Types.Request> PayloadList {
      get { return payload_; }
    }
    public int PayloadCount {
      get { return payload_.Count; }
    }
    public global::Plugin.QueryRequestMessage.Types.Request GetPayload(int index) {
      return payload_[index];
    }
    
    public const int AttachmentsFieldNumber = 3;
    private pbc::PopsicleList<global::Plugin.Common.Types.Attachment> attachments_ = new pbc::PopsicleList<global::Plugin.Common.Types.Attachment>();
    public scg::IList<global::Plugin.Common.Types.Attachment> AttachmentsList {
      get { return attachments_; }
    }
    public int AttachmentsCount {
      get { return attachments_.Count; }
    }
    public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
      return attachments_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (HasHeader) {
          if (!Header.IsInitialized) return false;
        }
        foreach (global::Plugin.QueryRequestMessage.Types.Request element in PayloadList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _queryRequestMessageFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[1], Header);
      }
      if (payload_.Count > 0) {
        output.WriteMessageArray(2, field_names[2], payload_);
      }
      if (attachments_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], attachments_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
        }
        foreach (global::Plugin.QueryRequestMessage.Types.Request element in PayloadList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static QueryRequestMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QueryRequestMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QueryRequestMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QueryRequestMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QueryRequestMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QueryRequestMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QueryRequestMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QueryRequestMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QueryRequestMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QueryRequestMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private QueryRequestMessage MakeReadOnly() {
      payload_.MakeReadOnly();
      attachments_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QueryRequestMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<QueryRequestMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(QueryRequestMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private QueryRequestMessage result;
      
      private QueryRequestMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          QueryRequestMessage original = result;
          result = new QueryRequestMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override QueryRequestMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.QueryRequestMessage.Descriptor; }
      }
      
      public override QueryRequestMessage DefaultInstanceForType {
        get { return global::Plugin.QueryRequestMessage.DefaultInstance; }
      }
      
      public override QueryRequestMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QueryRequestMessage) {
          return MergeFrom((QueryRequestMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QueryRequestMessage other) {
        if (other == global::Plugin.QueryRequestMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.payload_.Count != 0) {
          result.payload_.Add(other.payload_);
        }
        if (other.attachments_.Count != 0) {
          result.attachments_.Add(other.attachments_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_queryRequestMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _queryRequestMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Plugin.Common.Types.Header.Builder subBuilder = global::Plugin.Common.Types.Header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.payload_, global::Plugin.QueryRequestMessage.Types.Request.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.attachments_, global::Plugin.Common.Types.Attachment.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::Plugin.Common.Types.Header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::Plugin.Common.Types.Header.DefaultInstance) {
            result.header_ = global::Plugin.Common.Types.Header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.QueryRequestMessage.Types.Request> PayloadList {
        get { return PrepareBuilder().payload_; }
      }
      public int PayloadCount {
        get { return result.PayloadCount; }
      }
      public global::Plugin.QueryRequestMessage.Types.Request GetPayload(int index) {
        return result.GetPayload(index);
      }
      public Builder SetPayload(int index, global::Plugin.QueryRequestMessage.Types.Request value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_[index] = value;
        return this;
      }
      public Builder SetPayload(int index, global::Plugin.QueryRequestMessage.Types.Request.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPayload(global::Plugin.QueryRequestMessage.Types.Request value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_.Add(value);
        return this;
      }
      public Builder AddPayload(global::Plugin.QueryRequestMessage.Types.Request.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePayload(scg::IEnumerable<global::Plugin.QueryRequestMessage.Types.Request> values) {
        PrepareBuilder();
        result.payload_.Add(values);
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.payload_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.Common.Types.Attachment> AttachmentsList {
        get { return PrepareBuilder().attachments_; }
      }
      public int AttachmentsCount {
        get { return result.AttachmentsCount; }
      }
      public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
        return result.GetAttachments(index);
      }
      public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachments_[index] = value;
        return this;
      }
      public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachments_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttachments(global::Plugin.Common.Types.Attachment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachments_.Add(value);
        return this;
      }
      public Builder AddAttachments(global::Plugin.Common.Types.Attachment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachments_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttachments(scg::IEnumerable<global::Plugin.Common.Types.Attachment> values) {
        PrepareBuilder();
        result.attachments_.Add(values);
        return this;
      }
      public Builder ClearAttachments() {
        PrepareBuilder();
        result.attachments_.Clear();
        return this;
      }
    }
    static QueryRequestMessage() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class QueryResponseMessage : pb::GeneratedMessage<QueryResponseMessage, QueryResponseMessage.Builder> {
    private QueryResponseMessage() { }
    private static readonly QueryResponseMessage defaultInstance = new QueryResponseMessage().MakeReadOnly();
    private static readonly string[] _queryResponseMessageFieldNames = new string[] { "attachments", "header", "payload" };
    private static readonly uint[] _queryResponseMessageFieldTags = new uint[] { 26, 10, 18 };
    public static QueryResponseMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QueryResponseMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override QueryResponseMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_QueryResponseMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QueryResponseMessage, QueryResponseMessage.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_QueryResponseMessage__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Response : pb::GeneratedMessage<Response, Response.Builder> {
        private Response() { }
        private static readonly Response defaultInstance = new Response().MakeReadOnly();
        private static readonly string[] _responseFieldNames = new string[] { "alias", "arguments", "attachments", "command", "data", "id", "lines", "result", "source" };
        private static readonly uint[] _responseFieldTags = new uint[] { 26, 130, 138, 18, 42, 8, 74, 32, 58 };
        public static Response DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Response DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Response ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_QueryResponseMessage_Response__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Response, Response.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_QueryResponseMessage_Response__FieldAccessorTable; }
        }
        
        #region Nested types
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static partial class Types {
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Line : pb::GeneratedMessage<Line, Line.Builder> {
            private Line() { }
            private static readonly Line defaultInstance = new Line().MakeReadOnly();
            private static readonly string[] _lineFieldNames = new string[] { "message", "perf" };
            private static readonly uint[] _lineFieldTags = new uint[] { 10, 18 };
            public static Line DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Line DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Line ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_QueryResponseMessage_Response_Line__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Line, Line.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_QueryResponseMessage_Response_Line__FieldAccessorTable; }
            }
            
            public const int MessageFieldNumber = 1;
            private bool hasMessage;
            private string message_ = "";
            public bool HasMessage {
              get { return hasMessage; }
            }
            public string Message {
              get { return message_; }
            }
            
            public const int PerfFieldNumber = 2;
            private pbc::PopsicleList<global::Plugin.Common.Types.PerformanceData> perf_ = new pbc::PopsicleList<global::Plugin.Common.Types.PerformanceData>();
            public scg::IList<global::Plugin.Common.Types.PerformanceData> PerfList {
              get { return perf_; }
            }
            public int PerfCount {
              get { return perf_.Count; }
            }
            public global::Plugin.Common.Types.PerformanceData GetPerf(int index) {
              return perf_[index];
            }
            
            public override bool IsInitialized {
              get {
                if (!hasMessage) return false;
                foreach (global::Plugin.Common.Types.PerformanceData element in PerfList) {
                  if (!element.IsInitialized) return false;
                }
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _lineFieldNames;
              if (hasMessage) {
                output.WriteString(1, field_names[0], Message);
              }
              if (perf_.Count > 0) {
                output.WriteMessageArray(2, field_names[1], perf_);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                if (hasMessage) {
                  size += pb::CodedOutputStream.ComputeStringSize(1, Message);
                }
                foreach (global::Plugin.Common.Types.PerformanceData element in PerfList) {
                  size += pb::CodedOutputStream.ComputeMessageSize(2, element);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static Line ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Line ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Line ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Line ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Line ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Line ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Line ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Line ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Line ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Line ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Line MakeReadOnly() {
              perf_.MakeReadOnly();
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Line prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Line, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Line cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Line result;
              
              private Line PrepareBuilder() {
                if (resultIsReadOnly) {
                  Line original = result;
                  result = new Line();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Line MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.QueryResponseMessage.Types.Response.Types.Line.Descriptor; }
              }
              
              public override Line DefaultInstanceForType {
                get { return global::Plugin.QueryResponseMessage.Types.Response.Types.Line.DefaultInstance; }
              }
              
              public override Line BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Line) {
                  return MergeFrom((Line) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Line other) {
                if (other == global::Plugin.QueryResponseMessage.Types.Response.Types.Line.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasMessage) {
                  Message = other.Message;
                }
                if (other.perf_.Count != 0) {
                  result.perf_.Add(other.perf_);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_lineFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _lineFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 10: {
                      result.hasMessage = input.ReadString(ref result.message_);
                      break;
                    }
                    case 18: {
                      input.ReadMessageArray(tag, field_name, result.perf_, global::Plugin.Common.Types.PerformanceData.DefaultInstance, extensionRegistry);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasMessage {
                get { return result.hasMessage; }
              }
              public string Message {
                get { return result.Message; }
                set { SetMessage(value); }
              }
              public Builder SetMessage(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasMessage = true;
                result.message_ = value;
                return this;
              }
              public Builder ClearMessage() {
                PrepareBuilder();
                result.hasMessage = false;
                result.message_ = "";
                return this;
              }
              
              public pbc::IPopsicleList<global::Plugin.Common.Types.PerformanceData> PerfList {
                get { return PrepareBuilder().perf_; }
              }
              public int PerfCount {
                get { return result.PerfCount; }
              }
              public global::Plugin.Common.Types.PerformanceData GetPerf(int index) {
                return result.GetPerf(index);
              }
              public Builder SetPerf(int index, global::Plugin.Common.Types.PerformanceData value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.perf_[index] = value;
                return this;
              }
              public Builder SetPerf(int index, global::Plugin.Common.Types.PerformanceData.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.perf_[index] = builderForValue.Build();
                return this;
              }
              public Builder AddPerf(global::Plugin.Common.Types.PerformanceData value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.perf_.Add(value);
                return this;
              }
              public Builder AddPerf(global::Plugin.Common.Types.PerformanceData.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.perf_.Add(builderForValue.Build());
                return this;
              }
              public Builder AddRangePerf(scg::IEnumerable<global::Plugin.Common.Types.PerformanceData> values) {
                PrepareBuilder();
                result.perf_.Add(values);
                return this;
              }
              public Builder ClearPerf() {
                PrepareBuilder();
                result.perf_.Clear();
                return this;
              }
            }
            static Line() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
        }
        #endregion
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private int id_;
        public bool HasId {
          get { return hasId; }
        }
        public int Id {
          get { return id_; }
        }
        
        public const int SourceFieldNumber = 7;
        private bool hasSource;
        private string source_ = "";
        public bool HasSource {
          get { return hasSource; }
        }
        public string Source {
          get { return source_; }
        }
        
        public const int CommandFieldNumber = 2;
        private bool hasCommand;
        private string command_ = "";
        public bool HasCommand {
          get { return hasCommand; }
        }
        public string Command {
          get { return command_; }
        }
        
        public const int AliasFieldNumber = 3;
        private bool hasAlias;
        private string alias_ = "";
        public bool HasAlias {
          get { return hasAlias; }
        }
        public string Alias {
          get { return alias_; }
        }
        
        public const int ArgumentsFieldNumber = 16;
        private pbc::PopsicleList<string> arguments_ = new pbc::PopsicleList<string>();
        public scg::IList<string> ArgumentsList {
          get { return pbc::Lists.AsReadOnly(arguments_); }
        }
        public int ArgumentsCount {
          get { return arguments_.Count; }
        }
        public string GetArguments(int index) {
          return arguments_[index];
        }
        
        public const int ResultFieldNumber = 4;
        private bool hasResult;
        private global::Plugin.Common.Types.ResultCode result_ = global::Plugin.Common.Types.ResultCode.OK;
        public bool HasResult {
          get { return hasResult; }
        }
        public global::Plugin.Common.Types.ResultCode Result {
          get { return result_; }
        }
        
        public const int LinesFieldNumber = 9;
        private pbc::PopsicleList<global::Plugin.QueryResponseMessage.Types.Response.Types.Line> lines_ = new pbc::PopsicleList<global::Plugin.QueryResponseMessage.Types.Response.Types.Line>();
        public scg::IList<global::Plugin.QueryResponseMessage.Types.Response.Types.Line> LinesList {
          get { return lines_; }
        }
        public int LinesCount {
          get { return lines_.Count; }
        }
        public global::Plugin.QueryResponseMessage.Types.Response.Types.Line GetLines(int index) {
          return lines_[index];
        }
        
        public const int AttachmentsFieldNumber = 17;
        private pbc::PopsicleList<global::Plugin.Common.Types.Attachment> attachments_ = new pbc::PopsicleList<global::Plugin.Common.Types.Attachment>();
        public scg::IList<global::Plugin.Common.Types.Attachment> AttachmentsList {
          get { return attachments_; }
        }
        public int AttachmentsCount {
          get { return attachments_.Count; }
        }
        public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
          return attachments_[index];
        }
        
        public const int DataFieldNumber = 5;
        private bool hasData;
        private pb::ByteString data_ = pb::ByteString.Empty;
        public bool HasData {
          get { return hasData; }
        }
        public pb::ByteString Data {
          get { return data_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasCommand) return false;
            if (!hasResult) return false;
            foreach (global::Plugin.QueryResponseMessage.Types.Response.Types.Line element in LinesList) {
              if (!element.IsInitialized) return false;
            }
            foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
              if (!element.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _responseFieldNames;
          if (hasId) {
            output.WriteInt32(1, field_names[5], Id);
          }
          if (hasCommand) {
            output.WriteString(2, field_names[3], Command);
          }
          if (hasAlias) {
            output.WriteString(3, field_names[0], Alias);
          }
          if (hasResult) {
            output.WriteEnum(4, field_names[7], (int) Result, Result);
          }
          if (hasData) {
            output.WriteBytes(5, field_names[4], Data);
          }
          if (hasSource) {
            output.WriteString(7, field_names[8], Source);
          }
          if (lines_.Count > 0) {
            output.WriteMessageArray(9, field_names[6], lines_);
          }
          if (arguments_.Count > 0) {
            output.WriteStringArray(16, field_names[1], arguments_);
          }
          if (attachments_.Count > 0) {
            output.WriteMessageArray(17, field_names[2], attachments_);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasId) {
              size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
            }
            if (hasSource) {
              size += pb::CodedOutputStream.ComputeStringSize(7, Source);
            }
            if (hasCommand) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Command);
            }
            if (hasAlias) {
              size += pb::CodedOutputStream.ComputeStringSize(3, Alias);
            }
            {
              int dataSize = 0;
              foreach (string element in ArgumentsList) {
                dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
              }
              size += dataSize;
              size += 2 * arguments_.Count;
            }
            if (hasResult) {
              size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Result);
            }
            foreach (global::Plugin.QueryResponseMessage.Types.Response.Types.Line element in LinesList) {
              size += pb::CodedOutputStream.ComputeMessageSize(9, element);
            }
            foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
              size += pb::CodedOutputStream.ComputeMessageSize(17, element);
            }
            if (hasData) {
              size += pb::CodedOutputStream.ComputeBytesSize(5, Data);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Response ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Response ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Response ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Response ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Response ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Response MakeReadOnly() {
          arguments_.MakeReadOnly();
          lines_.MakeReadOnly();
          attachments_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Response prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Response, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Response cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Response result;
          
          private Response PrepareBuilder() {
            if (resultIsReadOnly) {
              Response original = result;
              result = new Response();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Response MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.QueryResponseMessage.Types.Response.Descriptor; }
          }
          
          public override Response DefaultInstanceForType {
            get { return global::Plugin.QueryResponseMessage.Types.Response.DefaultInstance; }
          }
          
          public override Response BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Response) {
              return MergeFrom((Response) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Response other) {
            if (other == global::Plugin.QueryResponseMessage.Types.Response.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasSource) {
              Source = other.Source;
            }
            if (other.HasCommand) {
              Command = other.Command;
            }
            if (other.HasAlias) {
              Alias = other.Alias;
            }
            if (other.arguments_.Count != 0) {
              result.arguments_.Add(other.arguments_);
            }
            if (other.HasResult) {
              Result = other.Result;
            }
            if (other.lines_.Count != 0) {
              result.lines_.Add(other.lines_);
            }
            if (other.attachments_.Count != 0) {
              result.attachments_.Add(other.attachments_);
            }
            if (other.HasData) {
              Data = other.Data;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_responseFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _responseFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasId = input.ReadInt32(ref result.id_);
                  break;
                }
                case 18: {
                  result.hasCommand = input.ReadString(ref result.command_);
                  break;
                }
                case 26: {
                  result.hasAlias = input.ReadString(ref result.alias_);
                  break;
                }
                case 32: {
                  object unknown;
                  if(input.ReadEnum(ref result.result_, out unknown)) {
                    result.hasResult = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(4, (ulong)(int)unknown);
                  }
                  break;
                }
                case 42: {
                  result.hasData = input.ReadBytes(ref result.data_);
                  break;
                }
                case 58: {
                  result.hasSource = input.ReadString(ref result.source_);
                  break;
                }
                case 74: {
                  input.ReadMessageArray(tag, field_name, result.lines_, global::Plugin.QueryResponseMessage.Types.Response.Types.Line.DefaultInstance, extensionRegistry);
                  break;
                }
                case 130: {
                  input.ReadStringArray(tag, field_name, result.arguments_);
                  break;
                }
                case 138: {
                  input.ReadMessageArray(tag, field_name, result.attachments_, global::Plugin.Common.Types.Attachment.DefaultInstance, extensionRegistry);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public int Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(int value) {
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = 0;
            return this;
          }
          
          public bool HasSource {
            get { return result.hasSource; }
          }
          public string Source {
            get { return result.Source; }
            set { SetSource(value); }
          }
          public Builder SetSource(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasSource = true;
            result.source_ = value;
            return this;
          }
          public Builder ClearSource() {
            PrepareBuilder();
            result.hasSource = false;
            result.source_ = "";
            return this;
          }
          
          public bool HasCommand {
            get { return result.hasCommand; }
          }
          public string Command {
            get { return result.Command; }
            set { SetCommand(value); }
          }
          public Builder SetCommand(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasCommand = true;
            result.command_ = value;
            return this;
          }
          public Builder ClearCommand() {
            PrepareBuilder();
            result.hasCommand = false;
            result.command_ = "";
            return this;
          }
          
          public bool HasAlias {
            get { return result.hasAlias; }
          }
          public string Alias {
            get { return result.Alias; }
            set { SetAlias(value); }
          }
          public Builder SetAlias(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasAlias = true;
            result.alias_ = value;
            return this;
          }
          public Builder ClearAlias() {
            PrepareBuilder();
            result.hasAlias = false;
            result.alias_ = "";
            return this;
          }
          
          public pbc::IPopsicleList<string> ArgumentsList {
            get { return PrepareBuilder().arguments_; }
          }
          public int ArgumentsCount {
            get { return result.ArgumentsCount; }
          }
          public string GetArguments(int index) {
            return result.GetArguments(index);
          }
          public Builder SetArguments(int index, string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.arguments_[index] = value;
            return this;
          }
          public Builder AddArguments(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.arguments_.Add(value);
            return this;
          }
          public Builder AddRangeArguments(scg::IEnumerable<string> values) {
            PrepareBuilder();
            result.arguments_.Add(values);
            return this;
          }
          public Builder ClearArguments() {
            PrepareBuilder();
            result.arguments_.Clear();
            return this;
          }
          
          public bool HasResult {
           get { return result.hasResult; }
          }
          public global::Plugin.Common.Types.ResultCode Result {
            get { return result.Result; }
            set { SetResult(value); }
          }
          public Builder SetResult(global::Plugin.Common.Types.ResultCode value) {
            PrepareBuilder();
            result.hasResult = true;
            result.result_ = value;
            return this;
          }
          public Builder ClearResult() {
            PrepareBuilder();
            result.hasResult = false;
            result.result_ = global::Plugin.Common.Types.ResultCode.OK;
            return this;
          }
          
          public pbc::IPopsicleList<global::Plugin.QueryResponseMessage.Types.Response.Types.Line> LinesList {
            get { return PrepareBuilder().lines_; }
          }
          public int LinesCount {
            get { return result.LinesCount; }
          }
          public global::Plugin.QueryResponseMessage.Types.Response.Types.Line GetLines(int index) {
            return result.GetLines(index);
          }
          public Builder SetLines(int index, global::Plugin.QueryResponseMessage.Types.Response.Types.Line value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.lines_[index] = value;
            return this;
          }
          public Builder SetLines(int index, global::Plugin.QueryResponseMessage.Types.Response.Types.Line.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.lines_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddLines(global::Plugin.QueryResponseMessage.Types.Response.Types.Line value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.lines_.Add(value);
            return this;
          }
          public Builder AddLines(global::Plugin.QueryResponseMessage.Types.Response.Types.Line.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.lines_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeLines(scg::IEnumerable<global::Plugin.QueryResponseMessage.Types.Response.Types.Line> values) {
            PrepareBuilder();
            result.lines_.Add(values);
            return this;
          }
          public Builder ClearLines() {
            PrepareBuilder();
            result.lines_.Clear();
            return this;
          }
          
          public pbc::IPopsicleList<global::Plugin.Common.Types.Attachment> AttachmentsList {
            get { return PrepareBuilder().attachments_; }
          }
          public int AttachmentsCount {
            get { return result.AttachmentsCount; }
          }
          public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
            return result.GetAttachments(index);
          }
          public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.attachments_[index] = value;
            return this;
          }
          public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.attachments_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddAttachments(global::Plugin.Common.Types.Attachment value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.attachments_.Add(value);
            return this;
          }
          public Builder AddAttachments(global::Plugin.Common.Types.Attachment.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.attachments_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeAttachments(scg::IEnumerable<global::Plugin.Common.Types.Attachment> values) {
            PrepareBuilder();
            result.attachments_.Add(values);
            return this;
          }
          public Builder ClearAttachments() {
            PrepareBuilder();
            result.attachments_.Clear();
            return this;
          }
          
          public bool HasData {
            get { return result.hasData; }
          }
          public pb::ByteString Data {
            get { return result.Data; }
            set { SetData(value); }
          }
          public Builder SetData(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasData = true;
            result.data_ = value;
            return this;
          }
          public Builder ClearData() {
            PrepareBuilder();
            result.hasData = false;
            result.data_ = pb::ByteString.Empty;
            return this;
          }
        }
        static Response() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::Plugin.Common.Types.Header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::Plugin.Common.Types.Header Header {
      get { return header_ ?? global::Plugin.Common.Types.Header.DefaultInstance; }
    }
    
    public const int PayloadFieldNumber = 2;
    private pbc::PopsicleList<global::Plugin.QueryResponseMessage.Types.Response> payload_ = new pbc::PopsicleList<global::Plugin.QueryResponseMessage.Types.Response>();
    public scg::IList<global::Plugin.QueryResponseMessage.Types.Response> PayloadList {
      get { return payload_; }
    }
    public int PayloadCount {
      get { return payload_.Count; }
    }
    public global::Plugin.QueryResponseMessage.Types.Response GetPayload(int index) {
      return payload_[index];
    }
    
    public const int AttachmentsFieldNumber = 3;
    private pbc::PopsicleList<global::Plugin.Common.Types.Attachment> attachments_ = new pbc::PopsicleList<global::Plugin.Common.Types.Attachment>();
    public scg::IList<global::Plugin.Common.Types.Attachment> AttachmentsList {
      get { return attachments_; }
    }
    public int AttachmentsCount {
      get { return attachments_.Count; }
    }
    public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
      return attachments_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (HasHeader) {
          if (!Header.IsInitialized) return false;
        }
        foreach (global::Plugin.QueryResponseMessage.Types.Response element in PayloadList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _queryResponseMessageFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[1], Header);
      }
      if (payload_.Count > 0) {
        output.WriteMessageArray(2, field_names[2], payload_);
      }
      if (attachments_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], attachments_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
        }
        foreach (global::Plugin.QueryResponseMessage.Types.Response element in PayloadList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static QueryResponseMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QueryResponseMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QueryResponseMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QueryResponseMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QueryResponseMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QueryResponseMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QueryResponseMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QueryResponseMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QueryResponseMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QueryResponseMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private QueryResponseMessage MakeReadOnly() {
      payload_.MakeReadOnly();
      attachments_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QueryResponseMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<QueryResponseMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(QueryResponseMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private QueryResponseMessage result;
      
      private QueryResponseMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          QueryResponseMessage original = result;
          result = new QueryResponseMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override QueryResponseMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.QueryResponseMessage.Descriptor; }
      }
      
      public override QueryResponseMessage DefaultInstanceForType {
        get { return global::Plugin.QueryResponseMessage.DefaultInstance; }
      }
      
      public override QueryResponseMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QueryResponseMessage) {
          return MergeFrom((QueryResponseMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QueryResponseMessage other) {
        if (other == global::Plugin.QueryResponseMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.payload_.Count != 0) {
          result.payload_.Add(other.payload_);
        }
        if (other.attachments_.Count != 0) {
          result.attachments_.Add(other.attachments_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_queryResponseMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _queryResponseMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Plugin.Common.Types.Header.Builder subBuilder = global::Plugin.Common.Types.Header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.payload_, global::Plugin.QueryResponseMessage.Types.Response.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.attachments_, global::Plugin.Common.Types.Attachment.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::Plugin.Common.Types.Header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::Plugin.Common.Types.Header.DefaultInstance) {
            result.header_ = global::Plugin.Common.Types.Header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.QueryResponseMessage.Types.Response> PayloadList {
        get { return PrepareBuilder().payload_; }
      }
      public int PayloadCount {
        get { return result.PayloadCount; }
      }
      public global::Plugin.QueryResponseMessage.Types.Response GetPayload(int index) {
        return result.GetPayload(index);
      }
      public Builder SetPayload(int index, global::Plugin.QueryResponseMessage.Types.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_[index] = value;
        return this;
      }
      public Builder SetPayload(int index, global::Plugin.QueryResponseMessage.Types.Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPayload(global::Plugin.QueryResponseMessage.Types.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_.Add(value);
        return this;
      }
      public Builder AddPayload(global::Plugin.QueryResponseMessage.Types.Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePayload(scg::IEnumerable<global::Plugin.QueryResponseMessage.Types.Response> values) {
        PrepareBuilder();
        result.payload_.Add(values);
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.payload_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.Common.Types.Attachment> AttachmentsList {
        get { return PrepareBuilder().attachments_; }
      }
      public int AttachmentsCount {
        get { return result.AttachmentsCount; }
      }
      public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
        return result.GetAttachments(index);
      }
      public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachments_[index] = value;
        return this;
      }
      public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachments_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttachments(global::Plugin.Common.Types.Attachment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachments_.Add(value);
        return this;
      }
      public Builder AddAttachments(global::Plugin.Common.Types.Attachment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachments_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttachments(scg::IEnumerable<global::Plugin.Common.Types.Attachment> values) {
        PrepareBuilder();
        result.attachments_.Add(values);
        return this;
      }
      public Builder ClearAttachments() {
        PrepareBuilder();
        result.attachments_.Clear();
        return this;
      }
    }
    static QueryResponseMessage() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ExecuteRequestMessage : pb::GeneratedMessage<ExecuteRequestMessage, ExecuteRequestMessage.Builder> {
    private ExecuteRequestMessage() { }
    private static readonly ExecuteRequestMessage defaultInstance = new ExecuteRequestMessage().MakeReadOnly();
    private static readonly string[] _executeRequestMessageFieldNames = new string[] { "attachments", "header", "payload" };
    private static readonly uint[] _executeRequestMessageFieldTags = new uint[] { 26, 10, 18 };
    public static ExecuteRequestMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ExecuteRequestMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ExecuteRequestMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_ExecuteRequestMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ExecuteRequestMessage, ExecuteRequestMessage.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_ExecuteRequestMessage__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Request : pb::GeneratedMessage<Request, Request.Builder> {
        private Request() { }
        private static readonly Request defaultInstance = new Request().MakeReadOnly();
        private static readonly string[] _requestFieldNames = new string[] { "arguments", "attachments", "command", "id" };
        private static readonly uint[] _requestFieldTags = new uint[] { 26, 138, 18, 8 };
        public static Request DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Request DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Request ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_ExecuteRequestMessage_Request__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Request, Request.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_ExecuteRequestMessage_Request__FieldAccessorTable; }
        }
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private int id_;
        public bool HasId {
          get { return hasId; }
        }
        public int Id {
          get { return id_; }
        }
        
        public const int CommandFieldNumber = 2;
        private bool hasCommand;
        private string command_ = "";
        public bool HasCommand {
          get { return hasCommand; }
        }
        public string Command {
          get { return command_; }
        }
        
        public const int ArgumentsFieldNumber = 3;
        private pbc::PopsicleList<string> arguments_ = new pbc::PopsicleList<string>();
        public scg::IList<string> ArgumentsList {
          get { return pbc::Lists.AsReadOnly(arguments_); }
        }
        public int ArgumentsCount {
          get { return arguments_.Count; }
        }
        public string GetArguments(int index) {
          return arguments_[index];
        }
        
        public const int AttachmentsFieldNumber = 17;
        private pbc::PopsicleList<global::Plugin.Common.Types.Attachment> attachments_ = new pbc::PopsicleList<global::Plugin.Common.Types.Attachment>();
        public scg::IList<global::Plugin.Common.Types.Attachment> AttachmentsList {
          get { return attachments_; }
        }
        public int AttachmentsCount {
          get { return attachments_.Count; }
        }
        public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
          return attachments_[index];
        }
        
        public override bool IsInitialized {
          get {
            if (!hasCommand) return false;
            foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
              if (!element.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _requestFieldNames;
          if (hasId) {
            output.WriteInt32(1, field_names[3], Id);
          }
          if (hasCommand) {
            output.WriteString(2, field_names[2], Command);
          }
          if (arguments_.Count > 0) {
            output.WriteStringArray(3, field_names[0], arguments_);
          }
          if (attachments_.Count > 0) {
            output.WriteMessageArray(17, field_names[1], attachments_);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasId) {
              size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
            }
            if (hasCommand) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Command);
            }
            {
              int dataSize = 0;
              foreach (string element in ArgumentsList) {
                dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
              }
              size += dataSize;
              size += 1 * arguments_.Count;
            }
            foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
              size += pb::CodedOutputStream.ComputeMessageSize(17, element);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Request ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Request ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Request ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Request ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Request ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Request ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Request ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Request ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Request ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Request ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Request MakeReadOnly() {
          arguments_.MakeReadOnly();
          attachments_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Request prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Request, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Request cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Request result;
          
          private Request PrepareBuilder() {
            if (resultIsReadOnly) {
              Request original = result;
              result = new Request();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Request MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.ExecuteRequestMessage.Types.Request.Descriptor; }
          }
          
          public override Request DefaultInstanceForType {
            get { return global::Plugin.ExecuteRequestMessage.Types.Request.DefaultInstance; }
          }
          
          public override Request BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Request) {
              return MergeFrom((Request) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Request other) {
            if (other == global::Plugin.ExecuteRequestMessage.Types.Request.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasCommand) {
              Command = other.Command;
            }
            if (other.arguments_.Count != 0) {
              result.arguments_.Add(other.arguments_);
            }
            if (other.attachments_.Count != 0) {
              result.attachments_.Add(other.attachments_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_requestFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _requestFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasId = input.ReadInt32(ref result.id_);
                  break;
                }
                case 18: {
                  result.hasCommand = input.ReadString(ref result.command_);
                  break;
                }
                case 26: {
                  input.ReadStringArray(tag, field_name, result.arguments_);
                  break;
                }
                case 138: {
                  input.ReadMessageArray(tag, field_name, result.attachments_, global::Plugin.Common.Types.Attachment.DefaultInstance, extensionRegistry);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public int Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(int value) {
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = 0;
            return this;
          }
          
          public bool HasCommand {
            get { return result.hasCommand; }
          }
          public string Command {
            get { return result.Command; }
            set { SetCommand(value); }
          }
          public Builder SetCommand(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasCommand = true;
            result.command_ = value;
            return this;
          }
          public Builder ClearCommand() {
            PrepareBuilder();
            result.hasCommand = false;
            result.command_ = "";
            return this;
          }
          
          public pbc::IPopsicleList<string> ArgumentsList {
            get { return PrepareBuilder().arguments_; }
          }
          public int ArgumentsCount {
            get { return result.ArgumentsCount; }
          }
          public string GetArguments(int index) {
            return result.GetArguments(index);
          }
          public Builder SetArguments(int index, string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.arguments_[index] = value;
            return this;
          }
          public Builder AddArguments(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.arguments_.Add(value);
            return this;
          }
          public Builder AddRangeArguments(scg::IEnumerable<string> values) {
            PrepareBuilder();
            result.arguments_.Add(values);
            return this;
          }
          public Builder ClearArguments() {
            PrepareBuilder();
            result.arguments_.Clear();
            return this;
          }
          
          public pbc::IPopsicleList<global::Plugin.Common.Types.Attachment> AttachmentsList {
            get { return PrepareBuilder().attachments_; }
          }
          public int AttachmentsCount {
            get { return result.AttachmentsCount; }
          }
          public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
            return result.GetAttachments(index);
          }
          public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.attachments_[index] = value;
            return this;
          }
          public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.attachments_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddAttachments(global::Plugin.Common.Types.Attachment value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.attachments_.Add(value);
            return this;
          }
          public Builder AddAttachments(global::Plugin.Common.Types.Attachment.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.attachments_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeAttachments(scg::IEnumerable<global::Plugin.Common.Types.Attachment> values) {
            PrepareBuilder();
            result.attachments_.Add(values);
            return this;
          }
          public Builder ClearAttachments() {
            PrepareBuilder();
            result.attachments_.Clear();
            return this;
          }
        }
        static Request() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::Plugin.Common.Types.Header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::Plugin.Common.Types.Header Header {
      get { return header_ ?? global::Plugin.Common.Types.Header.DefaultInstance; }
    }
    
    public const int PayloadFieldNumber = 2;
    private pbc::PopsicleList<global::Plugin.ExecuteRequestMessage.Types.Request> payload_ = new pbc::PopsicleList<global::Plugin.ExecuteRequestMessage.Types.Request>();
    public scg::IList<global::Plugin.ExecuteRequestMessage.Types.Request> PayloadList {
      get { return payload_; }
    }
    public int PayloadCount {
      get { return payload_.Count; }
    }
    public global::Plugin.ExecuteRequestMessage.Types.Request GetPayload(int index) {
      return payload_[index];
    }
    
    public const int AttachmentsFieldNumber = 3;
    private pbc::PopsicleList<global::Plugin.Common.Types.Attachment> attachments_ = new pbc::PopsicleList<global::Plugin.Common.Types.Attachment>();
    public scg::IList<global::Plugin.Common.Types.Attachment> AttachmentsList {
      get { return attachments_; }
    }
    public int AttachmentsCount {
      get { return attachments_.Count; }
    }
    public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
      return attachments_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (HasHeader) {
          if (!Header.IsInitialized) return false;
        }
        foreach (global::Plugin.ExecuteRequestMessage.Types.Request element in PayloadList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _executeRequestMessageFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[1], Header);
      }
      if (payload_.Count > 0) {
        output.WriteMessageArray(2, field_names[2], payload_);
      }
      if (attachments_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], attachments_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
        }
        foreach (global::Plugin.ExecuteRequestMessage.Types.Request element in PayloadList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ExecuteRequestMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExecuteRequestMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExecuteRequestMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExecuteRequestMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExecuteRequestMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExecuteRequestMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ExecuteRequestMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ExecuteRequestMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ExecuteRequestMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExecuteRequestMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ExecuteRequestMessage MakeReadOnly() {
      payload_.MakeReadOnly();
      attachments_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ExecuteRequestMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ExecuteRequestMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ExecuteRequestMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ExecuteRequestMessage result;
      
      private ExecuteRequestMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          ExecuteRequestMessage original = result;
          result = new ExecuteRequestMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ExecuteRequestMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.ExecuteRequestMessage.Descriptor; }
      }
      
      public override ExecuteRequestMessage DefaultInstanceForType {
        get { return global::Plugin.ExecuteRequestMessage.DefaultInstance; }
      }
      
      public override ExecuteRequestMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ExecuteRequestMessage) {
          return MergeFrom((ExecuteRequestMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ExecuteRequestMessage other) {
        if (other == global::Plugin.ExecuteRequestMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.payload_.Count != 0) {
          result.payload_.Add(other.payload_);
        }
        if (other.attachments_.Count != 0) {
          result.attachments_.Add(other.attachments_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_executeRequestMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _executeRequestMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Plugin.Common.Types.Header.Builder subBuilder = global::Plugin.Common.Types.Header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.payload_, global::Plugin.ExecuteRequestMessage.Types.Request.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.attachments_, global::Plugin.Common.Types.Attachment.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::Plugin.Common.Types.Header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::Plugin.Common.Types.Header.DefaultInstance) {
            result.header_ = global::Plugin.Common.Types.Header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.ExecuteRequestMessage.Types.Request> PayloadList {
        get { return PrepareBuilder().payload_; }
      }
      public int PayloadCount {
        get { return result.PayloadCount; }
      }
      public global::Plugin.ExecuteRequestMessage.Types.Request GetPayload(int index) {
        return result.GetPayload(index);
      }
      public Builder SetPayload(int index, global::Plugin.ExecuteRequestMessage.Types.Request value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_[index] = value;
        return this;
      }
      public Builder SetPayload(int index, global::Plugin.ExecuteRequestMessage.Types.Request.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPayload(global::Plugin.ExecuteRequestMessage.Types.Request value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_.Add(value);
        return this;
      }
      public Builder AddPayload(global::Plugin.ExecuteRequestMessage.Types.Request.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePayload(scg::IEnumerable<global::Plugin.ExecuteRequestMessage.Types.Request> values) {
        PrepareBuilder();
        result.payload_.Add(values);
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.payload_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.Common.Types.Attachment> AttachmentsList {
        get { return PrepareBuilder().attachments_; }
      }
      public int AttachmentsCount {
        get { return result.AttachmentsCount; }
      }
      public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
        return result.GetAttachments(index);
      }
      public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachments_[index] = value;
        return this;
      }
      public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachments_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttachments(global::Plugin.Common.Types.Attachment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachments_.Add(value);
        return this;
      }
      public Builder AddAttachments(global::Plugin.Common.Types.Attachment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachments_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttachments(scg::IEnumerable<global::Plugin.Common.Types.Attachment> values) {
        PrepareBuilder();
        result.attachments_.Add(values);
        return this;
      }
      public Builder ClearAttachments() {
        PrepareBuilder();
        result.attachments_.Clear();
        return this;
      }
    }
    static ExecuteRequestMessage() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ExecuteResponseMessage : pb::GeneratedMessage<ExecuteResponseMessage, ExecuteResponseMessage.Builder> {
    private ExecuteResponseMessage() { }
    private static readonly ExecuteResponseMessage defaultInstance = new ExecuteResponseMessage().MakeReadOnly();
    private static readonly string[] _executeResponseMessageFieldNames = new string[] { "attachments", "header", "payload" };
    private static readonly uint[] _executeResponseMessageFieldTags = new uint[] { 26, 10, 18 };
    public static ExecuteResponseMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ExecuteResponseMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ExecuteResponseMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_ExecuteResponseMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ExecuteResponseMessage, ExecuteResponseMessage.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_ExecuteResponseMessage__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Response : pb::GeneratedMessage<Response, Response.Builder> {
        private Response() { }
        private static readonly Response defaultInstance = new Response().MakeReadOnly();
        private static readonly string[] _responseFieldNames = new string[] { "arguments", "attachments", "command", "data", "id", "message", "result" };
        private static readonly uint[] _responseFieldTags = new uint[] { 130, 138, 42, 58, 16, 82, 72 };
        public static Response DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Response DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Response ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_ExecuteResponseMessage_Response__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Response, Response.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_ExecuteResponseMessage_Response__FieldAccessorTable; }
        }
        
        public const int IdFieldNumber = 2;
        private bool hasId;
        private int id_;
        public bool HasId {
          get { return hasId; }
        }
        public int Id {
          get { return id_; }
        }
        
        public const int CommandFieldNumber = 5;
        private bool hasCommand;
        private string command_ = "";
        public bool HasCommand {
          get { return hasCommand; }
        }
        public string Command {
          get { return command_; }
        }
        
        public const int ArgumentsFieldNumber = 16;
        private pbc::PopsicleList<string> arguments_ = new pbc::PopsicleList<string>();
        public scg::IList<string> ArgumentsList {
          get { return pbc::Lists.AsReadOnly(arguments_); }
        }
        public int ArgumentsCount {
          get { return arguments_.Count; }
        }
        public string GetArguments(int index) {
          return arguments_[index];
        }
        
        public const int ResultFieldNumber = 9;
        private bool hasResult;
        private global::Plugin.Common.Types.ResultCode result_ = global::Plugin.Common.Types.ResultCode.OK;
        public bool HasResult {
          get { return hasResult; }
        }
        public global::Plugin.Common.Types.ResultCode Result {
          get { return result_; }
        }
        
        public const int MessageFieldNumber = 10;
        private bool hasMessage;
        private string message_ = "";
        public bool HasMessage {
          get { return hasMessage; }
        }
        public string Message {
          get { return message_; }
        }
        
        public const int DataFieldNumber = 7;
        private bool hasData;
        private pb::ByteString data_ = pb::ByteString.Empty;
        public bool HasData {
          get { return hasData; }
        }
        public pb::ByteString Data {
          get { return data_; }
        }
        
        public const int AttachmentsFieldNumber = 17;
        private pbc::PopsicleList<global::Plugin.Common.Types.Attachment> attachments_ = new pbc::PopsicleList<global::Plugin.Common.Types.Attachment>();
        public scg::IList<global::Plugin.Common.Types.Attachment> AttachmentsList {
          get { return attachments_; }
        }
        public int AttachmentsCount {
          get { return attachments_.Count; }
        }
        public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
          return attachments_[index];
        }
        
        public override bool IsInitialized {
          get {
            if (!hasCommand) return false;
            if (!hasResult) return false;
            if (!hasMessage) return false;
            foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
              if (!element.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _responseFieldNames;
          if (hasId) {
            output.WriteInt32(2, field_names[4], Id);
          }
          if (hasCommand) {
            output.WriteString(5, field_names[2], Command);
          }
          if (hasData) {
            output.WriteBytes(7, field_names[3], Data);
          }
          if (hasResult) {
            output.WriteEnum(9, field_names[6], (int) Result, Result);
          }
          if (hasMessage) {
            output.WriteString(10, field_names[5], Message);
          }
          if (arguments_.Count > 0) {
            output.WriteStringArray(16, field_names[0], arguments_);
          }
          if (attachments_.Count > 0) {
            output.WriteMessageArray(17, field_names[1], attachments_);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasId) {
              size += pb::CodedOutputStream.ComputeInt32Size(2, Id);
            }
            if (hasCommand) {
              size += pb::CodedOutputStream.ComputeStringSize(5, Command);
            }
            {
              int dataSize = 0;
              foreach (string element in ArgumentsList) {
                dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
              }
              size += dataSize;
              size += 2 * arguments_.Count;
            }
            if (hasResult) {
              size += pb::CodedOutputStream.ComputeEnumSize(9, (int) Result);
            }
            if (hasMessage) {
              size += pb::CodedOutputStream.ComputeStringSize(10, Message);
            }
            if (hasData) {
              size += pb::CodedOutputStream.ComputeBytesSize(7, Data);
            }
            foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
              size += pb::CodedOutputStream.ComputeMessageSize(17, element);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Response ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Response ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Response ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Response ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Response ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Response MakeReadOnly() {
          arguments_.MakeReadOnly();
          attachments_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Response prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Response, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Response cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Response result;
          
          private Response PrepareBuilder() {
            if (resultIsReadOnly) {
              Response original = result;
              result = new Response();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Response MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.ExecuteResponseMessage.Types.Response.Descriptor; }
          }
          
          public override Response DefaultInstanceForType {
            get { return global::Plugin.ExecuteResponseMessage.Types.Response.DefaultInstance; }
          }
          
          public override Response BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Response) {
              return MergeFrom((Response) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Response other) {
            if (other == global::Plugin.ExecuteResponseMessage.Types.Response.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasCommand) {
              Command = other.Command;
            }
            if (other.arguments_.Count != 0) {
              result.arguments_.Add(other.arguments_);
            }
            if (other.HasResult) {
              Result = other.Result;
            }
            if (other.HasMessage) {
              Message = other.Message;
            }
            if (other.HasData) {
              Data = other.Data;
            }
            if (other.attachments_.Count != 0) {
              result.attachments_.Add(other.attachments_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_responseFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _responseFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 16: {
                  result.hasId = input.ReadInt32(ref result.id_);
                  break;
                }
                case 42: {
                  result.hasCommand = input.ReadString(ref result.command_);
                  break;
                }
                case 58: {
                  result.hasData = input.ReadBytes(ref result.data_);
                  break;
                }
                case 72: {
                  object unknown;
                  if(input.ReadEnum(ref result.result_, out unknown)) {
                    result.hasResult = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(9, (ulong)(int)unknown);
                  }
                  break;
                }
                case 82: {
                  result.hasMessage = input.ReadString(ref result.message_);
                  break;
                }
                case 130: {
                  input.ReadStringArray(tag, field_name, result.arguments_);
                  break;
                }
                case 138: {
                  input.ReadMessageArray(tag, field_name, result.attachments_, global::Plugin.Common.Types.Attachment.DefaultInstance, extensionRegistry);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public int Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(int value) {
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = 0;
            return this;
          }
          
          public bool HasCommand {
            get { return result.hasCommand; }
          }
          public string Command {
            get { return result.Command; }
            set { SetCommand(value); }
          }
          public Builder SetCommand(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasCommand = true;
            result.command_ = value;
            return this;
          }
          public Builder ClearCommand() {
            PrepareBuilder();
            result.hasCommand = false;
            result.command_ = "";
            return this;
          }
          
          public pbc::IPopsicleList<string> ArgumentsList {
            get { return PrepareBuilder().arguments_; }
          }
          public int ArgumentsCount {
            get { return result.ArgumentsCount; }
          }
          public string GetArguments(int index) {
            return result.GetArguments(index);
          }
          public Builder SetArguments(int index, string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.arguments_[index] = value;
            return this;
          }
          public Builder AddArguments(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.arguments_.Add(value);
            return this;
          }
          public Builder AddRangeArguments(scg::IEnumerable<string> values) {
            PrepareBuilder();
            result.arguments_.Add(values);
            return this;
          }
          public Builder ClearArguments() {
            PrepareBuilder();
            result.arguments_.Clear();
            return this;
          }
          
          public bool HasResult {
           get { return result.hasResult; }
          }
          public global::Plugin.Common.Types.ResultCode Result {
            get { return result.Result; }
            set { SetResult(value); }
          }
          public Builder SetResult(global::Plugin.Common.Types.ResultCode value) {
            PrepareBuilder();
            result.hasResult = true;
            result.result_ = value;
            return this;
          }
          public Builder ClearResult() {
            PrepareBuilder();
            result.hasResult = false;
            result.result_ = global::Plugin.Common.Types.ResultCode.OK;
            return this;
          }
          
          public bool HasMessage {
            get { return result.hasMessage; }
          }
          public string Message {
            get { return result.Message; }
            set { SetMessage(value); }
          }
          public Builder SetMessage(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasMessage = true;
            result.message_ = value;
            return this;
          }
          public Builder ClearMessage() {
            PrepareBuilder();
            result.hasMessage = false;
            result.message_ = "";
            return this;
          }
          
          public bool HasData {
            get { return result.hasData; }
          }
          public pb::ByteString Data {
            get { return result.Data; }
            set { SetData(value); }
          }
          public Builder SetData(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasData = true;
            result.data_ = value;
            return this;
          }
          public Builder ClearData() {
            PrepareBuilder();
            result.hasData = false;
            result.data_ = pb::ByteString.Empty;
            return this;
          }
          
          public pbc::IPopsicleList<global::Plugin.Common.Types.Attachment> AttachmentsList {
            get { return PrepareBuilder().attachments_; }
          }
          public int AttachmentsCount {
            get { return result.AttachmentsCount; }
          }
          public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
            return result.GetAttachments(index);
          }
          public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.attachments_[index] = value;
            return this;
          }
          public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.attachments_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddAttachments(global::Plugin.Common.Types.Attachment value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.attachments_.Add(value);
            return this;
          }
          public Builder AddAttachments(global::Plugin.Common.Types.Attachment.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.attachments_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeAttachments(scg::IEnumerable<global::Plugin.Common.Types.Attachment> values) {
            PrepareBuilder();
            result.attachments_.Add(values);
            return this;
          }
          public Builder ClearAttachments() {
            PrepareBuilder();
            result.attachments_.Clear();
            return this;
          }
        }
        static Response() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::Plugin.Common.Types.Header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::Plugin.Common.Types.Header Header {
      get { return header_ ?? global::Plugin.Common.Types.Header.DefaultInstance; }
    }
    
    public const int PayloadFieldNumber = 2;
    private pbc::PopsicleList<global::Plugin.ExecuteResponseMessage.Types.Response> payload_ = new pbc::PopsicleList<global::Plugin.ExecuteResponseMessage.Types.Response>();
    public scg::IList<global::Plugin.ExecuteResponseMessage.Types.Response> PayloadList {
      get { return payload_; }
    }
    public int PayloadCount {
      get { return payload_.Count; }
    }
    public global::Plugin.ExecuteResponseMessage.Types.Response GetPayload(int index) {
      return payload_[index];
    }
    
    public const int AttachmentsFieldNumber = 3;
    private pbc::PopsicleList<global::Plugin.Common.Types.Attachment> attachments_ = new pbc::PopsicleList<global::Plugin.Common.Types.Attachment>();
    public scg::IList<global::Plugin.Common.Types.Attachment> AttachmentsList {
      get { return attachments_; }
    }
    public int AttachmentsCount {
      get { return attachments_.Count; }
    }
    public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
      return attachments_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (HasHeader) {
          if (!Header.IsInitialized) return false;
        }
        foreach (global::Plugin.ExecuteResponseMessage.Types.Response element in PayloadList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _executeResponseMessageFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[1], Header);
      }
      if (payload_.Count > 0) {
        output.WriteMessageArray(2, field_names[2], payload_);
      }
      if (attachments_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], attachments_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
        }
        foreach (global::Plugin.ExecuteResponseMessage.Types.Response element in PayloadList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ExecuteResponseMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExecuteResponseMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExecuteResponseMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExecuteResponseMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExecuteResponseMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExecuteResponseMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ExecuteResponseMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ExecuteResponseMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ExecuteResponseMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExecuteResponseMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ExecuteResponseMessage MakeReadOnly() {
      payload_.MakeReadOnly();
      attachments_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ExecuteResponseMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ExecuteResponseMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ExecuteResponseMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ExecuteResponseMessage result;
      
      private ExecuteResponseMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          ExecuteResponseMessage original = result;
          result = new ExecuteResponseMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ExecuteResponseMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.ExecuteResponseMessage.Descriptor; }
      }
      
      public override ExecuteResponseMessage DefaultInstanceForType {
        get { return global::Plugin.ExecuteResponseMessage.DefaultInstance; }
      }
      
      public override ExecuteResponseMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ExecuteResponseMessage) {
          return MergeFrom((ExecuteResponseMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ExecuteResponseMessage other) {
        if (other == global::Plugin.ExecuteResponseMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.payload_.Count != 0) {
          result.payload_.Add(other.payload_);
        }
        if (other.attachments_.Count != 0) {
          result.attachments_.Add(other.attachments_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_executeResponseMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _executeResponseMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Plugin.Common.Types.Header.Builder subBuilder = global::Plugin.Common.Types.Header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.payload_, global::Plugin.ExecuteResponseMessage.Types.Response.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.attachments_, global::Plugin.Common.Types.Attachment.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::Plugin.Common.Types.Header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::Plugin.Common.Types.Header.DefaultInstance) {
            result.header_ = global::Plugin.Common.Types.Header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.ExecuteResponseMessage.Types.Response> PayloadList {
        get { return PrepareBuilder().payload_; }
      }
      public int PayloadCount {
        get { return result.PayloadCount; }
      }
      public global::Plugin.ExecuteResponseMessage.Types.Response GetPayload(int index) {
        return result.GetPayload(index);
      }
      public Builder SetPayload(int index, global::Plugin.ExecuteResponseMessage.Types.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_[index] = value;
        return this;
      }
      public Builder SetPayload(int index, global::Plugin.ExecuteResponseMessage.Types.Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPayload(global::Plugin.ExecuteResponseMessage.Types.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_.Add(value);
        return this;
      }
      public Builder AddPayload(global::Plugin.ExecuteResponseMessage.Types.Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePayload(scg::IEnumerable<global::Plugin.ExecuteResponseMessage.Types.Response> values) {
        PrepareBuilder();
        result.payload_.Add(values);
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.payload_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.Common.Types.Attachment> AttachmentsList {
        get { return PrepareBuilder().attachments_; }
      }
      public int AttachmentsCount {
        get { return result.AttachmentsCount; }
      }
      public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
        return result.GetAttachments(index);
      }
      public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachments_[index] = value;
        return this;
      }
      public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachments_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttachments(global::Plugin.Common.Types.Attachment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachments_.Add(value);
        return this;
      }
      public Builder AddAttachments(global::Plugin.Common.Types.Attachment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachments_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttachments(scg::IEnumerable<global::Plugin.Common.Types.Attachment> values) {
        PrepareBuilder();
        result.attachments_.Add(values);
        return this;
      }
      public Builder ClearAttachments() {
        PrepareBuilder();
        result.attachments_.Clear();
        return this;
      }
    }
    static ExecuteResponseMessage() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SubmitRequestMessage : pb::GeneratedMessage<SubmitRequestMessage, SubmitRequestMessage.Builder> {
    private SubmitRequestMessage() { }
    private static readonly SubmitRequestMessage defaultInstance = new SubmitRequestMessage().MakeReadOnly();
    private static readonly string[] _submitRequestMessageFieldNames = new string[] { "attachments", "channel", "header", "payload" };
    private static readonly uint[] _submitRequestMessageFieldTags = new uint[] { 34, 18, 10, 26 };
    public static SubmitRequestMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SubmitRequestMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SubmitRequestMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_SubmitRequestMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SubmitRequestMessage, SubmitRequestMessage.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_SubmitRequestMessage__FieldAccessorTable; }
    }
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::Plugin.Common.Types.Header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::Plugin.Common.Types.Header Header {
      get { return header_ ?? global::Plugin.Common.Types.Header.DefaultInstance; }
    }
    
    public const int ChannelFieldNumber = 2;
    private bool hasChannel;
    private string channel_ = "";
    public bool HasChannel {
      get { return hasChannel; }
    }
    public string Channel {
      get { return channel_; }
    }
    
    public const int PayloadFieldNumber = 3;
    private pbc::PopsicleList<global::Plugin.QueryResponseMessage.Types.Response> payload_ = new pbc::PopsicleList<global::Plugin.QueryResponseMessage.Types.Response>();
    public scg::IList<global::Plugin.QueryResponseMessage.Types.Response> PayloadList {
      get { return payload_; }
    }
    public int PayloadCount {
      get { return payload_.Count; }
    }
    public global::Plugin.QueryResponseMessage.Types.Response GetPayload(int index) {
      return payload_[index];
    }
    
    public const int AttachmentsFieldNumber = 4;
    private pbc::PopsicleList<global::Plugin.Common.Types.Attachment> attachments_ = new pbc::PopsicleList<global::Plugin.Common.Types.Attachment>();
    public scg::IList<global::Plugin.Common.Types.Attachment> AttachmentsList {
      get { return attachments_; }
    }
    public int AttachmentsCount {
      get { return attachments_.Count; }
    }
    public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
      return attachments_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasChannel) return false;
        if (HasHeader) {
          if (!Header.IsInitialized) return false;
        }
        foreach (global::Plugin.QueryResponseMessage.Types.Response element in PayloadList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _submitRequestMessageFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[2], Header);
      }
      if (hasChannel) {
        output.WriteString(2, field_names[1], Channel);
      }
      if (payload_.Count > 0) {
        output.WriteMessageArray(3, field_names[3], payload_);
      }
      if (attachments_.Count > 0) {
        output.WriteMessageArray(4, field_names[0], attachments_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
        }
        if (hasChannel) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Channel);
        }
        foreach (global::Plugin.QueryResponseMessage.Types.Response element in PayloadList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SubmitRequestMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SubmitRequestMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SubmitRequestMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SubmitRequestMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SubmitRequestMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SubmitRequestMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SubmitRequestMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SubmitRequestMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SubmitRequestMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SubmitRequestMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SubmitRequestMessage MakeReadOnly() {
      payload_.MakeReadOnly();
      attachments_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SubmitRequestMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SubmitRequestMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SubmitRequestMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SubmitRequestMessage result;
      
      private SubmitRequestMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          SubmitRequestMessage original = result;
          result = new SubmitRequestMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SubmitRequestMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.SubmitRequestMessage.Descriptor; }
      }
      
      public override SubmitRequestMessage DefaultInstanceForType {
        get { return global::Plugin.SubmitRequestMessage.DefaultInstance; }
      }
      
      public override SubmitRequestMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SubmitRequestMessage) {
          return MergeFrom((SubmitRequestMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SubmitRequestMessage other) {
        if (other == global::Plugin.SubmitRequestMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.HasChannel) {
          Channel = other.Channel;
        }
        if (other.payload_.Count != 0) {
          result.payload_.Add(other.payload_);
        }
        if (other.attachments_.Count != 0) {
          result.attachments_.Add(other.attachments_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_submitRequestMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _submitRequestMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Plugin.Common.Types.Header.Builder subBuilder = global::Plugin.Common.Types.Header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasChannel = input.ReadString(ref result.channel_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.payload_, global::Plugin.QueryResponseMessage.Types.Response.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.attachments_, global::Plugin.Common.Types.Attachment.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::Plugin.Common.Types.Header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::Plugin.Common.Types.Header.DefaultInstance) {
            result.header_ = global::Plugin.Common.Types.Header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public bool HasChannel {
        get { return result.hasChannel; }
      }
      public string Channel {
        get { return result.Channel; }
        set { SetChannel(value); }
      }
      public Builder SetChannel(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChannel = true;
        result.channel_ = value;
        return this;
      }
      public Builder ClearChannel() {
        PrepareBuilder();
        result.hasChannel = false;
        result.channel_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.QueryResponseMessage.Types.Response> PayloadList {
        get { return PrepareBuilder().payload_; }
      }
      public int PayloadCount {
        get { return result.PayloadCount; }
      }
      public global::Plugin.QueryResponseMessage.Types.Response GetPayload(int index) {
        return result.GetPayload(index);
      }
      public Builder SetPayload(int index, global::Plugin.QueryResponseMessage.Types.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_[index] = value;
        return this;
      }
      public Builder SetPayload(int index, global::Plugin.QueryResponseMessage.Types.Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPayload(global::Plugin.QueryResponseMessage.Types.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_.Add(value);
        return this;
      }
      public Builder AddPayload(global::Plugin.QueryResponseMessage.Types.Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePayload(scg::IEnumerable<global::Plugin.QueryResponseMessage.Types.Response> values) {
        PrepareBuilder();
        result.payload_.Add(values);
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.payload_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.Common.Types.Attachment> AttachmentsList {
        get { return PrepareBuilder().attachments_; }
      }
      public int AttachmentsCount {
        get { return result.AttachmentsCount; }
      }
      public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
        return result.GetAttachments(index);
      }
      public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachments_[index] = value;
        return this;
      }
      public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachments_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttachments(global::Plugin.Common.Types.Attachment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachments_.Add(value);
        return this;
      }
      public Builder AddAttachments(global::Plugin.Common.Types.Attachment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachments_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttachments(scg::IEnumerable<global::Plugin.Common.Types.Attachment> values) {
        PrepareBuilder();
        result.attachments_.Add(values);
        return this;
      }
      public Builder ClearAttachments() {
        PrepareBuilder();
        result.attachments_.Clear();
        return this;
      }
    }
    static SubmitRequestMessage() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SubmitResponseMessage : pb::GeneratedMessage<SubmitResponseMessage, SubmitResponseMessage.Builder> {
    private SubmitResponseMessage() { }
    private static readonly SubmitResponseMessage defaultInstance = new SubmitResponseMessage().MakeReadOnly();
    private static readonly string[] _submitResponseMessageFieldNames = new string[] { "attachments", "header", "payload" };
    private static readonly uint[] _submitResponseMessageFieldTags = new uint[] { 26, 10, 18 };
    public static SubmitResponseMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SubmitResponseMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SubmitResponseMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_SubmitResponseMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SubmitResponseMessage, SubmitResponseMessage.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_SubmitResponseMessage__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Response : pb::GeneratedMessage<Response, Response.Builder> {
        private Response() { }
        private static readonly Response defaultInstance = new Response().MakeReadOnly();
        private static readonly string[] _responseFieldNames = new string[] { "attachments", "command", "id", "result" };
        private static readonly uint[] _responseFieldTags = new uint[] { 138, 18, 8, 26 };
        public static Response DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Response DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Response ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_SubmitResponseMessage_Response__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Response, Response.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_SubmitResponseMessage_Response__FieldAccessorTable; }
        }
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private int id_;
        public bool HasId {
          get { return hasId; }
        }
        public int Id {
          get { return id_; }
        }
        
        public const int CommandFieldNumber = 2;
        private bool hasCommand;
        private string command_ = "";
        public bool HasCommand {
          get { return hasCommand; }
        }
        public string Command {
          get { return command_; }
        }
        
        public const int ResultFieldNumber = 3;
        private bool hasResult;
        private global::Plugin.Common.Types.Result result_;
        public bool HasResult {
          get { return hasResult; }
        }
        public global::Plugin.Common.Types.Result Result {
          get { return result_ ?? global::Plugin.Common.Types.Result.DefaultInstance; }
        }
        
        public const int AttachmentsFieldNumber = 17;
        private pbc::PopsicleList<global::Plugin.Common.Types.Attachment> attachments_ = new pbc::PopsicleList<global::Plugin.Common.Types.Attachment>();
        public scg::IList<global::Plugin.Common.Types.Attachment> AttachmentsList {
          get { return attachments_; }
        }
        public int AttachmentsCount {
          get { return attachments_.Count; }
        }
        public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
          return attachments_[index];
        }
        
        public override bool IsInitialized {
          get {
            if (!hasCommand) return false;
            if (!hasResult) return false;
            if (!Result.IsInitialized) return false;
            foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
              if (!element.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _responseFieldNames;
          if (hasId) {
            output.WriteInt32(1, field_names[2], Id);
          }
          if (hasCommand) {
            output.WriteString(2, field_names[1], Command);
          }
          if (hasResult) {
            output.WriteMessage(3, field_names[3], Result);
          }
          if (attachments_.Count > 0) {
            output.WriteMessageArray(17, field_names[0], attachments_);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasId) {
              size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
            }
            if (hasCommand) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Command);
            }
            if (hasResult) {
              size += pb::CodedOutputStream.ComputeMessageSize(3, Result);
            }
            foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
              size += pb::CodedOutputStream.ComputeMessageSize(17, element);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Response ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Response ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Response ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Response ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Response ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Response MakeReadOnly() {
          attachments_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Response prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Response, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Response cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Response result;
          
          private Response PrepareBuilder() {
            if (resultIsReadOnly) {
              Response original = result;
              result = new Response();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Response MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.SubmitResponseMessage.Types.Response.Descriptor; }
          }
          
          public override Response DefaultInstanceForType {
            get { return global::Plugin.SubmitResponseMessage.Types.Response.DefaultInstance; }
          }
          
          public override Response BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Response) {
              return MergeFrom((Response) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Response other) {
            if (other == global::Plugin.SubmitResponseMessage.Types.Response.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasCommand) {
              Command = other.Command;
            }
            if (other.HasResult) {
              MergeResult(other.Result);
            }
            if (other.attachments_.Count != 0) {
              result.attachments_.Add(other.attachments_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_responseFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _responseFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasId = input.ReadInt32(ref result.id_);
                  break;
                }
                case 18: {
                  result.hasCommand = input.ReadString(ref result.command_);
                  break;
                }
                case 26: {
                  global::Plugin.Common.Types.Result.Builder subBuilder = global::Plugin.Common.Types.Result.CreateBuilder();
                  if (result.hasResult) {
                    subBuilder.MergeFrom(Result);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Result = subBuilder.BuildPartial();
                  break;
                }
                case 138: {
                  input.ReadMessageArray(tag, field_name, result.attachments_, global::Plugin.Common.Types.Attachment.DefaultInstance, extensionRegistry);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public int Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(int value) {
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = 0;
            return this;
          }
          
          public bool HasCommand {
            get { return result.hasCommand; }
          }
          public string Command {
            get { return result.Command; }
            set { SetCommand(value); }
          }
          public Builder SetCommand(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasCommand = true;
            result.command_ = value;
            return this;
          }
          public Builder ClearCommand() {
            PrepareBuilder();
            result.hasCommand = false;
            result.command_ = "";
            return this;
          }
          
          public bool HasResult {
           get { return result.hasResult; }
          }
          public global::Plugin.Common.Types.Result Result {
            get { return result.Result; }
            set { SetResult(value); }
          }
          public Builder SetResult(global::Plugin.Common.Types.Result value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasResult = true;
            result.result_ = value;
            return this;
          }
          public Builder SetResult(global::Plugin.Common.Types.Result.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasResult = true;
            result.result_ = builderForValue.Build();
            return this;
          }
          public Builder MergeResult(global::Plugin.Common.Types.Result value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasResult &&
                result.result_ != global::Plugin.Common.Types.Result.DefaultInstance) {
                result.result_ = global::Plugin.Common.Types.Result.CreateBuilder(result.result_).MergeFrom(value).BuildPartial();
            } else {
              result.result_ = value;
            }
            result.hasResult = true;
            return this;
          }
          public Builder ClearResult() {
            PrepareBuilder();
            result.hasResult = false;
            result.result_ = null;
            return this;
          }
          
          public pbc::IPopsicleList<global::Plugin.Common.Types.Attachment> AttachmentsList {
            get { return PrepareBuilder().attachments_; }
          }
          public int AttachmentsCount {
            get { return result.AttachmentsCount; }
          }
          public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
            return result.GetAttachments(index);
          }
          public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.attachments_[index] = value;
            return this;
          }
          public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.attachments_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddAttachments(global::Plugin.Common.Types.Attachment value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.attachments_.Add(value);
            return this;
          }
          public Builder AddAttachments(global::Plugin.Common.Types.Attachment.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.attachments_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeAttachments(scg::IEnumerable<global::Plugin.Common.Types.Attachment> values) {
            PrepareBuilder();
            result.attachments_.Add(values);
            return this;
          }
          public Builder ClearAttachments() {
            PrepareBuilder();
            result.attachments_.Clear();
            return this;
          }
        }
        static Response() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::Plugin.Common.Types.Header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::Plugin.Common.Types.Header Header {
      get { return header_ ?? global::Plugin.Common.Types.Header.DefaultInstance; }
    }
    
    public const int PayloadFieldNumber = 2;
    private pbc::PopsicleList<global::Plugin.SubmitResponseMessage.Types.Response> payload_ = new pbc::PopsicleList<global::Plugin.SubmitResponseMessage.Types.Response>();
    public scg::IList<global::Plugin.SubmitResponseMessage.Types.Response> PayloadList {
      get { return payload_; }
    }
    public int PayloadCount {
      get { return payload_.Count; }
    }
    public global::Plugin.SubmitResponseMessage.Types.Response GetPayload(int index) {
      return payload_[index];
    }
    
    public const int AttachmentsFieldNumber = 3;
    private pbc::PopsicleList<global::Plugin.Common.Types.Attachment> attachments_ = new pbc::PopsicleList<global::Plugin.Common.Types.Attachment>();
    public scg::IList<global::Plugin.Common.Types.Attachment> AttachmentsList {
      get { return attachments_; }
    }
    public int AttachmentsCount {
      get { return attachments_.Count; }
    }
    public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
      return attachments_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (HasHeader) {
          if (!Header.IsInitialized) return false;
        }
        foreach (global::Plugin.SubmitResponseMessage.Types.Response element in PayloadList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _submitResponseMessageFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[1], Header);
      }
      if (payload_.Count > 0) {
        output.WriteMessageArray(2, field_names[2], payload_);
      }
      if (attachments_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], attachments_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
        }
        foreach (global::Plugin.SubmitResponseMessage.Types.Response element in PayloadList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SubmitResponseMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SubmitResponseMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SubmitResponseMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SubmitResponseMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SubmitResponseMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SubmitResponseMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SubmitResponseMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SubmitResponseMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SubmitResponseMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SubmitResponseMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SubmitResponseMessage MakeReadOnly() {
      payload_.MakeReadOnly();
      attachments_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SubmitResponseMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SubmitResponseMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SubmitResponseMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SubmitResponseMessage result;
      
      private SubmitResponseMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          SubmitResponseMessage original = result;
          result = new SubmitResponseMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SubmitResponseMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.SubmitResponseMessage.Descriptor; }
      }
      
      public override SubmitResponseMessage DefaultInstanceForType {
        get { return global::Plugin.SubmitResponseMessage.DefaultInstance; }
      }
      
      public override SubmitResponseMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SubmitResponseMessage) {
          return MergeFrom((SubmitResponseMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SubmitResponseMessage other) {
        if (other == global::Plugin.SubmitResponseMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.payload_.Count != 0) {
          result.payload_.Add(other.payload_);
        }
        if (other.attachments_.Count != 0) {
          result.attachments_.Add(other.attachments_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_submitResponseMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _submitResponseMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Plugin.Common.Types.Header.Builder subBuilder = global::Plugin.Common.Types.Header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.payload_, global::Plugin.SubmitResponseMessage.Types.Response.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.attachments_, global::Plugin.Common.Types.Attachment.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::Plugin.Common.Types.Header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::Plugin.Common.Types.Header.DefaultInstance) {
            result.header_ = global::Plugin.Common.Types.Header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.SubmitResponseMessage.Types.Response> PayloadList {
        get { return PrepareBuilder().payload_; }
      }
      public int PayloadCount {
        get { return result.PayloadCount; }
      }
      public global::Plugin.SubmitResponseMessage.Types.Response GetPayload(int index) {
        return result.GetPayload(index);
      }
      public Builder SetPayload(int index, global::Plugin.SubmitResponseMessage.Types.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_[index] = value;
        return this;
      }
      public Builder SetPayload(int index, global::Plugin.SubmitResponseMessage.Types.Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPayload(global::Plugin.SubmitResponseMessage.Types.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_.Add(value);
        return this;
      }
      public Builder AddPayload(global::Plugin.SubmitResponseMessage.Types.Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePayload(scg::IEnumerable<global::Plugin.SubmitResponseMessage.Types.Response> values) {
        PrepareBuilder();
        result.payload_.Add(values);
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.payload_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.Common.Types.Attachment> AttachmentsList {
        get { return PrepareBuilder().attachments_; }
      }
      public int AttachmentsCount {
        get { return result.AttachmentsCount; }
      }
      public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
        return result.GetAttachments(index);
      }
      public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachments_[index] = value;
        return this;
      }
      public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachments_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttachments(global::Plugin.Common.Types.Attachment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachments_.Add(value);
        return this;
      }
      public Builder AddAttachments(global::Plugin.Common.Types.Attachment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachments_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttachments(scg::IEnumerable<global::Plugin.Common.Types.Attachment> values) {
        PrepareBuilder();
        result.attachments_.Add(values);
        return this;
      }
      public Builder ClearAttachments() {
        PrepareBuilder();
        result.attachments_.Clear();
        return this;
      }
    }
    static SubmitResponseMessage() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Registry : pb::GeneratedMessage<Registry, Registry.Builder> {
    private Registry() { }
    private static readonly Registry defaultInstance = new Registry().MakeReadOnly();
    private static readonly string[] _registryFieldNames = new string[] {  };
    private static readonly uint[] _registryFieldTags = new uint[] {  };
    public static Registry DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Registry DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Registry ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_Registry__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Registry, Registry.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_Registry__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum ItemType {
        QUERY = 1,
        COMMAND = 2,
        HANDLER = 3,
        PLUGIN = 4,
        QUERY_ALIAS = 5,
        ROUTER = 6,
        MODULE = 7,
        SCHEDULE = 8,
        ALL = 99,
      }
      
      public enum Command {
        LOAD = 1,
        UNLOAD = 2,
        RELOAD = 3,
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Query : pb::GeneratedMessage<Query, Query.Builder> {
        private Query() { }
        private static readonly Query defaultInstance = new Query().MakeReadOnly();
        private static readonly string[] _queryFieldNames = new string[] { "expression" };
        private static readonly uint[] _queryFieldTags = new uint[] { 10 };
        public static Query DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Query DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Query ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_Registry_Query__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Query, Query.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_Registry_Query__FieldAccessorTable; }
        }
        
        public const int ExpressionFieldNumber = 1;
        private bool hasExpression;
        private string expression_ = "";
        public bool HasExpression {
          get { return hasExpression; }
        }
        public string Expression {
          get { return expression_; }
        }
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _queryFieldNames;
          if (hasExpression) {
            output.WriteString(1, field_names[0], Expression);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasExpression) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Expression);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Query ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Query ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Query ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Query ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Query ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Query ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Query ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Query ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Query ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Query ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Query MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Query prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Query, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Query cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Query result;
          
          private Query PrepareBuilder() {
            if (resultIsReadOnly) {
              Query original = result;
              result = new Query();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Query MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.Registry.Types.Query.Descriptor; }
          }
          
          public override Query DefaultInstanceForType {
            get { return global::Plugin.Registry.Types.Query.DefaultInstance; }
          }
          
          public override Query BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Query) {
              return MergeFrom((Query) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Query other) {
            if (other == global::Plugin.Registry.Types.Query.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasExpression) {
              Expression = other.Expression;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_queryFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _queryFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasExpression = input.ReadString(ref result.expression_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasExpression {
            get { return result.hasExpression; }
          }
          public string Expression {
            get { return result.Expression; }
            set { SetExpression(value); }
          }
          public Builder SetExpression(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasExpression = true;
            result.expression_ = value;
            return this;
          }
          public Builder ClearExpression() {
            PrepareBuilder();
            result.hasExpression = false;
            result.expression_ = "";
            return this;
          }
        }
        static Query() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Information : pb::GeneratedMessage<Information, Information.Builder> {
        private Information() { }
        private static readonly Information defaultInstance = new Information().MakeReadOnly();
        private static readonly string[] _informationFieldNames = new string[] { "advanced", "description", "max_version", "metadata", "min_version", "plugin", "title" };
        private static readonly uint[] _informationFieldTags = new uint[] { 64, 18, 50, 26, 42, 74, 10 };
        public static Information DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Information DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Information ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_Registry_Information__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Information, Information.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_Registry_Information__FieldAccessorTable; }
        }
        
        public const int TitleFieldNumber = 1;
        private bool hasTitle;
        private string title_ = "";
        public bool HasTitle {
          get { return hasTitle; }
        }
        public string Title {
          get { return title_; }
        }
        
        public const int DescriptionFieldNumber = 2;
        private bool hasDescription;
        private string description_ = "";
        public bool HasDescription {
          get { return hasDescription; }
        }
        public string Description {
          get { return description_; }
        }
        
        public const int MetadataFieldNumber = 3;
        private pbc::PopsicleList<global::Plugin.Common.Types.KeyValue> metadata_ = new pbc::PopsicleList<global::Plugin.Common.Types.KeyValue>();
        public scg::IList<global::Plugin.Common.Types.KeyValue> MetadataList {
          get { return metadata_; }
        }
        public int MetadataCount {
          get { return metadata_.Count; }
        }
        public global::Plugin.Common.Types.KeyValue GetMetadata(int index) {
          return metadata_[index];
        }
        
        public const int MinVersionFieldNumber = 5;
        private bool hasMinVersion;
        private string minVersion_ = "";
        public bool HasMinVersion {
          get { return hasMinVersion; }
        }
        public string MinVersion {
          get { return minVersion_; }
        }
        
        public const int MaxVersionFieldNumber = 6;
        private bool hasMaxVersion;
        private string maxVersion_ = "";
        public bool HasMaxVersion {
          get { return hasMaxVersion; }
        }
        public string MaxVersion {
          get { return maxVersion_; }
        }
        
        public const int AdvancedFieldNumber = 8;
        private bool hasAdvanced;
        private bool advanced_;
        public bool HasAdvanced {
          get { return hasAdvanced; }
        }
        public bool Advanced {
          get { return advanced_; }
        }
        
        public const int PluginFieldNumber = 9;
        private pbc::PopsicleList<string> plugin_ = new pbc::PopsicleList<string>();
        public scg::IList<string> PluginList {
          get { return pbc::Lists.AsReadOnly(plugin_); }
        }
        public int PluginCount {
          get { return plugin_.Count; }
        }
        public string GetPlugin(int index) {
          return plugin_[index];
        }
        
        public override bool IsInitialized {
          get {
            foreach (global::Plugin.Common.Types.KeyValue element in MetadataList) {
              if (!element.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _informationFieldNames;
          if (hasTitle) {
            output.WriteString(1, field_names[6], Title);
          }
          if (hasDescription) {
            output.WriteString(2, field_names[1], Description);
          }
          if (metadata_.Count > 0) {
            output.WriteMessageArray(3, field_names[3], metadata_);
          }
          if (hasMinVersion) {
            output.WriteString(5, field_names[4], MinVersion);
          }
          if (hasMaxVersion) {
            output.WriteString(6, field_names[2], MaxVersion);
          }
          if (hasAdvanced) {
            output.WriteBool(8, field_names[0], Advanced);
          }
          if (plugin_.Count > 0) {
            output.WriteStringArray(9, field_names[5], plugin_);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasTitle) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Title);
            }
            if (hasDescription) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Description);
            }
            foreach (global::Plugin.Common.Types.KeyValue element in MetadataList) {
              size += pb::CodedOutputStream.ComputeMessageSize(3, element);
            }
            if (hasMinVersion) {
              size += pb::CodedOutputStream.ComputeStringSize(5, MinVersion);
            }
            if (hasMaxVersion) {
              size += pb::CodedOutputStream.ComputeStringSize(6, MaxVersion);
            }
            if (hasAdvanced) {
              size += pb::CodedOutputStream.ComputeBoolSize(8, Advanced);
            }
            {
              int dataSize = 0;
              foreach (string element in PluginList) {
                dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
              }
              size += dataSize;
              size += 1 * plugin_.Count;
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Information ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Information ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Information ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Information ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Information ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Information ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Information ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Information ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Information ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Information ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Information MakeReadOnly() {
          metadata_.MakeReadOnly();
          plugin_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Information prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Information, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Information cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Information result;
          
          private Information PrepareBuilder() {
            if (resultIsReadOnly) {
              Information original = result;
              result = new Information();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Information MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.Registry.Types.Information.Descriptor; }
          }
          
          public override Information DefaultInstanceForType {
            get { return global::Plugin.Registry.Types.Information.DefaultInstance; }
          }
          
          public override Information BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Information) {
              return MergeFrom((Information) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Information other) {
            if (other == global::Plugin.Registry.Types.Information.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasTitle) {
              Title = other.Title;
            }
            if (other.HasDescription) {
              Description = other.Description;
            }
            if (other.metadata_.Count != 0) {
              result.metadata_.Add(other.metadata_);
            }
            if (other.HasMinVersion) {
              MinVersion = other.MinVersion;
            }
            if (other.HasMaxVersion) {
              MaxVersion = other.MaxVersion;
            }
            if (other.HasAdvanced) {
              Advanced = other.Advanced;
            }
            if (other.plugin_.Count != 0) {
              result.plugin_.Add(other.plugin_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_informationFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _informationFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasTitle = input.ReadString(ref result.title_);
                  break;
                }
                case 18: {
                  result.hasDescription = input.ReadString(ref result.description_);
                  break;
                }
                case 26: {
                  input.ReadMessageArray(tag, field_name, result.metadata_, global::Plugin.Common.Types.KeyValue.DefaultInstance, extensionRegistry);
                  break;
                }
                case 42: {
                  result.hasMinVersion = input.ReadString(ref result.minVersion_);
                  break;
                }
                case 50: {
                  result.hasMaxVersion = input.ReadString(ref result.maxVersion_);
                  break;
                }
                case 64: {
                  result.hasAdvanced = input.ReadBool(ref result.advanced_);
                  break;
                }
                case 74: {
                  input.ReadStringArray(tag, field_name, result.plugin_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasTitle {
            get { return result.hasTitle; }
          }
          public string Title {
            get { return result.Title; }
            set { SetTitle(value); }
          }
          public Builder SetTitle(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasTitle = true;
            result.title_ = value;
            return this;
          }
          public Builder ClearTitle() {
            PrepareBuilder();
            result.hasTitle = false;
            result.title_ = "";
            return this;
          }
          
          public bool HasDescription {
            get { return result.hasDescription; }
          }
          public string Description {
            get { return result.Description; }
            set { SetDescription(value); }
          }
          public Builder SetDescription(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasDescription = true;
            result.description_ = value;
            return this;
          }
          public Builder ClearDescription() {
            PrepareBuilder();
            result.hasDescription = false;
            result.description_ = "";
            return this;
          }
          
          public pbc::IPopsicleList<global::Plugin.Common.Types.KeyValue> MetadataList {
            get { return PrepareBuilder().metadata_; }
          }
          public int MetadataCount {
            get { return result.MetadataCount; }
          }
          public global::Plugin.Common.Types.KeyValue GetMetadata(int index) {
            return result.GetMetadata(index);
          }
          public Builder SetMetadata(int index, global::Plugin.Common.Types.KeyValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.metadata_[index] = value;
            return this;
          }
          public Builder SetMetadata(int index, global::Plugin.Common.Types.KeyValue.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.metadata_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddMetadata(global::Plugin.Common.Types.KeyValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.metadata_.Add(value);
            return this;
          }
          public Builder AddMetadata(global::Plugin.Common.Types.KeyValue.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.metadata_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeMetadata(scg::IEnumerable<global::Plugin.Common.Types.KeyValue> values) {
            PrepareBuilder();
            result.metadata_.Add(values);
            return this;
          }
          public Builder ClearMetadata() {
            PrepareBuilder();
            result.metadata_.Clear();
            return this;
          }
          
          public bool HasMinVersion {
            get { return result.hasMinVersion; }
          }
          public string MinVersion {
            get { return result.MinVersion; }
            set { SetMinVersion(value); }
          }
          public Builder SetMinVersion(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasMinVersion = true;
            result.minVersion_ = value;
            return this;
          }
          public Builder ClearMinVersion() {
            PrepareBuilder();
            result.hasMinVersion = false;
            result.minVersion_ = "";
            return this;
          }
          
          public bool HasMaxVersion {
            get { return result.hasMaxVersion; }
          }
          public string MaxVersion {
            get { return result.MaxVersion; }
            set { SetMaxVersion(value); }
          }
          public Builder SetMaxVersion(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasMaxVersion = true;
            result.maxVersion_ = value;
            return this;
          }
          public Builder ClearMaxVersion() {
            PrepareBuilder();
            result.hasMaxVersion = false;
            result.maxVersion_ = "";
            return this;
          }
          
          public bool HasAdvanced {
            get { return result.hasAdvanced; }
          }
          public bool Advanced {
            get { return result.Advanced; }
            set { SetAdvanced(value); }
          }
          public Builder SetAdvanced(bool value) {
            PrepareBuilder();
            result.hasAdvanced = true;
            result.advanced_ = value;
            return this;
          }
          public Builder ClearAdvanced() {
            PrepareBuilder();
            result.hasAdvanced = false;
            result.advanced_ = false;
            return this;
          }
          
          public pbc::IPopsicleList<string> PluginList {
            get { return PrepareBuilder().plugin_; }
          }
          public int PluginCount {
            get { return result.PluginCount; }
          }
          public string GetPlugin(int index) {
            return result.GetPlugin(index);
          }
          public Builder SetPlugin(int index, string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.plugin_[index] = value;
            return this;
          }
          public Builder AddPlugin(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.plugin_.Add(value);
            return this;
          }
          public Builder AddRangePlugin(scg::IEnumerable<string> values) {
            PrepareBuilder();
            result.plugin_.Add(values);
            return this;
          }
          public Builder ClearPlugin() {
            PrepareBuilder();
            result.plugin_.Clear();
            return this;
          }
        }
        static Information() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class KeyWordDescription : pb::GeneratedMessage<KeyWordDescription, KeyWordDescription.Builder> {
        private KeyWordDescription() { }
        private static readonly KeyWordDescription defaultInstance = new KeyWordDescription().MakeReadOnly();
        private static readonly string[] _keyWordDescriptionFieldNames = new string[] { "context", "key", "long_description", "parameter", "short_description" };
        private static readonly uint[] _keyWordDescriptionFieldTags = new uint[] { 18, 26, 50, 10, 42 };
        public static KeyWordDescription DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override KeyWordDescription DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override KeyWordDescription ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_Registry_KeyWordDescription__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<KeyWordDescription, KeyWordDescription.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_Registry_KeyWordDescription__FieldAccessorTable; }
        }
        
        public const int ParameterFieldNumber = 1;
        private bool hasParameter;
        private string parameter_ = "";
        public bool HasParameter {
          get { return hasParameter; }
        }
        public string Parameter {
          get { return parameter_; }
        }
        
        public const int ContextFieldNumber = 2;
        private bool hasContext;
        private string context_ = "";
        public bool HasContext {
          get { return hasContext; }
        }
        public string Context {
          get { return context_; }
        }
        
        public const int KeyFieldNumber = 3;
        private bool hasKey;
        private string key_ = "";
        public bool HasKey {
          get { return hasKey; }
        }
        public string Key {
          get { return key_; }
        }
        
        public const int ShortDescriptionFieldNumber = 5;
        private bool hasShortDescription;
        private string shortDescription_ = "";
        public bool HasShortDescription {
          get { return hasShortDescription; }
        }
        public string ShortDescription {
          get { return shortDescription_; }
        }
        
        public const int LongDescriptionFieldNumber = 6;
        private bool hasLongDescription;
        private string longDescription_ = "";
        public bool HasLongDescription {
          get { return hasLongDescription; }
        }
        public string LongDescription {
          get { return longDescription_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasParameter) return false;
            if (!hasKey) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _keyWordDescriptionFieldNames;
          if (hasParameter) {
            output.WriteString(1, field_names[3], Parameter);
          }
          if (hasContext) {
            output.WriteString(2, field_names[0], Context);
          }
          if (hasKey) {
            output.WriteString(3, field_names[1], Key);
          }
          if (hasShortDescription) {
            output.WriteString(5, field_names[4], ShortDescription);
          }
          if (hasLongDescription) {
            output.WriteString(6, field_names[2], LongDescription);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasParameter) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Parameter);
            }
            if (hasContext) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Context);
            }
            if (hasKey) {
              size += pb::CodedOutputStream.ComputeStringSize(3, Key);
            }
            if (hasShortDescription) {
              size += pb::CodedOutputStream.ComputeStringSize(5, ShortDescription);
            }
            if (hasLongDescription) {
              size += pb::CodedOutputStream.ComputeStringSize(6, LongDescription);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static KeyWordDescription ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static KeyWordDescription ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static KeyWordDescription ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static KeyWordDescription ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static KeyWordDescription ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static KeyWordDescription ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static KeyWordDescription ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static KeyWordDescription ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static KeyWordDescription ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static KeyWordDescription ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private KeyWordDescription MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(KeyWordDescription prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<KeyWordDescription, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(KeyWordDescription cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private KeyWordDescription result;
          
          private KeyWordDescription PrepareBuilder() {
            if (resultIsReadOnly) {
              KeyWordDescription original = result;
              result = new KeyWordDescription();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override KeyWordDescription MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.Registry.Types.KeyWordDescription.Descriptor; }
          }
          
          public override KeyWordDescription DefaultInstanceForType {
            get { return global::Plugin.Registry.Types.KeyWordDescription.DefaultInstance; }
          }
          
          public override KeyWordDescription BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is KeyWordDescription) {
              return MergeFrom((KeyWordDescription) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(KeyWordDescription other) {
            if (other == global::Plugin.Registry.Types.KeyWordDescription.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasParameter) {
              Parameter = other.Parameter;
            }
            if (other.HasContext) {
              Context = other.Context;
            }
            if (other.HasKey) {
              Key = other.Key;
            }
            if (other.HasShortDescription) {
              ShortDescription = other.ShortDescription;
            }
            if (other.HasLongDescription) {
              LongDescription = other.LongDescription;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_keyWordDescriptionFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _keyWordDescriptionFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasParameter = input.ReadString(ref result.parameter_);
                  break;
                }
                case 18: {
                  result.hasContext = input.ReadString(ref result.context_);
                  break;
                }
                case 26: {
                  result.hasKey = input.ReadString(ref result.key_);
                  break;
                }
                case 42: {
                  result.hasShortDescription = input.ReadString(ref result.shortDescription_);
                  break;
                }
                case 50: {
                  result.hasLongDescription = input.ReadString(ref result.longDescription_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasParameter {
            get { return result.hasParameter; }
          }
          public string Parameter {
            get { return result.Parameter; }
            set { SetParameter(value); }
          }
          public Builder SetParameter(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasParameter = true;
            result.parameter_ = value;
            return this;
          }
          public Builder ClearParameter() {
            PrepareBuilder();
            result.hasParameter = false;
            result.parameter_ = "";
            return this;
          }
          
          public bool HasContext {
            get { return result.hasContext; }
          }
          public string Context {
            get { return result.Context; }
            set { SetContext(value); }
          }
          public Builder SetContext(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasContext = true;
            result.context_ = value;
            return this;
          }
          public Builder ClearContext() {
            PrepareBuilder();
            result.hasContext = false;
            result.context_ = "";
            return this;
          }
          
          public bool HasKey {
            get { return result.hasKey; }
          }
          public string Key {
            get { return result.Key; }
            set { SetKey(value); }
          }
          public Builder SetKey(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasKey = true;
            result.key_ = value;
            return this;
          }
          public Builder ClearKey() {
            PrepareBuilder();
            result.hasKey = false;
            result.key_ = "";
            return this;
          }
          
          public bool HasShortDescription {
            get { return result.hasShortDescription; }
          }
          public string ShortDescription {
            get { return result.ShortDescription; }
            set { SetShortDescription(value); }
          }
          public Builder SetShortDescription(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasShortDescription = true;
            result.shortDescription_ = value;
            return this;
          }
          public Builder ClearShortDescription() {
            PrepareBuilder();
            result.hasShortDescription = false;
            result.shortDescription_ = "";
            return this;
          }
          
          public bool HasLongDescription {
            get { return result.hasLongDescription; }
          }
          public string LongDescription {
            get { return result.LongDescription; }
            set { SetLongDescription(value); }
          }
          public Builder SetLongDescription(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasLongDescription = true;
            result.longDescription_ = value;
            return this;
          }
          public Builder ClearLongDescription() {
            PrepareBuilder();
            result.hasLongDescription = false;
            result.longDescription_ = "";
            return this;
          }
        }
        static KeyWordDescription() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class ParameterDetail : pb::GeneratedMessage<ParameterDetail, ParameterDetail.Builder> {
        private ParameterDetail() { }
        private static readonly ParameterDetail defaultInstance = new ParameterDetail().MakeReadOnly();
        private static readonly string[] _parameterDetailFieldNames = new string[] { "content_type", "default_value", "keyword", "long_description", "name", "repeatable", "required", "short_description" };
        private static readonly uint[] _parameterDetailFieldTags = new uint[] { 40, 18, 66, 58, 10, 32, 24, 50 };
        public static ParameterDetail DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override ParameterDetail DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override ParameterDetail ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_Registry_ParameterDetail__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<ParameterDetail, ParameterDetail.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_Registry_ParameterDetail__FieldAccessorTable; }
        }
        
        public const int NameFieldNumber = 1;
        private bool hasName;
        private string name_ = "";
        public bool HasName {
          get { return hasName; }
        }
        public string Name {
          get { return name_; }
        }
        
        public const int DefaultValueFieldNumber = 2;
        private bool hasDefaultValue;
        private string defaultValue_ = "";
        public bool HasDefaultValue {
          get { return hasDefaultValue; }
        }
        public string DefaultValue {
          get { return defaultValue_; }
        }
        
        public const int RequiredFieldNumber = 3;
        private bool hasRequired;
        private bool required_;
        public bool HasRequired {
          get { return hasRequired; }
        }
        public bool Required {
          get { return required_; }
        }
        
        public const int RepeatableFieldNumber = 4;
        private bool hasRepeatable;
        private bool repeatable_;
        public bool HasRepeatable {
          get { return hasRepeatable; }
        }
        public bool Repeatable {
          get { return repeatable_; }
        }
        
        public const int ContentTypeFieldNumber = 5;
        private bool hasContentType;
        private global::Plugin.Common.Types.DataType contentType_ = global::Plugin.Common.Types.DataType.INT;
        public bool HasContentType {
          get { return hasContentType; }
        }
        public global::Plugin.Common.Types.DataType ContentType {
          get { return contentType_; }
        }
        
        public const int ShortDescriptionFieldNumber = 6;
        private bool hasShortDescription;
        private string shortDescription_ = "";
        public bool HasShortDescription {
          get { return hasShortDescription; }
        }
        public string ShortDescription {
          get { return shortDescription_; }
        }
        
        public const int LongDescriptionFieldNumber = 7;
        private bool hasLongDescription;
        private string longDescription_ = "";
        public bool HasLongDescription {
          get { return hasLongDescription; }
        }
        public string LongDescription {
          get { return longDescription_; }
        }
        
        public const int KeywordFieldNumber = 8;
        private pbc::PopsicleList<global::Plugin.Registry.Types.KeyWordDescription> keyword_ = new pbc::PopsicleList<global::Plugin.Registry.Types.KeyWordDescription>();
        public scg::IList<global::Plugin.Registry.Types.KeyWordDescription> KeywordList {
          get { return keyword_; }
        }
        public int KeywordCount {
          get { return keyword_.Count; }
        }
        public global::Plugin.Registry.Types.KeyWordDescription GetKeyword(int index) {
          return keyword_[index];
        }
        
        public override bool IsInitialized {
          get {
            foreach (global::Plugin.Registry.Types.KeyWordDescription element in KeywordList) {
              if (!element.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _parameterDetailFieldNames;
          if (hasName) {
            output.WriteString(1, field_names[4], Name);
          }
          if (hasDefaultValue) {
            output.WriteString(2, field_names[1], DefaultValue);
          }
          if (hasRequired) {
            output.WriteBool(3, field_names[6], Required);
          }
          if (hasRepeatable) {
            output.WriteBool(4, field_names[5], Repeatable);
          }
          if (hasContentType) {
            output.WriteEnum(5, field_names[0], (int) ContentType, ContentType);
          }
          if (hasShortDescription) {
            output.WriteString(6, field_names[7], ShortDescription);
          }
          if (hasLongDescription) {
            output.WriteString(7, field_names[3], LongDescription);
          }
          if (keyword_.Count > 0) {
            output.WriteMessageArray(8, field_names[2], keyword_);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasName) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Name);
            }
            if (hasDefaultValue) {
              size += pb::CodedOutputStream.ComputeStringSize(2, DefaultValue);
            }
            if (hasRequired) {
              size += pb::CodedOutputStream.ComputeBoolSize(3, Required);
            }
            if (hasRepeatable) {
              size += pb::CodedOutputStream.ComputeBoolSize(4, Repeatable);
            }
            if (hasContentType) {
              size += pb::CodedOutputStream.ComputeEnumSize(5, (int) ContentType);
            }
            if (hasShortDescription) {
              size += pb::CodedOutputStream.ComputeStringSize(6, ShortDescription);
            }
            if (hasLongDescription) {
              size += pb::CodedOutputStream.ComputeStringSize(7, LongDescription);
            }
            foreach (global::Plugin.Registry.Types.KeyWordDescription element in KeywordList) {
              size += pb::CodedOutputStream.ComputeMessageSize(8, element);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static ParameterDetail ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ParameterDetail ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ParameterDetail ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ParameterDetail ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ParameterDetail ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ParameterDetail ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ParameterDetail ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ParameterDetail ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ParameterDetail ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ParameterDetail ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ParameterDetail MakeReadOnly() {
          keyword_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ParameterDetail prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<ParameterDetail, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(ParameterDetail cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private ParameterDetail result;
          
          private ParameterDetail PrepareBuilder() {
            if (resultIsReadOnly) {
              ParameterDetail original = result;
              result = new ParameterDetail();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override ParameterDetail MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.Registry.Types.ParameterDetail.Descriptor; }
          }
          
          public override ParameterDetail DefaultInstanceForType {
            get { return global::Plugin.Registry.Types.ParameterDetail.DefaultInstance; }
          }
          
          public override ParameterDetail BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is ParameterDetail) {
              return MergeFrom((ParameterDetail) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(ParameterDetail other) {
            if (other == global::Plugin.Registry.Types.ParameterDetail.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasName) {
              Name = other.Name;
            }
            if (other.HasDefaultValue) {
              DefaultValue = other.DefaultValue;
            }
            if (other.HasRequired) {
              Required = other.Required;
            }
            if (other.HasRepeatable) {
              Repeatable = other.Repeatable;
            }
            if (other.HasContentType) {
              ContentType = other.ContentType;
            }
            if (other.HasShortDescription) {
              ShortDescription = other.ShortDescription;
            }
            if (other.HasLongDescription) {
              LongDescription = other.LongDescription;
            }
            if (other.keyword_.Count != 0) {
              result.keyword_.Add(other.keyword_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_parameterDetailFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _parameterDetailFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasName = input.ReadString(ref result.name_);
                  break;
                }
                case 18: {
                  result.hasDefaultValue = input.ReadString(ref result.defaultValue_);
                  break;
                }
                case 24: {
                  result.hasRequired = input.ReadBool(ref result.required_);
                  break;
                }
                case 32: {
                  result.hasRepeatable = input.ReadBool(ref result.repeatable_);
                  break;
                }
                case 40: {
                  object unknown;
                  if(input.ReadEnum(ref result.contentType_, out unknown)) {
                    result.hasContentType = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(5, (ulong)(int)unknown);
                  }
                  break;
                }
                case 50: {
                  result.hasShortDescription = input.ReadString(ref result.shortDescription_);
                  break;
                }
                case 58: {
                  result.hasLongDescription = input.ReadString(ref result.longDescription_);
                  break;
                }
                case 66: {
                  input.ReadMessageArray(tag, field_name, result.keyword_, global::Plugin.Registry.Types.KeyWordDescription.DefaultInstance, extensionRegistry);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasName {
            get { return result.hasName; }
          }
          public string Name {
            get { return result.Name; }
            set { SetName(value); }
          }
          public Builder SetName(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasName = true;
            result.name_ = value;
            return this;
          }
          public Builder ClearName() {
            PrepareBuilder();
            result.hasName = false;
            result.name_ = "";
            return this;
          }
          
          public bool HasDefaultValue {
            get { return result.hasDefaultValue; }
          }
          public string DefaultValue {
            get { return result.DefaultValue; }
            set { SetDefaultValue(value); }
          }
          public Builder SetDefaultValue(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasDefaultValue = true;
            result.defaultValue_ = value;
            return this;
          }
          public Builder ClearDefaultValue() {
            PrepareBuilder();
            result.hasDefaultValue = false;
            result.defaultValue_ = "";
            return this;
          }
          
          public bool HasRequired {
            get { return result.hasRequired; }
          }
          public bool Required {
            get { return result.Required; }
            set { SetRequired(value); }
          }
          public Builder SetRequired(bool value) {
            PrepareBuilder();
            result.hasRequired = true;
            result.required_ = value;
            return this;
          }
          public Builder ClearRequired() {
            PrepareBuilder();
            result.hasRequired = false;
            result.required_ = false;
            return this;
          }
          
          public bool HasRepeatable {
            get { return result.hasRepeatable; }
          }
          public bool Repeatable {
            get { return result.Repeatable; }
            set { SetRepeatable(value); }
          }
          public Builder SetRepeatable(bool value) {
            PrepareBuilder();
            result.hasRepeatable = true;
            result.repeatable_ = value;
            return this;
          }
          public Builder ClearRepeatable() {
            PrepareBuilder();
            result.hasRepeatable = false;
            result.repeatable_ = false;
            return this;
          }
          
          public bool HasContentType {
           get { return result.hasContentType; }
          }
          public global::Plugin.Common.Types.DataType ContentType {
            get { return result.ContentType; }
            set { SetContentType(value); }
          }
          public Builder SetContentType(global::Plugin.Common.Types.DataType value) {
            PrepareBuilder();
            result.hasContentType = true;
            result.contentType_ = value;
            return this;
          }
          public Builder ClearContentType() {
            PrepareBuilder();
            result.hasContentType = false;
            result.contentType_ = global::Plugin.Common.Types.DataType.INT;
            return this;
          }
          
          public bool HasShortDescription {
            get { return result.hasShortDescription; }
          }
          public string ShortDescription {
            get { return result.ShortDescription; }
            set { SetShortDescription(value); }
          }
          public Builder SetShortDescription(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasShortDescription = true;
            result.shortDescription_ = value;
            return this;
          }
          public Builder ClearShortDescription() {
            PrepareBuilder();
            result.hasShortDescription = false;
            result.shortDescription_ = "";
            return this;
          }
          
          public bool HasLongDescription {
            get { return result.hasLongDescription; }
          }
          public string LongDescription {
            get { return result.LongDescription; }
            set { SetLongDescription(value); }
          }
          public Builder SetLongDescription(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasLongDescription = true;
            result.longDescription_ = value;
            return this;
          }
          public Builder ClearLongDescription() {
            PrepareBuilder();
            result.hasLongDescription = false;
            result.longDescription_ = "";
            return this;
          }
          
          public pbc::IPopsicleList<global::Plugin.Registry.Types.KeyWordDescription> KeywordList {
            get { return PrepareBuilder().keyword_; }
          }
          public int KeywordCount {
            get { return result.KeywordCount; }
          }
          public global::Plugin.Registry.Types.KeyWordDescription GetKeyword(int index) {
            return result.GetKeyword(index);
          }
          public Builder SetKeyword(int index, global::Plugin.Registry.Types.KeyWordDescription value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.keyword_[index] = value;
            return this;
          }
          public Builder SetKeyword(int index, global::Plugin.Registry.Types.KeyWordDescription.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.keyword_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddKeyword(global::Plugin.Registry.Types.KeyWordDescription value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.keyword_.Add(value);
            return this;
          }
          public Builder AddKeyword(global::Plugin.Registry.Types.KeyWordDescription.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.keyword_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeKeyword(scg::IEnumerable<global::Plugin.Registry.Types.KeyWordDescription> values) {
            PrepareBuilder();
            result.keyword_.Add(values);
            return this;
          }
          public Builder ClearKeyword() {
            PrepareBuilder();
            result.keyword_.Clear();
            return this;
          }
        }
        static ParameterDetail() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class ParameterDetails : pb::GeneratedMessage<ParameterDetails, ParameterDetails.Builder> {
        private ParameterDetails() { }
        private static readonly ParameterDetails defaultInstance = new ParameterDetails().MakeReadOnly();
        private static readonly string[] _parameterDetailsFieldNames = new string[] { "parameter" };
        private static readonly uint[] _parameterDetailsFieldTags = new uint[] { 10 };
        public static ParameterDetails DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override ParameterDetails DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override ParameterDetails ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_Registry_ParameterDetails__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<ParameterDetails, ParameterDetails.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_Registry_ParameterDetails__FieldAccessorTable; }
        }
        
        public const int ParameterFieldNumber = 1;
        private pbc::PopsicleList<global::Plugin.Registry.Types.ParameterDetail> parameter_ = new pbc::PopsicleList<global::Plugin.Registry.Types.ParameterDetail>();
        public scg::IList<global::Plugin.Registry.Types.ParameterDetail> ParameterList {
          get { return parameter_; }
        }
        public int ParameterCount {
          get { return parameter_.Count; }
        }
        public global::Plugin.Registry.Types.ParameterDetail GetParameter(int index) {
          return parameter_[index];
        }
        
        public override bool IsInitialized {
          get {
            foreach (global::Plugin.Registry.Types.ParameterDetail element in ParameterList) {
              if (!element.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _parameterDetailsFieldNames;
          if (parameter_.Count > 0) {
            output.WriteMessageArray(1, field_names[0], parameter_);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            foreach (global::Plugin.Registry.Types.ParameterDetail element in ParameterList) {
              size += pb::CodedOutputStream.ComputeMessageSize(1, element);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static ParameterDetails ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ParameterDetails ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ParameterDetails ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ParameterDetails ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ParameterDetails ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ParameterDetails ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ParameterDetails ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ParameterDetails ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ParameterDetails ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ParameterDetails ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ParameterDetails MakeReadOnly() {
          parameter_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ParameterDetails prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<ParameterDetails, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(ParameterDetails cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private ParameterDetails result;
          
          private ParameterDetails PrepareBuilder() {
            if (resultIsReadOnly) {
              ParameterDetails original = result;
              result = new ParameterDetails();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override ParameterDetails MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.Registry.Types.ParameterDetails.Descriptor; }
          }
          
          public override ParameterDetails DefaultInstanceForType {
            get { return global::Plugin.Registry.Types.ParameterDetails.DefaultInstance; }
          }
          
          public override ParameterDetails BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is ParameterDetails) {
              return MergeFrom((ParameterDetails) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(ParameterDetails other) {
            if (other == global::Plugin.Registry.Types.ParameterDetails.DefaultInstance) return this;
            PrepareBuilder();
            if (other.parameter_.Count != 0) {
              result.parameter_.Add(other.parameter_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_parameterDetailsFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _parameterDetailsFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  input.ReadMessageArray(tag, field_name, result.parameter_, global::Plugin.Registry.Types.ParameterDetail.DefaultInstance, extensionRegistry);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public pbc::IPopsicleList<global::Plugin.Registry.Types.ParameterDetail> ParameterList {
            get { return PrepareBuilder().parameter_; }
          }
          public int ParameterCount {
            get { return result.ParameterCount; }
          }
          public global::Plugin.Registry.Types.ParameterDetail GetParameter(int index) {
            return result.GetParameter(index);
          }
          public Builder SetParameter(int index, global::Plugin.Registry.Types.ParameterDetail value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.parameter_[index] = value;
            return this;
          }
          public Builder SetParameter(int index, global::Plugin.Registry.Types.ParameterDetail.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.parameter_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddParameter(global::Plugin.Registry.Types.ParameterDetail value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.parameter_.Add(value);
            return this;
          }
          public Builder AddParameter(global::Plugin.Registry.Types.ParameterDetail.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.parameter_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeParameter(scg::IEnumerable<global::Plugin.Registry.Types.ParameterDetail> values) {
            PrepareBuilder();
            result.parameter_.Add(values);
            return this;
          }
          public Builder ClearParameter() {
            PrepareBuilder();
            result.parameter_.Clear();
            return this;
          }
        }
        static ParameterDetails() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Schedule : pb::GeneratedMessage<Schedule, Schedule.Builder> {
        private Schedule() { }
        private static readonly Schedule defaultInstance = new Schedule().MakeReadOnly();
        private static readonly string[] _scheduleFieldNames = new string[] { "cron", "id", "interval" };
        private static readonly uint[] _scheduleFieldTags = new uint[] { 18, 10, 26 };
        public static Schedule DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Schedule DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Schedule ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_Registry_Schedule__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Schedule, Schedule.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_Registry_Schedule__FieldAccessorTable; }
        }
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private string id_ = "";
        public bool HasId {
          get { return hasId; }
        }
        public string Id {
          get { return id_; }
        }
        
        public const int CronFieldNumber = 2;
        private bool hasCron;
        private string cron_ = "";
        public bool HasCron {
          get { return hasCron; }
        }
        public string Cron {
          get { return cron_; }
        }
        
        public const int IntervalFieldNumber = 3;
        private bool hasInterval;
        private string interval_ = "";
        public bool HasInterval {
          get { return hasInterval; }
        }
        public string Interval {
          get { return interval_; }
        }
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _scheduleFieldNames;
          if (hasId) {
            output.WriteString(1, field_names[1], Id);
          }
          if (hasCron) {
            output.WriteString(2, field_names[0], Cron);
          }
          if (hasInterval) {
            output.WriteString(3, field_names[2], Interval);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasId) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Id);
            }
            if (hasCron) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Cron);
            }
            if (hasInterval) {
              size += pb::CodedOutputStream.ComputeStringSize(3, Interval);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Schedule ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Schedule ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Schedule ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Schedule ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Schedule ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Schedule ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Schedule ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Schedule ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Schedule ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Schedule ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Schedule MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Schedule prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Schedule, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Schedule cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Schedule result;
          
          private Schedule PrepareBuilder() {
            if (resultIsReadOnly) {
              Schedule original = result;
              result = new Schedule();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Schedule MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.Registry.Types.Schedule.Descriptor; }
          }
          
          public override Schedule DefaultInstanceForType {
            get { return global::Plugin.Registry.Types.Schedule.DefaultInstance; }
          }
          
          public override Schedule BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Schedule) {
              return MergeFrom((Schedule) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Schedule other) {
            if (other == global::Plugin.Registry.Types.Schedule.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasCron) {
              Cron = other.Cron;
            }
            if (other.HasInterval) {
              Interval = other.Interval;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_scheduleFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _scheduleFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasId = input.ReadString(ref result.id_);
                  break;
                }
                case 18: {
                  result.hasCron = input.ReadString(ref result.cron_);
                  break;
                }
                case 26: {
                  result.hasInterval = input.ReadString(ref result.interval_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public string Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = "";
            return this;
          }
          
          public bool HasCron {
            get { return result.hasCron; }
          }
          public string Cron {
            get { return result.Cron; }
            set { SetCron(value); }
          }
          public Builder SetCron(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasCron = true;
            result.cron_ = value;
            return this;
          }
          public Builder ClearCron() {
            PrepareBuilder();
            result.hasCron = false;
            result.cron_ = "";
            return this;
          }
          
          public bool HasInterval {
            get { return result.hasInterval; }
          }
          public string Interval {
            get { return result.Interval; }
            set { SetInterval(value); }
          }
          public Builder SetInterval(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasInterval = true;
            result.interval_ = value;
            return this;
          }
          public Builder ClearInterval() {
            PrepareBuilder();
            result.hasInterval = false;
            result.interval_ = "";
            return this;
          }
        }
        static Schedule() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _registryFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Registry ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Registry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Registry ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Registry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Registry ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Registry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Registry ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Registry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Registry ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Registry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Registry MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Registry prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Registry, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Registry cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Registry result;
      
      private Registry PrepareBuilder() {
        if (resultIsReadOnly) {
          Registry original = result;
          result = new Registry();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Registry MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.Registry.Descriptor; }
      }
      
      public override Registry DefaultInstanceForType {
        get { return global::Plugin.Registry.DefaultInstance; }
      }
      
      public override Registry BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Registry) {
          return MergeFrom((Registry) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Registry other) {
        if (other == global::Plugin.Registry.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_registryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _registryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static Registry() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RegistryRequestMessage : pb::GeneratedMessage<RegistryRequestMessage, RegistryRequestMessage.Builder> {
    private RegistryRequestMessage() { }
    private static readonly RegistryRequestMessage defaultInstance = new RegistryRequestMessage().MakeReadOnly();
    private static readonly string[] _registryRequestMessageFieldNames = new string[] { "header", "payload" };
    private static readonly uint[] _registryRequestMessageFieldTags = new uint[] { 10, 18 };
    public static RegistryRequestMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RegistryRequestMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RegistryRequestMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_RegistryRequestMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RegistryRequestMessage, RegistryRequestMessage.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_RegistryRequestMessage__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Request : pb::GeneratedMessage<Request, Request.Builder> {
        private Request() { }
        private static readonly Request defaultInstance = new Request().MakeReadOnly();
        private static readonly string[] _requestFieldNames = new string[] { "control", "id", "inventory", "registration" };
        private static readonly uint[] _requestFieldTags = new uint[] { 42, 8, 34, 26 };
        public static Request DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Request DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Request ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_RegistryRequestMessage_Request__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Request, Request.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_RegistryRequestMessage_Request__FieldAccessorTable; }
        }
        
        #region Nested types
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static partial class Types {
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Registration : pb::GeneratedMessage<Registration, Registration.Builder> {
            private Registration() { }
            private static readonly Registration defaultInstance = new Registration().MakeReadOnly();
            private static readonly string[] _registrationFieldNames = new string[] { "alias", "info", "name", "plugin_id", "schedule", "type", "unregister" };
            private static readonly uint[] _registrationFieldTags = new uint[] { 74, 34, 26, 8, 162, 16, 40 };
            public static Registration DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Registration DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Registration ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_RegistryRequestMessage_Request_Registration__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Registration, Registration.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_RegistryRequestMessage_Request_Registration__FieldAccessorTable; }
            }
            
            public const int PluginIdFieldNumber = 1;
            private bool hasPluginId;
            private int pluginId_;
            public bool HasPluginId {
              get { return hasPluginId; }
            }
            public int PluginId {
              get { return pluginId_; }
            }
            
            public const int TypeFieldNumber = 2;
            private bool hasType;
            private global::Plugin.Registry.Types.ItemType type_ = global::Plugin.Registry.Types.ItemType.QUERY;
            public bool HasType {
              get { return hasType; }
            }
            public global::Plugin.Registry.Types.ItemType Type {
              get { return type_; }
            }
            
            public const int NameFieldNumber = 3;
            private bool hasName;
            private string name_ = "";
            public bool HasName {
              get { return hasName; }
            }
            public string Name {
              get { return name_; }
            }
            
            public const int InfoFieldNumber = 4;
            private bool hasInfo;
            private global::Plugin.Registry.Types.Information info_;
            public bool HasInfo {
              get { return hasInfo; }
            }
            public global::Plugin.Registry.Types.Information Info {
              get { return info_ ?? global::Plugin.Registry.Types.Information.DefaultInstance; }
            }
            
            public const int UnregisterFieldNumber = 5;
            private bool hasUnregister;
            private bool unregister_;
            public bool HasUnregister {
              get { return hasUnregister; }
            }
            public bool Unregister {
              get { return unregister_; }
            }
            
            public const int AliasFieldNumber = 9;
            private pbc::PopsicleList<string> alias_ = new pbc::PopsicleList<string>();
            public scg::IList<string> AliasList {
              get { return pbc::Lists.AsReadOnly(alias_); }
            }
            public int AliasCount {
              get { return alias_.Count; }
            }
            public string GetAlias(int index) {
              return alias_[index];
            }
            
            public const int ScheduleFieldNumber = 20;
            private pbc::PopsicleList<global::Plugin.Registry.Types.Schedule> schedule_ = new pbc::PopsicleList<global::Plugin.Registry.Types.Schedule>();
            public scg::IList<global::Plugin.Registry.Types.Schedule> ScheduleList {
              get { return schedule_; }
            }
            public int ScheduleCount {
              get { return schedule_.Count; }
            }
            public global::Plugin.Registry.Types.Schedule GetSchedule(int index) {
              return schedule_[index];
            }
            
            public override bool IsInitialized {
              get {
                if (!hasType) return false;
                if (!hasName) return false;
                if (HasInfo) {
                  if (!Info.IsInitialized) return false;
                }
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _registrationFieldNames;
              if (hasPluginId) {
                output.WriteInt32(1, field_names[3], PluginId);
              }
              if (hasType) {
                output.WriteEnum(2, field_names[5], (int) Type, Type);
              }
              if (hasName) {
                output.WriteString(3, field_names[2], Name);
              }
              if (hasInfo) {
                output.WriteMessage(4, field_names[1], Info);
              }
              if (hasUnregister) {
                output.WriteBool(5, field_names[6], Unregister);
              }
              if (alias_.Count > 0) {
                output.WriteStringArray(9, field_names[0], alias_);
              }
              if (schedule_.Count > 0) {
                output.WriteMessageArray(20, field_names[4], schedule_);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                if (hasPluginId) {
                  size += pb::CodedOutputStream.ComputeInt32Size(1, PluginId);
                }
                if (hasType) {
                  size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Type);
                }
                if (hasName) {
                  size += pb::CodedOutputStream.ComputeStringSize(3, Name);
                }
                if (hasInfo) {
                  size += pb::CodedOutputStream.ComputeMessageSize(4, Info);
                }
                if (hasUnregister) {
                  size += pb::CodedOutputStream.ComputeBoolSize(5, Unregister);
                }
                {
                  int dataSize = 0;
                  foreach (string element in AliasList) {
                    dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
                  }
                  size += dataSize;
                  size += 1 * alias_.Count;
                }
                foreach (global::Plugin.Registry.Types.Schedule element in ScheduleList) {
                  size += pb::CodedOutputStream.ComputeMessageSize(20, element);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static Registration ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Registration ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Registration ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Registration ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Registration ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Registration ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Registration ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Registration ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Registration ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Registration ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Registration MakeReadOnly() {
              alias_.MakeReadOnly();
              schedule_.MakeReadOnly();
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Registration prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Registration, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Registration cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Registration result;
              
              private Registration PrepareBuilder() {
                if (resultIsReadOnly) {
                  Registration original = result;
                  result = new Registration();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Registration MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.RegistryRequestMessage.Types.Request.Types.Registration.Descriptor; }
              }
              
              public override Registration DefaultInstanceForType {
                get { return global::Plugin.RegistryRequestMessage.Types.Request.Types.Registration.DefaultInstance; }
              }
              
              public override Registration BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Registration) {
                  return MergeFrom((Registration) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Registration other) {
                if (other == global::Plugin.RegistryRequestMessage.Types.Request.Types.Registration.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasPluginId) {
                  PluginId = other.PluginId;
                }
                if (other.HasType) {
                  Type = other.Type;
                }
                if (other.HasName) {
                  Name = other.Name;
                }
                if (other.HasInfo) {
                  MergeInfo(other.Info);
                }
                if (other.HasUnregister) {
                  Unregister = other.Unregister;
                }
                if (other.alias_.Count != 0) {
                  result.alias_.Add(other.alias_);
                }
                if (other.schedule_.Count != 0) {
                  result.schedule_.Add(other.schedule_);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_registrationFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _registrationFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 8: {
                      result.hasPluginId = input.ReadInt32(ref result.pluginId_);
                      break;
                    }
                    case 16: {
                      object unknown;
                      if(input.ReadEnum(ref result.type_, out unknown)) {
                        result.hasType = true;
                      } else if(unknown is int) {
                        if (unknownFields == null) {
                          unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        unknownFields.MergeVarintField(2, (ulong)(int)unknown);
                      }
                      break;
                    }
                    case 26: {
                      result.hasName = input.ReadString(ref result.name_);
                      break;
                    }
                    case 34: {
                      global::Plugin.Registry.Types.Information.Builder subBuilder = global::Plugin.Registry.Types.Information.CreateBuilder();
                      if (result.hasInfo) {
                        subBuilder.MergeFrom(Info);
                      }
                      input.ReadMessage(subBuilder, extensionRegistry);
                      Info = subBuilder.BuildPartial();
                      break;
                    }
                    case 40: {
                      result.hasUnregister = input.ReadBool(ref result.unregister_);
                      break;
                    }
                    case 74: {
                      input.ReadStringArray(tag, field_name, result.alias_);
                      break;
                    }
                    case 162: {
                      input.ReadMessageArray(tag, field_name, result.schedule_, global::Plugin.Registry.Types.Schedule.DefaultInstance, extensionRegistry);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasPluginId {
                get { return result.hasPluginId; }
              }
              public int PluginId {
                get { return result.PluginId; }
                set { SetPluginId(value); }
              }
              public Builder SetPluginId(int value) {
                PrepareBuilder();
                result.hasPluginId = true;
                result.pluginId_ = value;
                return this;
              }
              public Builder ClearPluginId() {
                PrepareBuilder();
                result.hasPluginId = false;
                result.pluginId_ = 0;
                return this;
              }
              
              public bool HasType {
               get { return result.hasType; }
              }
              public global::Plugin.Registry.Types.ItemType Type {
                get { return result.Type; }
                set { SetType(value); }
              }
              public Builder SetType(global::Plugin.Registry.Types.ItemType value) {
                PrepareBuilder();
                result.hasType = true;
                result.type_ = value;
                return this;
              }
              public Builder ClearType() {
                PrepareBuilder();
                result.hasType = false;
                result.type_ = global::Plugin.Registry.Types.ItemType.QUERY;
                return this;
              }
              
              public bool HasName {
                get { return result.hasName; }
              }
              public string Name {
                get { return result.Name; }
                set { SetName(value); }
              }
              public Builder SetName(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasName = true;
                result.name_ = value;
                return this;
              }
              public Builder ClearName() {
                PrepareBuilder();
                result.hasName = false;
                result.name_ = "";
                return this;
              }
              
              public bool HasInfo {
               get { return result.hasInfo; }
              }
              public global::Plugin.Registry.Types.Information Info {
                get { return result.Info; }
                set { SetInfo(value); }
              }
              public Builder SetInfo(global::Plugin.Registry.Types.Information value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasInfo = true;
                result.info_ = value;
                return this;
              }
              public Builder SetInfo(global::Plugin.Registry.Types.Information.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasInfo = true;
                result.info_ = builderForValue.Build();
                return this;
              }
              public Builder MergeInfo(global::Plugin.Registry.Types.Information value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasInfo &&
                    result.info_ != global::Plugin.Registry.Types.Information.DefaultInstance) {
                    result.info_ = global::Plugin.Registry.Types.Information.CreateBuilder(result.info_).MergeFrom(value).BuildPartial();
                } else {
                  result.info_ = value;
                }
                result.hasInfo = true;
                return this;
              }
              public Builder ClearInfo() {
                PrepareBuilder();
                result.hasInfo = false;
                result.info_ = null;
                return this;
              }
              
              public bool HasUnregister {
                get { return result.hasUnregister; }
              }
              public bool Unregister {
                get { return result.Unregister; }
                set { SetUnregister(value); }
              }
              public Builder SetUnregister(bool value) {
                PrepareBuilder();
                result.hasUnregister = true;
                result.unregister_ = value;
                return this;
              }
              public Builder ClearUnregister() {
                PrepareBuilder();
                result.hasUnregister = false;
                result.unregister_ = false;
                return this;
              }
              
              public pbc::IPopsicleList<string> AliasList {
                get { return PrepareBuilder().alias_; }
              }
              public int AliasCount {
                get { return result.AliasCount; }
              }
              public string GetAlias(int index) {
                return result.GetAlias(index);
              }
              public Builder SetAlias(int index, string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.alias_[index] = value;
                return this;
              }
              public Builder AddAlias(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.alias_.Add(value);
                return this;
              }
              public Builder AddRangeAlias(scg::IEnumerable<string> values) {
                PrepareBuilder();
                result.alias_.Add(values);
                return this;
              }
              public Builder ClearAlias() {
                PrepareBuilder();
                result.alias_.Clear();
                return this;
              }
              
              public pbc::IPopsicleList<global::Plugin.Registry.Types.Schedule> ScheduleList {
                get { return PrepareBuilder().schedule_; }
              }
              public int ScheduleCount {
                get { return result.ScheduleCount; }
              }
              public global::Plugin.Registry.Types.Schedule GetSchedule(int index) {
                return result.GetSchedule(index);
              }
              public Builder SetSchedule(int index, global::Plugin.Registry.Types.Schedule value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.schedule_[index] = value;
                return this;
              }
              public Builder SetSchedule(int index, global::Plugin.Registry.Types.Schedule.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.schedule_[index] = builderForValue.Build();
                return this;
              }
              public Builder AddSchedule(global::Plugin.Registry.Types.Schedule value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.schedule_.Add(value);
                return this;
              }
              public Builder AddSchedule(global::Plugin.Registry.Types.Schedule.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.schedule_.Add(builderForValue.Build());
                return this;
              }
              public Builder AddRangeSchedule(scg::IEnumerable<global::Plugin.Registry.Types.Schedule> values) {
                PrepareBuilder();
                result.schedule_.Add(values);
                return this;
              }
              public Builder ClearSchedule() {
                PrepareBuilder();
                result.schedule_.Clear();
                return this;
              }
            }
            static Registration() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Inventory : pb::GeneratedMessage<Inventory, Inventory.Builder> {
            private Inventory() { }
            private static readonly Inventory defaultInstance = new Inventory().MakeReadOnly();
            private static readonly string[] _inventoryFieldNames = new string[] { "fetch_all", "fetch_information", "name", "plugin", "type" };
            private static readonly uint[] _inventoryFieldTags = new uint[] { 48, 56, 26, 10, 16 };
            public static Inventory DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Inventory DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Inventory ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_RegistryRequestMessage_Request_Inventory__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Inventory, Inventory.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_RegistryRequestMessage_Request_Inventory__FieldAccessorTable; }
            }
            
            public const int PluginFieldNumber = 1;
            private bool hasPlugin;
            private string plugin_ = "";
            public bool HasPlugin {
              get { return hasPlugin; }
            }
            public string Plugin {
              get { return plugin_; }
            }
            
            public const int TypeFieldNumber = 2;
            private pbc::PopsicleList<global::Plugin.Registry.Types.ItemType> type_ = new pbc::PopsicleList<global::Plugin.Registry.Types.ItemType>();
            public scg::IList<global::Plugin.Registry.Types.ItemType> TypeList {
              get { return pbc::Lists.AsReadOnly(type_); }
            }
            public int TypeCount {
              get { return type_.Count; }
            }
            public global::Plugin.Registry.Types.ItemType GetType(int index) {
              return type_[index];
            }
            
            public const int NameFieldNumber = 3;
            private bool hasName;
            private string name_ = "";
            public bool HasName {
              get { return hasName; }
            }
            public string Name {
              get { return name_; }
            }
            
            public const int FetchAllFieldNumber = 6;
            private bool hasFetchAll;
            private bool fetchAll_;
            public bool HasFetchAll {
              get { return hasFetchAll; }
            }
            public bool FetchAll {
              get { return fetchAll_; }
            }
            
            public const int FetchInformationFieldNumber = 7;
            private bool hasFetchInformation;
            private bool fetchInformation_;
            public bool HasFetchInformation {
              get { return hasFetchInformation; }
            }
            public bool FetchInformation {
              get { return fetchInformation_; }
            }
            
            public override bool IsInitialized {
              get {
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _inventoryFieldNames;
              if (hasPlugin) {
                output.WriteString(1, field_names[3], Plugin);
              }
              if (type_.Count > 0) {
                output.WriteEnumArray(2, field_names[4], type_);
              }
              if (hasName) {
                output.WriteString(3, field_names[2], Name);
              }
              if (hasFetchAll) {
                output.WriteBool(6, field_names[0], FetchAll);
              }
              if (hasFetchInformation) {
                output.WriteBool(7, field_names[1], FetchInformation);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                if (hasPlugin) {
                  size += pb::CodedOutputStream.ComputeStringSize(1, Plugin);
                }
                {
                  int dataSize = 0;
                  if (type_.Count > 0) {
                    foreach (global::Plugin.Registry.Types.ItemType element in type_) {
                      dataSize += pb::CodedOutputStream.ComputeEnumSizeNoTag((int) element);
                    }
                    size += dataSize;
                    size += 1 * type_.Count;
                  }
                }
                if (hasName) {
                  size += pb::CodedOutputStream.ComputeStringSize(3, Name);
                }
                if (hasFetchAll) {
                  size += pb::CodedOutputStream.ComputeBoolSize(6, FetchAll);
                }
                if (hasFetchInformation) {
                  size += pb::CodedOutputStream.ComputeBoolSize(7, FetchInformation);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static Inventory ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Inventory ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Inventory ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Inventory ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Inventory ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Inventory ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Inventory ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Inventory ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Inventory ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Inventory ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Inventory MakeReadOnly() {
              type_.MakeReadOnly();
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Inventory prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Inventory, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Inventory cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Inventory result;
              
              private Inventory PrepareBuilder() {
                if (resultIsReadOnly) {
                  Inventory original = result;
                  result = new Inventory();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Inventory MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.RegistryRequestMessage.Types.Request.Types.Inventory.Descriptor; }
              }
              
              public override Inventory DefaultInstanceForType {
                get { return global::Plugin.RegistryRequestMessage.Types.Request.Types.Inventory.DefaultInstance; }
              }
              
              public override Inventory BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Inventory) {
                  return MergeFrom((Inventory) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Inventory other) {
                if (other == global::Plugin.RegistryRequestMessage.Types.Request.Types.Inventory.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasPlugin) {
                  Plugin = other.Plugin;
                }
                if (other.type_.Count != 0) {
                  result.type_.Add(other.type_);
                }
                if (other.HasName) {
                  Name = other.Name;
                }
                if (other.HasFetchAll) {
                  FetchAll = other.FetchAll;
                }
                if (other.HasFetchInformation) {
                  FetchInformation = other.FetchInformation;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_inventoryFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _inventoryFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 10: {
                      result.hasPlugin = input.ReadString(ref result.plugin_);
                      break;
                    }
                    case 18:
                    case 16: {
                      scg::ICollection<object> unknownItems;
                      input.ReadEnumArray<global::Plugin.Registry.Types.ItemType>(tag, field_name, result.type_, out unknownItems);
                      if (unknownItems != null) {
                        if (unknownFields == null) {
                          unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        foreach (object rawValue in unknownItems)
                          if (rawValue is int)
                            unknownFields.MergeVarintField(2, (ulong)(int)rawValue);
                      }
                      break;
                    }
                    case 26: {
                      result.hasName = input.ReadString(ref result.name_);
                      break;
                    }
                    case 48: {
                      result.hasFetchAll = input.ReadBool(ref result.fetchAll_);
                      break;
                    }
                    case 56: {
                      result.hasFetchInformation = input.ReadBool(ref result.fetchInformation_);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasPlugin {
                get { return result.hasPlugin; }
              }
              public string Plugin {
                get { return result.Plugin; }
                set { SetPlugin(value); }
              }
              public Builder SetPlugin(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasPlugin = true;
                result.plugin_ = value;
                return this;
              }
              public Builder ClearPlugin() {
                PrepareBuilder();
                result.hasPlugin = false;
                result.plugin_ = "";
                return this;
              }
              
              public pbc::IPopsicleList<global::Plugin.Registry.Types.ItemType> TypeList {
                get { return PrepareBuilder().type_; }
              }
              public int TypeCount {
                get { return result.TypeCount; }
              }
              public global::Plugin.Registry.Types.ItemType GetType(int index) {
                return result.GetType(index);
              }
              public Builder SetType(int index, global::Plugin.Registry.Types.ItemType value) {
                PrepareBuilder();
                result.type_[index] = value;
                return this;
              }
              public Builder AddType(global::Plugin.Registry.Types.ItemType value) {
                PrepareBuilder();
                result.type_.Add(value);
                return this;
              }
              public Builder AddRangeType(scg::IEnumerable<global::Plugin.Registry.Types.ItemType> values) {
                PrepareBuilder();
                result.type_.Add(values);
                return this;
              }
              public Builder ClearType() {
                PrepareBuilder();
                result.type_.Clear();
                return this;
              }
              
              public bool HasName {
                get { return result.hasName; }
              }
              public string Name {
                get { return result.Name; }
                set { SetName(value); }
              }
              public Builder SetName(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasName = true;
                result.name_ = value;
                return this;
              }
              public Builder ClearName() {
                PrepareBuilder();
                result.hasName = false;
                result.name_ = "";
                return this;
              }
              
              public bool HasFetchAll {
                get { return result.hasFetchAll; }
              }
              public bool FetchAll {
                get { return result.FetchAll; }
                set { SetFetchAll(value); }
              }
              public Builder SetFetchAll(bool value) {
                PrepareBuilder();
                result.hasFetchAll = true;
                result.fetchAll_ = value;
                return this;
              }
              public Builder ClearFetchAll() {
                PrepareBuilder();
                result.hasFetchAll = false;
                result.fetchAll_ = false;
                return this;
              }
              
              public bool HasFetchInformation {
                get { return result.hasFetchInformation; }
              }
              public bool FetchInformation {
                get { return result.FetchInformation; }
                set { SetFetchInformation(value); }
              }
              public Builder SetFetchInformation(bool value) {
                PrepareBuilder();
                result.hasFetchInformation = true;
                result.fetchInformation_ = value;
                return this;
              }
              public Builder ClearFetchInformation() {
                PrepareBuilder();
                result.hasFetchInformation = false;
                result.fetchInformation_ = false;
                return this;
              }
            }
            static Inventory() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Control : pb::GeneratedMessage<Control, Control.Builder> {
            private Control() { }
            private static readonly Control defaultInstance = new Control().MakeReadOnly();
            private static readonly string[] _controlFieldNames = new string[] { "alias", "command", "name", "type" };
            private static readonly uint[] _controlFieldTags = new uint[] { 34, 8, 26, 16 };
            public static Control DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Control DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Control ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_RegistryRequestMessage_Request_Control__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Control, Control.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_RegistryRequestMessage_Request_Control__FieldAccessorTable; }
            }
            
            public const int CommandFieldNumber = 1;
            private bool hasCommand;
            private global::Plugin.Registry.Types.Command command_ = global::Plugin.Registry.Types.Command.LOAD;
            public bool HasCommand {
              get { return hasCommand; }
            }
            public global::Plugin.Registry.Types.Command Command {
              get { return command_; }
            }
            
            public const int TypeFieldNumber = 2;
            private bool hasType;
            private global::Plugin.Registry.Types.ItemType type_ = global::Plugin.Registry.Types.ItemType.QUERY;
            public bool HasType {
              get { return hasType; }
            }
            public global::Plugin.Registry.Types.ItemType Type {
              get { return type_; }
            }
            
            public const int NameFieldNumber = 3;
            private bool hasName;
            private string name_ = "";
            public bool HasName {
              get { return hasName; }
            }
            public string Name {
              get { return name_; }
            }
            
            public const int AliasFieldNumber = 4;
            private bool hasAlias;
            private string alias_ = "";
            public bool HasAlias {
              get { return hasAlias; }
            }
            public string Alias {
              get { return alias_; }
            }
            
            public override bool IsInitialized {
              get {
                if (!hasCommand) return false;
                if (!hasType) return false;
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _controlFieldNames;
              if (hasCommand) {
                output.WriteEnum(1, field_names[1], (int) Command, Command);
              }
              if (hasType) {
                output.WriteEnum(2, field_names[3], (int) Type, Type);
              }
              if (hasName) {
                output.WriteString(3, field_names[2], Name);
              }
              if (hasAlias) {
                output.WriteString(4, field_names[0], Alias);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                if (hasCommand) {
                  size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Command);
                }
                if (hasType) {
                  size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Type);
                }
                if (hasName) {
                  size += pb::CodedOutputStream.ComputeStringSize(3, Name);
                }
                if (hasAlias) {
                  size += pb::CodedOutputStream.ComputeStringSize(4, Alias);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static Control ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Control ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Control ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Control ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Control ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Control ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Control ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Control ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Control ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Control ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Control MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Control prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Control, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Control cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Control result;
              
              private Control PrepareBuilder() {
                if (resultIsReadOnly) {
                  Control original = result;
                  result = new Control();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Control MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.RegistryRequestMessage.Types.Request.Types.Control.Descriptor; }
              }
              
              public override Control DefaultInstanceForType {
                get { return global::Plugin.RegistryRequestMessage.Types.Request.Types.Control.DefaultInstance; }
              }
              
              public override Control BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Control) {
                  return MergeFrom((Control) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Control other) {
                if (other == global::Plugin.RegistryRequestMessage.Types.Request.Types.Control.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasCommand) {
                  Command = other.Command;
                }
                if (other.HasType) {
                  Type = other.Type;
                }
                if (other.HasName) {
                  Name = other.Name;
                }
                if (other.HasAlias) {
                  Alias = other.Alias;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_controlFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _controlFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 8: {
                      object unknown;
                      if(input.ReadEnum(ref result.command_, out unknown)) {
                        result.hasCommand = true;
                      } else if(unknown is int) {
                        if (unknownFields == null) {
                          unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        unknownFields.MergeVarintField(1, (ulong)(int)unknown);
                      }
                      break;
                    }
                    case 16: {
                      object unknown;
                      if(input.ReadEnum(ref result.type_, out unknown)) {
                        result.hasType = true;
                      } else if(unknown is int) {
                        if (unknownFields == null) {
                          unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        unknownFields.MergeVarintField(2, (ulong)(int)unknown);
                      }
                      break;
                    }
                    case 26: {
                      result.hasName = input.ReadString(ref result.name_);
                      break;
                    }
                    case 34: {
                      result.hasAlias = input.ReadString(ref result.alias_);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasCommand {
               get { return result.hasCommand; }
              }
              public global::Plugin.Registry.Types.Command Command {
                get { return result.Command; }
                set { SetCommand(value); }
              }
              public Builder SetCommand(global::Plugin.Registry.Types.Command value) {
                PrepareBuilder();
                result.hasCommand = true;
                result.command_ = value;
                return this;
              }
              public Builder ClearCommand() {
                PrepareBuilder();
                result.hasCommand = false;
                result.command_ = global::Plugin.Registry.Types.Command.LOAD;
                return this;
              }
              
              public bool HasType {
               get { return result.hasType; }
              }
              public global::Plugin.Registry.Types.ItemType Type {
                get { return result.Type; }
                set { SetType(value); }
              }
              public Builder SetType(global::Plugin.Registry.Types.ItemType value) {
                PrepareBuilder();
                result.hasType = true;
                result.type_ = value;
                return this;
              }
              public Builder ClearType() {
                PrepareBuilder();
                result.hasType = false;
                result.type_ = global::Plugin.Registry.Types.ItemType.QUERY;
                return this;
              }
              
              public bool HasName {
                get { return result.hasName; }
              }
              public string Name {
                get { return result.Name; }
                set { SetName(value); }
              }
              public Builder SetName(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasName = true;
                result.name_ = value;
                return this;
              }
              public Builder ClearName() {
                PrepareBuilder();
                result.hasName = false;
                result.name_ = "";
                return this;
              }
              
              public bool HasAlias {
                get { return result.hasAlias; }
              }
              public string Alias {
                get { return result.Alias; }
                set { SetAlias(value); }
              }
              public Builder SetAlias(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAlias = true;
                result.alias_ = value;
                return this;
              }
              public Builder ClearAlias() {
                PrepareBuilder();
                result.hasAlias = false;
                result.alias_ = "";
                return this;
              }
            }
            static Control() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
        }
        #endregion
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private long id_;
        public bool HasId {
          get { return hasId; }
        }
        public long Id {
          get { return id_; }
        }
        
        public const int RegistrationFieldNumber = 3;
        private bool hasRegistration;
        private global::Plugin.RegistryRequestMessage.Types.Request.Types.Registration registration_;
        public bool HasRegistration {
          get { return hasRegistration; }
        }
        public global::Plugin.RegistryRequestMessage.Types.Request.Types.Registration Registration {
          get { return registration_ ?? global::Plugin.RegistryRequestMessage.Types.Request.Types.Registration.DefaultInstance; }
        }
        
        public const int InventoryFieldNumber = 4;
        private bool hasInventory;
        private global::Plugin.RegistryRequestMessage.Types.Request.Types.Inventory inventory_;
        public bool HasInventory {
          get { return hasInventory; }
        }
        public global::Plugin.RegistryRequestMessage.Types.Request.Types.Inventory Inventory {
          get { return inventory_ ?? global::Plugin.RegistryRequestMessage.Types.Request.Types.Inventory.DefaultInstance; }
        }
        
        public const int ControlFieldNumber = 5;
        private bool hasControl;
        private global::Plugin.RegistryRequestMessage.Types.Request.Types.Control control_;
        public bool HasControl {
          get { return hasControl; }
        }
        public global::Plugin.RegistryRequestMessage.Types.Request.Types.Control Control {
          get { return control_ ?? global::Plugin.RegistryRequestMessage.Types.Request.Types.Control.DefaultInstance; }
        }
        
        public override bool IsInitialized {
          get {
            if (HasRegistration) {
              if (!Registration.IsInitialized) return false;
            }
            if (HasControl) {
              if (!Control.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _requestFieldNames;
          if (hasId) {
            output.WriteInt64(1, field_names[1], Id);
          }
          if (hasRegistration) {
            output.WriteMessage(3, field_names[3], Registration);
          }
          if (hasInventory) {
            output.WriteMessage(4, field_names[2], Inventory);
          }
          if (hasControl) {
            output.WriteMessage(5, field_names[0], Control);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasId) {
              size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
            }
            if (hasRegistration) {
              size += pb::CodedOutputStream.ComputeMessageSize(3, Registration);
            }
            if (hasInventory) {
              size += pb::CodedOutputStream.ComputeMessageSize(4, Inventory);
            }
            if (hasControl) {
              size += pb::CodedOutputStream.ComputeMessageSize(5, Control);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Request ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Request ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Request ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Request ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Request ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Request ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Request ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Request ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Request ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Request ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Request MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Request prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Request, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Request cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Request result;
          
          private Request PrepareBuilder() {
            if (resultIsReadOnly) {
              Request original = result;
              result = new Request();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Request MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.RegistryRequestMessage.Types.Request.Descriptor; }
          }
          
          public override Request DefaultInstanceForType {
            get { return global::Plugin.RegistryRequestMessage.Types.Request.DefaultInstance; }
          }
          
          public override Request BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Request) {
              return MergeFrom((Request) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Request other) {
            if (other == global::Plugin.RegistryRequestMessage.Types.Request.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasRegistration) {
              MergeRegistration(other.Registration);
            }
            if (other.HasInventory) {
              MergeInventory(other.Inventory);
            }
            if (other.HasControl) {
              MergeControl(other.Control);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_requestFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _requestFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasId = input.ReadInt64(ref result.id_);
                  break;
                }
                case 26: {
                  global::Plugin.RegistryRequestMessage.Types.Request.Types.Registration.Builder subBuilder = global::Plugin.RegistryRequestMessage.Types.Request.Types.Registration.CreateBuilder();
                  if (result.hasRegistration) {
                    subBuilder.MergeFrom(Registration);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Registration = subBuilder.BuildPartial();
                  break;
                }
                case 34: {
                  global::Plugin.RegistryRequestMessage.Types.Request.Types.Inventory.Builder subBuilder = global::Plugin.RegistryRequestMessage.Types.Request.Types.Inventory.CreateBuilder();
                  if (result.hasInventory) {
                    subBuilder.MergeFrom(Inventory);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Inventory = subBuilder.BuildPartial();
                  break;
                }
                case 42: {
                  global::Plugin.RegistryRequestMessage.Types.Request.Types.Control.Builder subBuilder = global::Plugin.RegistryRequestMessage.Types.Request.Types.Control.CreateBuilder();
                  if (result.hasControl) {
                    subBuilder.MergeFrom(Control);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Control = subBuilder.BuildPartial();
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public long Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(long value) {
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = 0L;
            return this;
          }
          
          public bool HasRegistration {
           get { return result.hasRegistration; }
          }
          public global::Plugin.RegistryRequestMessage.Types.Request.Types.Registration Registration {
            get { return result.Registration; }
            set { SetRegistration(value); }
          }
          public Builder SetRegistration(global::Plugin.RegistryRequestMessage.Types.Request.Types.Registration value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasRegistration = true;
            result.registration_ = value;
            return this;
          }
          public Builder SetRegistration(global::Plugin.RegistryRequestMessage.Types.Request.Types.Registration.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasRegistration = true;
            result.registration_ = builderForValue.Build();
            return this;
          }
          public Builder MergeRegistration(global::Plugin.RegistryRequestMessage.Types.Request.Types.Registration value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasRegistration &&
                result.registration_ != global::Plugin.RegistryRequestMessage.Types.Request.Types.Registration.DefaultInstance) {
                result.registration_ = global::Plugin.RegistryRequestMessage.Types.Request.Types.Registration.CreateBuilder(result.registration_).MergeFrom(value).BuildPartial();
            } else {
              result.registration_ = value;
            }
            result.hasRegistration = true;
            return this;
          }
          public Builder ClearRegistration() {
            PrepareBuilder();
            result.hasRegistration = false;
            result.registration_ = null;
            return this;
          }
          
          public bool HasInventory {
           get { return result.hasInventory; }
          }
          public global::Plugin.RegistryRequestMessage.Types.Request.Types.Inventory Inventory {
            get { return result.Inventory; }
            set { SetInventory(value); }
          }
          public Builder SetInventory(global::Plugin.RegistryRequestMessage.Types.Request.Types.Inventory value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasInventory = true;
            result.inventory_ = value;
            return this;
          }
          public Builder SetInventory(global::Plugin.RegistryRequestMessage.Types.Request.Types.Inventory.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasInventory = true;
            result.inventory_ = builderForValue.Build();
            return this;
          }
          public Builder MergeInventory(global::Plugin.RegistryRequestMessage.Types.Request.Types.Inventory value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasInventory &&
                result.inventory_ != global::Plugin.RegistryRequestMessage.Types.Request.Types.Inventory.DefaultInstance) {
                result.inventory_ = global::Plugin.RegistryRequestMessage.Types.Request.Types.Inventory.CreateBuilder(result.inventory_).MergeFrom(value).BuildPartial();
            } else {
              result.inventory_ = value;
            }
            result.hasInventory = true;
            return this;
          }
          public Builder ClearInventory() {
            PrepareBuilder();
            result.hasInventory = false;
            result.inventory_ = null;
            return this;
          }
          
          public bool HasControl {
           get { return result.hasControl; }
          }
          public global::Plugin.RegistryRequestMessage.Types.Request.Types.Control Control {
            get { return result.Control; }
            set { SetControl(value); }
          }
          public Builder SetControl(global::Plugin.RegistryRequestMessage.Types.Request.Types.Control value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasControl = true;
            result.control_ = value;
            return this;
          }
          public Builder SetControl(global::Plugin.RegistryRequestMessage.Types.Request.Types.Control.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasControl = true;
            result.control_ = builderForValue.Build();
            return this;
          }
          public Builder MergeControl(global::Plugin.RegistryRequestMessage.Types.Request.Types.Control value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasControl &&
                result.control_ != global::Plugin.RegistryRequestMessage.Types.Request.Types.Control.DefaultInstance) {
                result.control_ = global::Plugin.RegistryRequestMessage.Types.Request.Types.Control.CreateBuilder(result.control_).MergeFrom(value).BuildPartial();
            } else {
              result.control_ = value;
            }
            result.hasControl = true;
            return this;
          }
          public Builder ClearControl() {
            PrepareBuilder();
            result.hasControl = false;
            result.control_ = null;
            return this;
          }
        }
        static Request() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::Plugin.Common.Types.Header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::Plugin.Common.Types.Header Header {
      get { return header_ ?? global::Plugin.Common.Types.Header.DefaultInstance; }
    }
    
    public const int PayloadFieldNumber = 2;
    private pbc::PopsicleList<global::Plugin.RegistryRequestMessage.Types.Request> payload_ = new pbc::PopsicleList<global::Plugin.RegistryRequestMessage.Types.Request>();
    public scg::IList<global::Plugin.RegistryRequestMessage.Types.Request> PayloadList {
      get { return payload_; }
    }
    public int PayloadCount {
      get { return payload_.Count; }
    }
    public global::Plugin.RegistryRequestMessage.Types.Request GetPayload(int index) {
      return payload_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (HasHeader) {
          if (!Header.IsInitialized) return false;
        }
        foreach (global::Plugin.RegistryRequestMessage.Types.Request element in PayloadList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _registryRequestMessageFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[0], Header);
      }
      if (payload_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], payload_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
        }
        foreach (global::Plugin.RegistryRequestMessage.Types.Request element in PayloadList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RegistryRequestMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RegistryRequestMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RegistryRequestMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RegistryRequestMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RegistryRequestMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RegistryRequestMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RegistryRequestMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RegistryRequestMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RegistryRequestMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RegistryRequestMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RegistryRequestMessage MakeReadOnly() {
      payload_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RegistryRequestMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<RegistryRequestMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RegistryRequestMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RegistryRequestMessage result;
      
      private RegistryRequestMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          RegistryRequestMessage original = result;
          result = new RegistryRequestMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RegistryRequestMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.RegistryRequestMessage.Descriptor; }
      }
      
      public override RegistryRequestMessage DefaultInstanceForType {
        get { return global::Plugin.RegistryRequestMessage.DefaultInstance; }
      }
      
      public override RegistryRequestMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RegistryRequestMessage) {
          return MergeFrom((RegistryRequestMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RegistryRequestMessage other) {
        if (other == global::Plugin.RegistryRequestMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.payload_.Count != 0) {
          result.payload_.Add(other.payload_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_registryRequestMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _registryRequestMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Plugin.Common.Types.Header.Builder subBuilder = global::Plugin.Common.Types.Header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.payload_, global::Plugin.RegistryRequestMessage.Types.Request.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::Plugin.Common.Types.Header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::Plugin.Common.Types.Header.DefaultInstance) {
            result.header_ = global::Plugin.Common.Types.Header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.RegistryRequestMessage.Types.Request> PayloadList {
        get { return PrepareBuilder().payload_; }
      }
      public int PayloadCount {
        get { return result.PayloadCount; }
      }
      public global::Plugin.RegistryRequestMessage.Types.Request GetPayload(int index) {
        return result.GetPayload(index);
      }
      public Builder SetPayload(int index, global::Plugin.RegistryRequestMessage.Types.Request value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_[index] = value;
        return this;
      }
      public Builder SetPayload(int index, global::Plugin.RegistryRequestMessage.Types.Request.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPayload(global::Plugin.RegistryRequestMessage.Types.Request value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_.Add(value);
        return this;
      }
      public Builder AddPayload(global::Plugin.RegistryRequestMessage.Types.Request.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePayload(scg::IEnumerable<global::Plugin.RegistryRequestMessage.Types.Request> values) {
        PrepareBuilder();
        result.payload_.Add(values);
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.payload_.Clear();
        return this;
      }
    }
    static RegistryRequestMessage() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RegistryResponseMessage : pb::GeneratedMessage<RegistryResponseMessage, RegistryResponseMessage.Builder> {
    private RegistryResponseMessage() { }
    private static readonly RegistryResponseMessage defaultInstance = new RegistryResponseMessage().MakeReadOnly();
    private static readonly string[] _registryResponseMessageFieldNames = new string[] { "header", "payload" };
    private static readonly uint[] _registryResponseMessageFieldTags = new uint[] { 10, 18 };
    public static RegistryResponseMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RegistryResponseMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RegistryResponseMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_RegistryResponseMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RegistryResponseMessage, RegistryResponseMessage.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_RegistryResponseMessage__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Response : pb::GeneratedMessage<Response, Response.Builder> {
        private Response() { }
        private static readonly Response defaultInstance = new Response().MakeReadOnly();
        private static readonly string[] _responseFieldNames = new string[] { "control", "id", "inventory", "registration", "result" };
        private static readonly uint[] _responseFieldTags = new uint[] { 42, 8, 34, 26, 18 };
        public static Response DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Response DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Response ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_RegistryResponseMessage_Response__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Response, Response.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_RegistryResponseMessage_Response__FieldAccessorTable; }
        }
        
        #region Nested types
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static partial class Types {
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Registration : pb::GeneratedMessage<Registration, Registration.Builder> {
            private Registration() { }
            private static readonly Registration defaultInstance = new Registration().MakeReadOnly();
            private static readonly string[] _registrationFieldNames = new string[] { "item_id" };
            private static readonly uint[] _registrationFieldTags = new uint[] { 8 };
            public static Registration DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Registration DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Registration ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_RegistryResponseMessage_Response_Registration__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Registration, Registration.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_RegistryResponseMessage_Response_Registration__FieldAccessorTable; }
            }
            
            public const int ItemIdFieldNumber = 1;
            private bool hasItemId;
            private int itemId_;
            public bool HasItemId {
              get { return hasItemId; }
            }
            public int ItemId {
              get { return itemId_; }
            }
            
            public override bool IsInitialized {
              get {
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _registrationFieldNames;
              if (hasItemId) {
                output.WriteInt32(1, field_names[0], ItemId);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                if (hasItemId) {
                  size += pb::CodedOutputStream.ComputeInt32Size(1, ItemId);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static Registration ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Registration ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Registration ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Registration ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Registration ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Registration ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Registration ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Registration ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Registration ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Registration ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Registration MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Registration prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Registration, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Registration cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Registration result;
              
              private Registration PrepareBuilder() {
                if (resultIsReadOnly) {
                  Registration original = result;
                  result = new Registration();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Registration MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.RegistryResponseMessage.Types.Response.Types.Registration.Descriptor; }
              }
              
              public override Registration DefaultInstanceForType {
                get { return global::Plugin.RegistryResponseMessage.Types.Response.Types.Registration.DefaultInstance; }
              }
              
              public override Registration BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Registration) {
                  return MergeFrom((Registration) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Registration other) {
                if (other == global::Plugin.RegistryResponseMessage.Types.Response.Types.Registration.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasItemId) {
                  ItemId = other.ItemId;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_registrationFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _registrationFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 8: {
                      result.hasItemId = input.ReadInt32(ref result.itemId_);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasItemId {
                get { return result.hasItemId; }
              }
              public int ItemId {
                get { return result.ItemId; }
                set { SetItemId(value); }
              }
              public Builder SetItemId(int value) {
                PrepareBuilder();
                result.hasItemId = true;
                result.itemId_ = value;
                return this;
              }
              public Builder ClearItemId() {
                PrepareBuilder();
                result.hasItemId = false;
                result.itemId_ = 0;
                return this;
              }
            }
            static Registration() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Inventory : pb::GeneratedMessage<Inventory, Inventory.Builder> {
            private Inventory() { }
            private static readonly Inventory defaultInstance = new Inventory().MakeReadOnly();
            private static readonly string[] _inventoryFieldNames = new string[] { "info", "name", "parameters", "plugin", "schedule", "type" };
            private static readonly uint[] _inventoryFieldTags = new uint[] { 34, 26, 42, 10, 162, 16 };
            public static Inventory DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Inventory DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Inventory ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_RegistryResponseMessage_Response_Inventory__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Inventory, Inventory.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_RegistryResponseMessage_Response_Inventory__FieldAccessorTable; }
            }
            
            public const int PluginFieldNumber = 1;
            private pbc::PopsicleList<string> plugin_ = new pbc::PopsicleList<string>();
            public scg::IList<string> PluginList {
              get { return pbc::Lists.AsReadOnly(plugin_); }
            }
            public int PluginCount {
              get { return plugin_.Count; }
            }
            public string GetPlugin(int index) {
              return plugin_[index];
            }
            
            public const int TypeFieldNumber = 2;
            private bool hasType;
            private global::Plugin.Registry.Types.ItemType type_ = global::Plugin.Registry.Types.ItemType.QUERY;
            public bool HasType {
              get { return hasType; }
            }
            public global::Plugin.Registry.Types.ItemType Type {
              get { return type_; }
            }
            
            public const int NameFieldNumber = 3;
            private bool hasName;
            private string name_ = "";
            public bool HasName {
              get { return hasName; }
            }
            public string Name {
              get { return name_; }
            }
            
            public const int InfoFieldNumber = 4;
            private bool hasInfo;
            private global::Plugin.Registry.Types.Information info_;
            public bool HasInfo {
              get { return hasInfo; }
            }
            public global::Plugin.Registry.Types.Information Info {
              get { return info_ ?? global::Plugin.Registry.Types.Information.DefaultInstance; }
            }
            
            public const int ParametersFieldNumber = 5;
            private bool hasParameters;
            private global::Plugin.Registry.Types.ParameterDetails parameters_;
            public bool HasParameters {
              get { return hasParameters; }
            }
            public global::Plugin.Registry.Types.ParameterDetails Parameters {
              get { return parameters_ ?? global::Plugin.Registry.Types.ParameterDetails.DefaultInstance; }
            }
            
            public const int ScheduleFieldNumber = 20;
            private pbc::PopsicleList<global::Plugin.Registry.Types.Schedule> schedule_ = new pbc::PopsicleList<global::Plugin.Registry.Types.Schedule>();
            public scg::IList<global::Plugin.Registry.Types.Schedule> ScheduleList {
              get { return schedule_; }
            }
            public int ScheduleCount {
              get { return schedule_.Count; }
            }
            public global::Plugin.Registry.Types.Schedule GetSchedule(int index) {
              return schedule_[index];
            }
            
            public override bool IsInitialized {
              get {
                if (!hasType) return false;
                if (!hasName) return false;
                if (HasInfo) {
                  if (!Info.IsInitialized) return false;
                }
                if (HasParameters) {
                  if (!Parameters.IsInitialized) return false;
                }
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _inventoryFieldNames;
              if (plugin_.Count > 0) {
                output.WriteStringArray(1, field_names[3], plugin_);
              }
              if (hasType) {
                output.WriteEnum(2, field_names[5], (int) Type, Type);
              }
              if (hasName) {
                output.WriteString(3, field_names[1], Name);
              }
              if (hasInfo) {
                output.WriteMessage(4, field_names[0], Info);
              }
              if (hasParameters) {
                output.WriteMessage(5, field_names[2], Parameters);
              }
              if (schedule_.Count > 0) {
                output.WriteMessageArray(20, field_names[4], schedule_);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                {
                  int dataSize = 0;
                  foreach (string element in PluginList) {
                    dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
                  }
                  size += dataSize;
                  size += 1 * plugin_.Count;
                }
                if (hasType) {
                  size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Type);
                }
                if (hasName) {
                  size += pb::CodedOutputStream.ComputeStringSize(3, Name);
                }
                if (hasInfo) {
                  size += pb::CodedOutputStream.ComputeMessageSize(4, Info);
                }
                if (hasParameters) {
                  size += pb::CodedOutputStream.ComputeMessageSize(5, Parameters);
                }
                foreach (global::Plugin.Registry.Types.Schedule element in ScheduleList) {
                  size += pb::CodedOutputStream.ComputeMessageSize(20, element);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static Inventory ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Inventory ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Inventory ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Inventory ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Inventory ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Inventory ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Inventory ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Inventory ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Inventory ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Inventory ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Inventory MakeReadOnly() {
              plugin_.MakeReadOnly();
              schedule_.MakeReadOnly();
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Inventory prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Inventory, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Inventory cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Inventory result;
              
              private Inventory PrepareBuilder() {
                if (resultIsReadOnly) {
                  Inventory original = result;
                  result = new Inventory();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Inventory MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.RegistryResponseMessage.Types.Response.Types.Inventory.Descriptor; }
              }
              
              public override Inventory DefaultInstanceForType {
                get { return global::Plugin.RegistryResponseMessage.Types.Response.Types.Inventory.DefaultInstance; }
              }
              
              public override Inventory BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Inventory) {
                  return MergeFrom((Inventory) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Inventory other) {
                if (other == global::Plugin.RegistryResponseMessage.Types.Response.Types.Inventory.DefaultInstance) return this;
                PrepareBuilder();
                if (other.plugin_.Count != 0) {
                  result.plugin_.Add(other.plugin_);
                }
                if (other.HasType) {
                  Type = other.Type;
                }
                if (other.HasName) {
                  Name = other.Name;
                }
                if (other.HasInfo) {
                  MergeInfo(other.Info);
                }
                if (other.HasParameters) {
                  MergeParameters(other.Parameters);
                }
                if (other.schedule_.Count != 0) {
                  result.schedule_.Add(other.schedule_);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_inventoryFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _inventoryFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 10: {
                      input.ReadStringArray(tag, field_name, result.plugin_);
                      break;
                    }
                    case 16: {
                      object unknown;
                      if(input.ReadEnum(ref result.type_, out unknown)) {
                        result.hasType = true;
                      } else if(unknown is int) {
                        if (unknownFields == null) {
                          unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        unknownFields.MergeVarintField(2, (ulong)(int)unknown);
                      }
                      break;
                    }
                    case 26: {
                      result.hasName = input.ReadString(ref result.name_);
                      break;
                    }
                    case 34: {
                      global::Plugin.Registry.Types.Information.Builder subBuilder = global::Plugin.Registry.Types.Information.CreateBuilder();
                      if (result.hasInfo) {
                        subBuilder.MergeFrom(Info);
                      }
                      input.ReadMessage(subBuilder, extensionRegistry);
                      Info = subBuilder.BuildPartial();
                      break;
                    }
                    case 42: {
                      global::Plugin.Registry.Types.ParameterDetails.Builder subBuilder = global::Plugin.Registry.Types.ParameterDetails.CreateBuilder();
                      if (result.hasParameters) {
                        subBuilder.MergeFrom(Parameters);
                      }
                      input.ReadMessage(subBuilder, extensionRegistry);
                      Parameters = subBuilder.BuildPartial();
                      break;
                    }
                    case 162: {
                      input.ReadMessageArray(tag, field_name, result.schedule_, global::Plugin.Registry.Types.Schedule.DefaultInstance, extensionRegistry);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public pbc::IPopsicleList<string> PluginList {
                get { return PrepareBuilder().plugin_; }
              }
              public int PluginCount {
                get { return result.PluginCount; }
              }
              public string GetPlugin(int index) {
                return result.GetPlugin(index);
              }
              public Builder SetPlugin(int index, string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.plugin_[index] = value;
                return this;
              }
              public Builder AddPlugin(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.plugin_.Add(value);
                return this;
              }
              public Builder AddRangePlugin(scg::IEnumerable<string> values) {
                PrepareBuilder();
                result.plugin_.Add(values);
                return this;
              }
              public Builder ClearPlugin() {
                PrepareBuilder();
                result.plugin_.Clear();
                return this;
              }
              
              public bool HasType {
               get { return result.hasType; }
              }
              public global::Plugin.Registry.Types.ItemType Type {
                get { return result.Type; }
                set { SetType(value); }
              }
              public Builder SetType(global::Plugin.Registry.Types.ItemType value) {
                PrepareBuilder();
                result.hasType = true;
                result.type_ = value;
                return this;
              }
              public Builder ClearType() {
                PrepareBuilder();
                result.hasType = false;
                result.type_ = global::Plugin.Registry.Types.ItemType.QUERY;
                return this;
              }
              
              public bool HasName {
                get { return result.hasName; }
              }
              public string Name {
                get { return result.Name; }
                set { SetName(value); }
              }
              public Builder SetName(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasName = true;
                result.name_ = value;
                return this;
              }
              public Builder ClearName() {
                PrepareBuilder();
                result.hasName = false;
                result.name_ = "";
                return this;
              }
              
              public bool HasInfo {
               get { return result.hasInfo; }
              }
              public global::Plugin.Registry.Types.Information Info {
                get { return result.Info; }
                set { SetInfo(value); }
              }
              public Builder SetInfo(global::Plugin.Registry.Types.Information value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasInfo = true;
                result.info_ = value;
                return this;
              }
              public Builder SetInfo(global::Plugin.Registry.Types.Information.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasInfo = true;
                result.info_ = builderForValue.Build();
                return this;
              }
              public Builder MergeInfo(global::Plugin.Registry.Types.Information value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasInfo &&
                    result.info_ != global::Plugin.Registry.Types.Information.DefaultInstance) {
                    result.info_ = global::Plugin.Registry.Types.Information.CreateBuilder(result.info_).MergeFrom(value).BuildPartial();
                } else {
                  result.info_ = value;
                }
                result.hasInfo = true;
                return this;
              }
              public Builder ClearInfo() {
                PrepareBuilder();
                result.hasInfo = false;
                result.info_ = null;
                return this;
              }
              
              public bool HasParameters {
               get { return result.hasParameters; }
              }
              public global::Plugin.Registry.Types.ParameterDetails Parameters {
                get { return result.Parameters; }
                set { SetParameters(value); }
              }
              public Builder SetParameters(global::Plugin.Registry.Types.ParameterDetails value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasParameters = true;
                result.parameters_ = value;
                return this;
              }
              public Builder SetParameters(global::Plugin.Registry.Types.ParameterDetails.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasParameters = true;
                result.parameters_ = builderForValue.Build();
                return this;
              }
              public Builder MergeParameters(global::Plugin.Registry.Types.ParameterDetails value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasParameters &&
                    result.parameters_ != global::Plugin.Registry.Types.ParameterDetails.DefaultInstance) {
                    result.parameters_ = global::Plugin.Registry.Types.ParameterDetails.CreateBuilder(result.parameters_).MergeFrom(value).BuildPartial();
                } else {
                  result.parameters_ = value;
                }
                result.hasParameters = true;
                return this;
              }
              public Builder ClearParameters() {
                PrepareBuilder();
                result.hasParameters = false;
                result.parameters_ = null;
                return this;
              }
              
              public pbc::IPopsicleList<global::Plugin.Registry.Types.Schedule> ScheduleList {
                get { return PrepareBuilder().schedule_; }
              }
              public int ScheduleCount {
                get { return result.ScheduleCount; }
              }
              public global::Plugin.Registry.Types.Schedule GetSchedule(int index) {
                return result.GetSchedule(index);
              }
              public Builder SetSchedule(int index, global::Plugin.Registry.Types.Schedule value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.schedule_[index] = value;
                return this;
              }
              public Builder SetSchedule(int index, global::Plugin.Registry.Types.Schedule.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.schedule_[index] = builderForValue.Build();
                return this;
              }
              public Builder AddSchedule(global::Plugin.Registry.Types.Schedule value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.schedule_.Add(value);
                return this;
              }
              public Builder AddSchedule(global::Plugin.Registry.Types.Schedule.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.schedule_.Add(builderForValue.Build());
                return this;
              }
              public Builder AddRangeSchedule(scg::IEnumerable<global::Plugin.Registry.Types.Schedule> values) {
                PrepareBuilder();
                result.schedule_.Add(values);
                return this;
              }
              public Builder ClearSchedule() {
                PrepareBuilder();
                result.schedule_.Clear();
                return this;
              }
            }
            static Inventory() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Control : pb::GeneratedMessage<Control, Control.Builder> {
            private Control() { }
            private static readonly Control defaultInstance = new Control().MakeReadOnly();
            private static readonly string[] _controlFieldNames = new string[] {  };
            private static readonly uint[] _controlFieldTags = new uint[] {  };
            public static Control DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Control DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Control ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_RegistryResponseMessage_Response_Control__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Control, Control.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_RegistryResponseMessage_Response_Control__FieldAccessorTable; }
            }
            
            public override bool IsInitialized {
              get {
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _controlFieldNames;
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static Control ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Control ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Control ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Control ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Control ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Control ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Control ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Control ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Control ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Control ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Control MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Control prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Control, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Control cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Control result;
              
              private Control PrepareBuilder() {
                if (resultIsReadOnly) {
                  Control original = result;
                  result = new Control();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Control MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.RegistryResponseMessage.Types.Response.Types.Control.Descriptor; }
              }
              
              public override Control DefaultInstanceForType {
                get { return global::Plugin.RegistryResponseMessage.Types.Response.Types.Control.DefaultInstance; }
              }
              
              public override Control BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Control) {
                  return MergeFrom((Control) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Control other) {
                if (other == global::Plugin.RegistryResponseMessage.Types.Response.Types.Control.DefaultInstance) return this;
                PrepareBuilder();
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_controlFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _controlFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
            }
            static Control() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
        }
        #endregion
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private long id_;
        public bool HasId {
          get { return hasId; }
        }
        public long Id {
          get { return id_; }
        }
        
        public const int ResultFieldNumber = 2;
        private bool hasResult;
        private global::Plugin.Common.Types.Result result_;
        public bool HasResult {
          get { return hasResult; }
        }
        public global::Plugin.Common.Types.Result Result {
          get { return result_ ?? global::Plugin.Common.Types.Result.DefaultInstance; }
        }
        
        public const int RegistrationFieldNumber = 3;
        private bool hasRegistration;
        private global::Plugin.RegistryResponseMessage.Types.Response.Types.Registration registration_;
        public bool HasRegistration {
          get { return hasRegistration; }
        }
        public global::Plugin.RegistryResponseMessage.Types.Response.Types.Registration Registration {
          get { return registration_ ?? global::Plugin.RegistryResponseMessage.Types.Response.Types.Registration.DefaultInstance; }
        }
        
        public const int InventoryFieldNumber = 4;
        private pbc::PopsicleList<global::Plugin.RegistryResponseMessage.Types.Response.Types.Inventory> inventory_ = new pbc::PopsicleList<global::Plugin.RegistryResponseMessage.Types.Response.Types.Inventory>();
        public scg::IList<global::Plugin.RegistryResponseMessage.Types.Response.Types.Inventory> InventoryList {
          get { return inventory_; }
        }
        public int InventoryCount {
          get { return inventory_.Count; }
        }
        public global::Plugin.RegistryResponseMessage.Types.Response.Types.Inventory GetInventory(int index) {
          return inventory_[index];
        }
        
        public const int ControlFieldNumber = 5;
        private bool hasControl;
        private global::Plugin.RegistryResponseMessage.Types.Response.Types.Control control_;
        public bool HasControl {
          get { return hasControl; }
        }
        public global::Plugin.RegistryResponseMessage.Types.Response.Types.Control Control {
          get { return control_ ?? global::Plugin.RegistryResponseMessage.Types.Response.Types.Control.DefaultInstance; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasResult) return false;
            if (!Result.IsInitialized) return false;
            foreach (global::Plugin.RegistryResponseMessage.Types.Response.Types.Inventory element in InventoryList) {
              if (!element.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _responseFieldNames;
          if (hasId) {
            output.WriteInt64(1, field_names[1], Id);
          }
          if (hasResult) {
            output.WriteMessage(2, field_names[4], Result);
          }
          if (hasRegistration) {
            output.WriteMessage(3, field_names[3], Registration);
          }
          if (inventory_.Count > 0) {
            output.WriteMessageArray(4, field_names[2], inventory_);
          }
          if (hasControl) {
            output.WriteMessage(5, field_names[0], Control);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasId) {
              size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
            }
            if (hasResult) {
              size += pb::CodedOutputStream.ComputeMessageSize(2, Result);
            }
            if (hasRegistration) {
              size += pb::CodedOutputStream.ComputeMessageSize(3, Registration);
            }
            foreach (global::Plugin.RegistryResponseMessage.Types.Response.Types.Inventory element in InventoryList) {
              size += pb::CodedOutputStream.ComputeMessageSize(4, element);
            }
            if (hasControl) {
              size += pb::CodedOutputStream.ComputeMessageSize(5, Control);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Response ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Response ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Response ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Response ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Response ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Response MakeReadOnly() {
          inventory_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Response prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Response, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Response cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Response result;
          
          private Response PrepareBuilder() {
            if (resultIsReadOnly) {
              Response original = result;
              result = new Response();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Response MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.RegistryResponseMessage.Types.Response.Descriptor; }
          }
          
          public override Response DefaultInstanceForType {
            get { return global::Plugin.RegistryResponseMessage.Types.Response.DefaultInstance; }
          }
          
          public override Response BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Response) {
              return MergeFrom((Response) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Response other) {
            if (other == global::Plugin.RegistryResponseMessage.Types.Response.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasResult) {
              MergeResult(other.Result);
            }
            if (other.HasRegistration) {
              MergeRegistration(other.Registration);
            }
            if (other.inventory_.Count != 0) {
              result.inventory_.Add(other.inventory_);
            }
            if (other.HasControl) {
              MergeControl(other.Control);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_responseFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _responseFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasId = input.ReadInt64(ref result.id_);
                  break;
                }
                case 18: {
                  global::Plugin.Common.Types.Result.Builder subBuilder = global::Plugin.Common.Types.Result.CreateBuilder();
                  if (result.hasResult) {
                    subBuilder.MergeFrom(Result);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Result = subBuilder.BuildPartial();
                  break;
                }
                case 26: {
                  global::Plugin.RegistryResponseMessage.Types.Response.Types.Registration.Builder subBuilder = global::Plugin.RegistryResponseMessage.Types.Response.Types.Registration.CreateBuilder();
                  if (result.hasRegistration) {
                    subBuilder.MergeFrom(Registration);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Registration = subBuilder.BuildPartial();
                  break;
                }
                case 34: {
                  input.ReadMessageArray(tag, field_name, result.inventory_, global::Plugin.RegistryResponseMessage.Types.Response.Types.Inventory.DefaultInstance, extensionRegistry);
                  break;
                }
                case 42: {
                  global::Plugin.RegistryResponseMessage.Types.Response.Types.Control.Builder subBuilder = global::Plugin.RegistryResponseMessage.Types.Response.Types.Control.CreateBuilder();
                  if (result.hasControl) {
                    subBuilder.MergeFrom(Control);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Control = subBuilder.BuildPartial();
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public long Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(long value) {
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = 0L;
            return this;
          }
          
          public bool HasResult {
           get { return result.hasResult; }
          }
          public global::Plugin.Common.Types.Result Result {
            get { return result.Result; }
            set { SetResult(value); }
          }
          public Builder SetResult(global::Plugin.Common.Types.Result value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasResult = true;
            result.result_ = value;
            return this;
          }
          public Builder SetResult(global::Plugin.Common.Types.Result.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasResult = true;
            result.result_ = builderForValue.Build();
            return this;
          }
          public Builder MergeResult(global::Plugin.Common.Types.Result value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasResult &&
                result.result_ != global::Plugin.Common.Types.Result.DefaultInstance) {
                result.result_ = global::Plugin.Common.Types.Result.CreateBuilder(result.result_).MergeFrom(value).BuildPartial();
            } else {
              result.result_ = value;
            }
            result.hasResult = true;
            return this;
          }
          public Builder ClearResult() {
            PrepareBuilder();
            result.hasResult = false;
            result.result_ = null;
            return this;
          }
          
          public bool HasRegistration {
           get { return result.hasRegistration; }
          }
          public global::Plugin.RegistryResponseMessage.Types.Response.Types.Registration Registration {
            get { return result.Registration; }
            set { SetRegistration(value); }
          }
          public Builder SetRegistration(global::Plugin.RegistryResponseMessage.Types.Response.Types.Registration value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasRegistration = true;
            result.registration_ = value;
            return this;
          }
          public Builder SetRegistration(global::Plugin.RegistryResponseMessage.Types.Response.Types.Registration.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasRegistration = true;
            result.registration_ = builderForValue.Build();
            return this;
          }
          public Builder MergeRegistration(global::Plugin.RegistryResponseMessage.Types.Response.Types.Registration value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasRegistration &&
                result.registration_ != global::Plugin.RegistryResponseMessage.Types.Response.Types.Registration.DefaultInstance) {
                result.registration_ = global::Plugin.RegistryResponseMessage.Types.Response.Types.Registration.CreateBuilder(result.registration_).MergeFrom(value).BuildPartial();
            } else {
              result.registration_ = value;
            }
            result.hasRegistration = true;
            return this;
          }
          public Builder ClearRegistration() {
            PrepareBuilder();
            result.hasRegistration = false;
            result.registration_ = null;
            return this;
          }
          
          public pbc::IPopsicleList<global::Plugin.RegistryResponseMessage.Types.Response.Types.Inventory> InventoryList {
            get { return PrepareBuilder().inventory_; }
          }
          public int InventoryCount {
            get { return result.InventoryCount; }
          }
          public global::Plugin.RegistryResponseMessage.Types.Response.Types.Inventory GetInventory(int index) {
            return result.GetInventory(index);
          }
          public Builder SetInventory(int index, global::Plugin.RegistryResponseMessage.Types.Response.Types.Inventory value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.inventory_[index] = value;
            return this;
          }
          public Builder SetInventory(int index, global::Plugin.RegistryResponseMessage.Types.Response.Types.Inventory.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.inventory_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddInventory(global::Plugin.RegistryResponseMessage.Types.Response.Types.Inventory value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.inventory_.Add(value);
            return this;
          }
          public Builder AddInventory(global::Plugin.RegistryResponseMessage.Types.Response.Types.Inventory.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.inventory_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeInventory(scg::IEnumerable<global::Plugin.RegistryResponseMessage.Types.Response.Types.Inventory> values) {
            PrepareBuilder();
            result.inventory_.Add(values);
            return this;
          }
          public Builder ClearInventory() {
            PrepareBuilder();
            result.inventory_.Clear();
            return this;
          }
          
          public bool HasControl {
           get { return result.hasControl; }
          }
          public global::Plugin.RegistryResponseMessage.Types.Response.Types.Control Control {
            get { return result.Control; }
            set { SetControl(value); }
          }
          public Builder SetControl(global::Plugin.RegistryResponseMessage.Types.Response.Types.Control value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasControl = true;
            result.control_ = value;
            return this;
          }
          public Builder SetControl(global::Plugin.RegistryResponseMessage.Types.Response.Types.Control.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasControl = true;
            result.control_ = builderForValue.Build();
            return this;
          }
          public Builder MergeControl(global::Plugin.RegistryResponseMessage.Types.Response.Types.Control value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasControl &&
                result.control_ != global::Plugin.RegistryResponseMessage.Types.Response.Types.Control.DefaultInstance) {
                result.control_ = global::Plugin.RegistryResponseMessage.Types.Response.Types.Control.CreateBuilder(result.control_).MergeFrom(value).BuildPartial();
            } else {
              result.control_ = value;
            }
            result.hasControl = true;
            return this;
          }
          public Builder ClearControl() {
            PrepareBuilder();
            result.hasControl = false;
            result.control_ = null;
            return this;
          }
        }
        static Response() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::Plugin.Common.Types.Header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::Plugin.Common.Types.Header Header {
      get { return header_ ?? global::Plugin.Common.Types.Header.DefaultInstance; }
    }
    
    public const int PayloadFieldNumber = 2;
    private pbc::PopsicleList<global::Plugin.RegistryResponseMessage.Types.Response> payload_ = new pbc::PopsicleList<global::Plugin.RegistryResponseMessage.Types.Response>();
    public scg::IList<global::Plugin.RegistryResponseMessage.Types.Response> PayloadList {
      get { return payload_; }
    }
    public int PayloadCount {
      get { return payload_.Count; }
    }
    public global::Plugin.RegistryResponseMessage.Types.Response GetPayload(int index) {
      return payload_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (HasHeader) {
          if (!Header.IsInitialized) return false;
        }
        foreach (global::Plugin.RegistryResponseMessage.Types.Response element in PayloadList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _registryResponseMessageFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[0], Header);
      }
      if (payload_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], payload_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
        }
        foreach (global::Plugin.RegistryResponseMessage.Types.Response element in PayloadList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RegistryResponseMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RegistryResponseMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RegistryResponseMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RegistryResponseMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RegistryResponseMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RegistryResponseMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RegistryResponseMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RegistryResponseMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RegistryResponseMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RegistryResponseMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RegistryResponseMessage MakeReadOnly() {
      payload_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RegistryResponseMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<RegistryResponseMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RegistryResponseMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RegistryResponseMessage result;
      
      private RegistryResponseMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          RegistryResponseMessage original = result;
          result = new RegistryResponseMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RegistryResponseMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.RegistryResponseMessage.Descriptor; }
      }
      
      public override RegistryResponseMessage DefaultInstanceForType {
        get { return global::Plugin.RegistryResponseMessage.DefaultInstance; }
      }
      
      public override RegistryResponseMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RegistryResponseMessage) {
          return MergeFrom((RegistryResponseMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RegistryResponseMessage other) {
        if (other == global::Plugin.RegistryResponseMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.payload_.Count != 0) {
          result.payload_.Add(other.payload_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_registryResponseMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _registryResponseMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Plugin.Common.Types.Header.Builder subBuilder = global::Plugin.Common.Types.Header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.payload_, global::Plugin.RegistryResponseMessage.Types.Response.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::Plugin.Common.Types.Header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::Plugin.Common.Types.Header.DefaultInstance) {
            result.header_ = global::Plugin.Common.Types.Header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.RegistryResponseMessage.Types.Response> PayloadList {
        get { return PrepareBuilder().payload_; }
      }
      public int PayloadCount {
        get { return result.PayloadCount; }
      }
      public global::Plugin.RegistryResponseMessage.Types.Response GetPayload(int index) {
        return result.GetPayload(index);
      }
      public Builder SetPayload(int index, global::Plugin.RegistryResponseMessage.Types.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_[index] = value;
        return this;
      }
      public Builder SetPayload(int index, global::Plugin.RegistryResponseMessage.Types.Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPayload(global::Plugin.RegistryResponseMessage.Types.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_.Add(value);
        return this;
      }
      public Builder AddPayload(global::Plugin.RegistryResponseMessage.Types.Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePayload(scg::IEnumerable<global::Plugin.RegistryResponseMessage.Types.Response> values) {
        PrepareBuilder();
        result.payload_.Add(values);
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.payload_.Clear();
        return this;
      }
    }
    static RegistryResponseMessage() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ScheduleNotificationMessage : pb::GeneratedMessage<ScheduleNotificationMessage, ScheduleNotificationMessage.Builder> {
    private ScheduleNotificationMessage() { }
    private static readonly ScheduleNotificationMessage defaultInstance = new ScheduleNotificationMessage().MakeReadOnly();
    private static readonly string[] _scheduleNotificationMessageFieldNames = new string[] { "header", "payload" };
    private static readonly uint[] _scheduleNotificationMessageFieldTags = new uint[] { 10, 18 };
    public static ScheduleNotificationMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ScheduleNotificationMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ScheduleNotificationMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_ScheduleNotificationMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ScheduleNotificationMessage, ScheduleNotificationMessage.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_ScheduleNotificationMessage__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Request : pb::GeneratedMessage<Request, Request.Builder> {
        private Request() { }
        private static readonly Request defaultInstance = new Request().MakeReadOnly();
        private static readonly string[] _requestFieldNames = new string[] { "id", "info", "plugin_id", "schedule" };
        private static readonly uint[] _requestFieldTags = new uint[] { 8, 34, 24, 162 };
        public static Request DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Request DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Request ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_ScheduleNotificationMessage_Request__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Request, Request.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_ScheduleNotificationMessage_Request__FieldAccessorTable; }
        }
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private long id_;
        public bool HasId {
          get { return hasId; }
        }
        public long Id {
          get { return id_; }
        }
        
        public const int PluginIdFieldNumber = 3;
        private bool hasPluginId;
        private int pluginId_;
        public bool HasPluginId {
          get { return hasPluginId; }
        }
        public int PluginId {
          get { return pluginId_; }
        }
        
        public const int InfoFieldNumber = 4;
        private bool hasInfo;
        private global::Plugin.Registry.Types.Information info_;
        public bool HasInfo {
          get { return hasInfo; }
        }
        public global::Plugin.Registry.Types.Information Info {
          get { return info_ ?? global::Plugin.Registry.Types.Information.DefaultInstance; }
        }
        
        public const int ScheduleFieldNumber = 20;
        private bool hasSchedule;
        private global::Plugin.Registry.Types.Schedule schedule_;
        public bool HasSchedule {
          get { return hasSchedule; }
        }
        public global::Plugin.Registry.Types.Schedule Schedule {
          get { return schedule_ ?? global::Plugin.Registry.Types.Schedule.DefaultInstance; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasPluginId) return false;
            if (HasInfo) {
              if (!Info.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _requestFieldNames;
          if (hasId) {
            output.WriteInt64(1, field_names[0], Id);
          }
          if (hasPluginId) {
            output.WriteInt32(3, field_names[2], PluginId);
          }
          if (hasInfo) {
            output.WriteMessage(4, field_names[1], Info);
          }
          if (hasSchedule) {
            output.WriteMessage(20, field_names[3], Schedule);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasId) {
              size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
            }
            if (hasPluginId) {
              size += pb::CodedOutputStream.ComputeInt32Size(3, PluginId);
            }
            if (hasInfo) {
              size += pb::CodedOutputStream.ComputeMessageSize(4, Info);
            }
            if (hasSchedule) {
              size += pb::CodedOutputStream.ComputeMessageSize(20, Schedule);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Request ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Request ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Request ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Request ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Request ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Request ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Request ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Request ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Request ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Request ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Request MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Request prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Request, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Request cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Request result;
          
          private Request PrepareBuilder() {
            if (resultIsReadOnly) {
              Request original = result;
              result = new Request();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Request MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.ScheduleNotificationMessage.Types.Request.Descriptor; }
          }
          
          public override Request DefaultInstanceForType {
            get { return global::Plugin.ScheduleNotificationMessage.Types.Request.DefaultInstance; }
          }
          
          public override Request BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Request) {
              return MergeFrom((Request) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Request other) {
            if (other == global::Plugin.ScheduleNotificationMessage.Types.Request.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasPluginId) {
              PluginId = other.PluginId;
            }
            if (other.HasInfo) {
              MergeInfo(other.Info);
            }
            if (other.HasSchedule) {
              MergeSchedule(other.Schedule);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_requestFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _requestFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasId = input.ReadInt64(ref result.id_);
                  break;
                }
                case 24: {
                  result.hasPluginId = input.ReadInt32(ref result.pluginId_);
                  break;
                }
                case 34: {
                  global::Plugin.Registry.Types.Information.Builder subBuilder = global::Plugin.Registry.Types.Information.CreateBuilder();
                  if (result.hasInfo) {
                    subBuilder.MergeFrom(Info);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Info = subBuilder.BuildPartial();
                  break;
                }
                case 162: {
                  global::Plugin.Registry.Types.Schedule.Builder subBuilder = global::Plugin.Registry.Types.Schedule.CreateBuilder();
                  if (result.hasSchedule) {
                    subBuilder.MergeFrom(Schedule);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Schedule = subBuilder.BuildPartial();
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public long Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(long value) {
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = 0L;
            return this;
          }
          
          public bool HasPluginId {
            get { return result.hasPluginId; }
          }
          public int PluginId {
            get { return result.PluginId; }
            set { SetPluginId(value); }
          }
          public Builder SetPluginId(int value) {
            PrepareBuilder();
            result.hasPluginId = true;
            result.pluginId_ = value;
            return this;
          }
          public Builder ClearPluginId() {
            PrepareBuilder();
            result.hasPluginId = false;
            result.pluginId_ = 0;
            return this;
          }
          
          public bool HasInfo {
           get { return result.hasInfo; }
          }
          public global::Plugin.Registry.Types.Information Info {
            get { return result.Info; }
            set { SetInfo(value); }
          }
          public Builder SetInfo(global::Plugin.Registry.Types.Information value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasInfo = true;
            result.info_ = value;
            return this;
          }
          public Builder SetInfo(global::Plugin.Registry.Types.Information.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasInfo = true;
            result.info_ = builderForValue.Build();
            return this;
          }
          public Builder MergeInfo(global::Plugin.Registry.Types.Information value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasInfo &&
                result.info_ != global::Plugin.Registry.Types.Information.DefaultInstance) {
                result.info_ = global::Plugin.Registry.Types.Information.CreateBuilder(result.info_).MergeFrom(value).BuildPartial();
            } else {
              result.info_ = value;
            }
            result.hasInfo = true;
            return this;
          }
          public Builder ClearInfo() {
            PrepareBuilder();
            result.hasInfo = false;
            result.info_ = null;
            return this;
          }
          
          public bool HasSchedule {
           get { return result.hasSchedule; }
          }
          public global::Plugin.Registry.Types.Schedule Schedule {
            get { return result.Schedule; }
            set { SetSchedule(value); }
          }
          public Builder SetSchedule(global::Plugin.Registry.Types.Schedule value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasSchedule = true;
            result.schedule_ = value;
            return this;
          }
          public Builder SetSchedule(global::Plugin.Registry.Types.Schedule.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasSchedule = true;
            result.schedule_ = builderForValue.Build();
            return this;
          }
          public Builder MergeSchedule(global::Plugin.Registry.Types.Schedule value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasSchedule &&
                result.schedule_ != global::Plugin.Registry.Types.Schedule.DefaultInstance) {
                result.schedule_ = global::Plugin.Registry.Types.Schedule.CreateBuilder(result.schedule_).MergeFrom(value).BuildPartial();
            } else {
              result.schedule_ = value;
            }
            result.hasSchedule = true;
            return this;
          }
          public Builder ClearSchedule() {
            PrepareBuilder();
            result.hasSchedule = false;
            result.schedule_ = null;
            return this;
          }
        }
        static Request() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::Plugin.Common.Types.Header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::Plugin.Common.Types.Header Header {
      get { return header_ ?? global::Plugin.Common.Types.Header.DefaultInstance; }
    }
    
    public const int PayloadFieldNumber = 2;
    private pbc::PopsicleList<global::Plugin.ScheduleNotificationMessage.Types.Request> payload_ = new pbc::PopsicleList<global::Plugin.ScheduleNotificationMessage.Types.Request>();
    public scg::IList<global::Plugin.ScheduleNotificationMessage.Types.Request> PayloadList {
      get { return payload_; }
    }
    public int PayloadCount {
      get { return payload_.Count; }
    }
    public global::Plugin.ScheduleNotificationMessage.Types.Request GetPayload(int index) {
      return payload_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (HasHeader) {
          if (!Header.IsInitialized) return false;
        }
        foreach (global::Plugin.ScheduleNotificationMessage.Types.Request element in PayloadList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _scheduleNotificationMessageFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[0], Header);
      }
      if (payload_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], payload_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
        }
        foreach (global::Plugin.ScheduleNotificationMessage.Types.Request element in PayloadList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ScheduleNotificationMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ScheduleNotificationMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ScheduleNotificationMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ScheduleNotificationMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ScheduleNotificationMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ScheduleNotificationMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ScheduleNotificationMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ScheduleNotificationMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ScheduleNotificationMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ScheduleNotificationMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ScheduleNotificationMessage MakeReadOnly() {
      payload_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ScheduleNotificationMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ScheduleNotificationMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ScheduleNotificationMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ScheduleNotificationMessage result;
      
      private ScheduleNotificationMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          ScheduleNotificationMessage original = result;
          result = new ScheduleNotificationMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ScheduleNotificationMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.ScheduleNotificationMessage.Descriptor; }
      }
      
      public override ScheduleNotificationMessage DefaultInstanceForType {
        get { return global::Plugin.ScheduleNotificationMessage.DefaultInstance; }
      }
      
      public override ScheduleNotificationMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ScheduleNotificationMessage) {
          return MergeFrom((ScheduleNotificationMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ScheduleNotificationMessage other) {
        if (other == global::Plugin.ScheduleNotificationMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.payload_.Count != 0) {
          result.payload_.Add(other.payload_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_scheduleNotificationMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _scheduleNotificationMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Plugin.Common.Types.Header.Builder subBuilder = global::Plugin.Common.Types.Header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.payload_, global::Plugin.ScheduleNotificationMessage.Types.Request.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::Plugin.Common.Types.Header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::Plugin.Common.Types.Header.DefaultInstance) {
            result.header_ = global::Plugin.Common.Types.Header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.ScheduleNotificationMessage.Types.Request> PayloadList {
        get { return PrepareBuilder().payload_; }
      }
      public int PayloadCount {
        get { return result.PayloadCount; }
      }
      public global::Plugin.ScheduleNotificationMessage.Types.Request GetPayload(int index) {
        return result.GetPayload(index);
      }
      public Builder SetPayload(int index, global::Plugin.ScheduleNotificationMessage.Types.Request value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_[index] = value;
        return this;
      }
      public Builder SetPayload(int index, global::Plugin.ScheduleNotificationMessage.Types.Request.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPayload(global::Plugin.ScheduleNotificationMessage.Types.Request value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_.Add(value);
        return this;
      }
      public Builder AddPayload(global::Plugin.ScheduleNotificationMessage.Types.Request.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePayload(scg::IEnumerable<global::Plugin.ScheduleNotificationMessage.Types.Request> values) {
        PrepareBuilder();
        result.payload_.Add(values);
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.payload_.Clear();
        return this;
      }
    }
    static ScheduleNotificationMessage() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Settings : pb::GeneratedMessage<Settings, Settings.Builder> {
    private Settings() { }
    private static readonly Settings defaultInstance = new Settings().MakeReadOnly();
    private static readonly string[] _settingsFieldNames = new string[] {  };
    private static readonly uint[] _settingsFieldTags = new uint[] {  };
    public static Settings DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Settings DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Settings ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_Settings__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Settings, Settings.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_Settings__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Command {
        LOAD = 1,
        SAVE = 2,
        RELOAD = 3,
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Node : pb::GeneratedMessage<Node, Node.Builder> {
        private Node() { }
        private static readonly Node defaultInstance = new Node().MakeReadOnly();
        private static readonly string[] _nodeFieldNames = new string[] { "key", "path" };
        private static readonly uint[] _nodeFieldTags = new uint[] { 18, 10 };
        public static Node DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Node DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Node ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_Settings_Node__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Node, Node.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_Settings_Node__FieldAccessorTable; }
        }
        
        public const int PathFieldNumber = 1;
        private bool hasPath;
        private string path_ = "";
        public bool HasPath {
          get { return hasPath; }
        }
        public string Path {
          get { return path_; }
        }
        
        public const int KeyFieldNumber = 2;
        private bool hasKey;
        private string key_ = "";
        public bool HasKey {
          get { return hasKey; }
        }
        public string Key {
          get { return key_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasPath) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _nodeFieldNames;
          if (hasPath) {
            output.WriteString(1, field_names[1], Path);
          }
          if (hasKey) {
            output.WriteString(2, field_names[0], Key);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasPath) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Path);
            }
            if (hasKey) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Key);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Node ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Node ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Node ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Node ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Node ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Node ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Node ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Node ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Node ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Node ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Node MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Node prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Node, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Node cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Node result;
          
          private Node PrepareBuilder() {
            if (resultIsReadOnly) {
              Node original = result;
              result = new Node();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Node MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.Settings.Types.Node.Descriptor; }
          }
          
          public override Node DefaultInstanceForType {
            get { return global::Plugin.Settings.Types.Node.DefaultInstance; }
          }
          
          public override Node BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Node) {
              return MergeFrom((Node) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Node other) {
            if (other == global::Plugin.Settings.Types.Node.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasPath) {
              Path = other.Path;
            }
            if (other.HasKey) {
              Key = other.Key;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_nodeFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _nodeFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasPath = input.ReadString(ref result.path_);
                  break;
                }
                case 18: {
                  result.hasKey = input.ReadString(ref result.key_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasPath {
            get { return result.hasPath; }
          }
          public string Path {
            get { return result.Path; }
            set { SetPath(value); }
          }
          public Builder SetPath(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasPath = true;
            result.path_ = value;
            return this;
          }
          public Builder ClearPath() {
            PrepareBuilder();
            result.hasPath = false;
            result.path_ = "";
            return this;
          }
          
          public bool HasKey {
            get { return result.hasKey; }
          }
          public string Key {
            get { return result.Key; }
            set { SetKey(value); }
          }
          public Builder SetKey(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasKey = true;
            result.key_ = value;
            return this;
          }
          public Builder ClearKey() {
            PrepareBuilder();
            result.hasKey = false;
            result.key_ = "";
            return this;
          }
        }
        static Node() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Query : pb::GeneratedMessage<Query, Query.Builder> {
        private Query() { }
        private static readonly Query defaultInstance = new Query().MakeReadOnly();
        private static readonly string[] _queryFieldNames = new string[] { "expression" };
        private static readonly uint[] _queryFieldTags = new uint[] { 10 };
        public static Query DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Query DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Query ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_Settings_Query__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Query, Query.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_Settings_Query__FieldAccessorTable; }
        }
        
        public const int ExpressionFieldNumber = 1;
        private bool hasExpression;
        private string expression_ = "";
        public bool HasExpression {
          get { return hasExpression; }
        }
        public string Expression {
          get { return expression_; }
        }
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _queryFieldNames;
          if (hasExpression) {
            output.WriteString(1, field_names[0], Expression);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasExpression) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Expression);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Query ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Query ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Query ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Query ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Query ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Query ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Query ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Query ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Query ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Query ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Query MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Query prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Query, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Query cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Query result;
          
          private Query PrepareBuilder() {
            if (resultIsReadOnly) {
              Query original = result;
              result = new Query();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Query MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.Settings.Types.Query.Descriptor; }
          }
          
          public override Query DefaultInstanceForType {
            get { return global::Plugin.Settings.Types.Query.DefaultInstance; }
          }
          
          public override Query BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Query) {
              return MergeFrom((Query) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Query other) {
            if (other == global::Plugin.Settings.Types.Query.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasExpression) {
              Expression = other.Expression;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_queryFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _queryFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasExpression = input.ReadString(ref result.expression_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasExpression {
            get { return result.hasExpression; }
          }
          public string Expression {
            get { return result.Expression; }
            set { SetExpression(value); }
          }
          public Builder SetExpression(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasExpression = true;
            result.expression_ = value;
            return this;
          }
          public Builder ClearExpression() {
            PrepareBuilder();
            result.hasExpression = false;
            result.expression_ = "";
            return this;
          }
        }
        static Query() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Information : pb::GeneratedMessage<Information, Information.Builder> {
        private Information() { }
        private static readonly Information defaultInstance = new Information().MakeReadOnly();
        private static readonly string[] _informationFieldNames = new string[] { "advanced", "default_value", "description", "max_version", "min_version", "plugin", "sample", "sample_usage", "title" };
        private static readonly uint[] _informationFieldTags = new uint[] { 48, 26, 18, 42, 34, 74, 56, 66, 10 };
        public static Information DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Information DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Information ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_Settings_Information__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Information, Information.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_Settings_Information__FieldAccessorTable; }
        }
        
        public const int TitleFieldNumber = 1;
        private bool hasTitle;
        private string title_ = "";
        public bool HasTitle {
          get { return hasTitle; }
        }
        public string Title {
          get { return title_; }
        }
        
        public const int DescriptionFieldNumber = 2;
        private bool hasDescription;
        private string description_ = "";
        public bool HasDescription {
          get { return hasDescription; }
        }
        public string Description {
          get { return description_; }
        }
        
        public const int DefaultValueFieldNumber = 3;
        private bool hasDefaultValue;
        private global::Plugin.Common.Types.AnyDataType defaultValue_;
        public bool HasDefaultValue {
          get { return hasDefaultValue; }
        }
        public global::Plugin.Common.Types.AnyDataType DefaultValue {
          get { return defaultValue_ ?? global::Plugin.Common.Types.AnyDataType.DefaultInstance; }
        }
        
        public const int MinVersionFieldNumber = 4;
        private bool hasMinVersion;
        private string minVersion_ = "";
        public bool HasMinVersion {
          get { return hasMinVersion; }
        }
        public string MinVersion {
          get { return minVersion_; }
        }
        
        public const int MaxVersionFieldNumber = 5;
        private bool hasMaxVersion;
        private string maxVersion_ = "";
        public bool HasMaxVersion {
          get { return hasMaxVersion; }
        }
        public string MaxVersion {
          get { return maxVersion_; }
        }
        
        public const int AdvancedFieldNumber = 6;
        private bool hasAdvanced;
        private bool advanced_;
        public bool HasAdvanced {
          get { return hasAdvanced; }
        }
        public bool Advanced {
          get { return advanced_; }
        }
        
        public const int SampleFieldNumber = 7;
        private bool hasSample;
        private bool sample_;
        public bool HasSample {
          get { return hasSample; }
        }
        public bool Sample {
          get { return sample_; }
        }
        
        public const int SampleUsageFieldNumber = 8;
        private bool hasSampleUsage;
        private string sampleUsage_ = "";
        public bool HasSampleUsage {
          get { return hasSampleUsage; }
        }
        public string SampleUsage {
          get { return sampleUsage_; }
        }
        
        public const int PluginFieldNumber = 9;
        private pbc::PopsicleList<string> plugin_ = new pbc::PopsicleList<string>();
        public scg::IList<string> PluginList {
          get { return pbc::Lists.AsReadOnly(plugin_); }
        }
        public int PluginCount {
          get { return plugin_.Count; }
        }
        public string GetPlugin(int index) {
          return plugin_[index];
        }
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _informationFieldNames;
          if (hasTitle) {
            output.WriteString(1, field_names[8], Title);
          }
          if (hasDescription) {
            output.WriteString(2, field_names[2], Description);
          }
          if (hasDefaultValue) {
            output.WriteMessage(3, field_names[1], DefaultValue);
          }
          if (hasMinVersion) {
            output.WriteString(4, field_names[4], MinVersion);
          }
          if (hasMaxVersion) {
            output.WriteString(5, field_names[3], MaxVersion);
          }
          if (hasAdvanced) {
            output.WriteBool(6, field_names[0], Advanced);
          }
          if (hasSample) {
            output.WriteBool(7, field_names[6], Sample);
          }
          if (hasSampleUsage) {
            output.WriteString(8, field_names[7], SampleUsage);
          }
          if (plugin_.Count > 0) {
            output.WriteStringArray(9, field_names[5], plugin_);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasTitle) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Title);
            }
            if (hasDescription) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Description);
            }
            if (hasDefaultValue) {
              size += pb::CodedOutputStream.ComputeMessageSize(3, DefaultValue);
            }
            if (hasMinVersion) {
              size += pb::CodedOutputStream.ComputeStringSize(4, MinVersion);
            }
            if (hasMaxVersion) {
              size += pb::CodedOutputStream.ComputeStringSize(5, MaxVersion);
            }
            if (hasAdvanced) {
              size += pb::CodedOutputStream.ComputeBoolSize(6, Advanced);
            }
            if (hasSample) {
              size += pb::CodedOutputStream.ComputeBoolSize(7, Sample);
            }
            if (hasSampleUsage) {
              size += pb::CodedOutputStream.ComputeStringSize(8, SampleUsage);
            }
            {
              int dataSize = 0;
              foreach (string element in PluginList) {
                dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
              }
              size += dataSize;
              size += 1 * plugin_.Count;
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Information ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Information ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Information ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Information ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Information ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Information ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Information ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Information ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Information ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Information ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Information MakeReadOnly() {
          plugin_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Information prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Information, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Information cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Information result;
          
          private Information PrepareBuilder() {
            if (resultIsReadOnly) {
              Information original = result;
              result = new Information();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Information MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.Settings.Types.Information.Descriptor; }
          }
          
          public override Information DefaultInstanceForType {
            get { return global::Plugin.Settings.Types.Information.DefaultInstance; }
          }
          
          public override Information BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Information) {
              return MergeFrom((Information) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Information other) {
            if (other == global::Plugin.Settings.Types.Information.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasTitle) {
              Title = other.Title;
            }
            if (other.HasDescription) {
              Description = other.Description;
            }
            if (other.HasDefaultValue) {
              MergeDefaultValue(other.DefaultValue);
            }
            if (other.HasMinVersion) {
              MinVersion = other.MinVersion;
            }
            if (other.HasMaxVersion) {
              MaxVersion = other.MaxVersion;
            }
            if (other.HasAdvanced) {
              Advanced = other.Advanced;
            }
            if (other.HasSample) {
              Sample = other.Sample;
            }
            if (other.HasSampleUsage) {
              SampleUsage = other.SampleUsage;
            }
            if (other.plugin_.Count != 0) {
              result.plugin_.Add(other.plugin_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_informationFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _informationFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasTitle = input.ReadString(ref result.title_);
                  break;
                }
                case 18: {
                  result.hasDescription = input.ReadString(ref result.description_);
                  break;
                }
                case 26: {
                  global::Plugin.Common.Types.AnyDataType.Builder subBuilder = global::Plugin.Common.Types.AnyDataType.CreateBuilder();
                  if (result.hasDefaultValue) {
                    subBuilder.MergeFrom(DefaultValue);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  DefaultValue = subBuilder.BuildPartial();
                  break;
                }
                case 34: {
                  result.hasMinVersion = input.ReadString(ref result.minVersion_);
                  break;
                }
                case 42: {
                  result.hasMaxVersion = input.ReadString(ref result.maxVersion_);
                  break;
                }
                case 48: {
                  result.hasAdvanced = input.ReadBool(ref result.advanced_);
                  break;
                }
                case 56: {
                  result.hasSample = input.ReadBool(ref result.sample_);
                  break;
                }
                case 66: {
                  result.hasSampleUsage = input.ReadString(ref result.sampleUsage_);
                  break;
                }
                case 74: {
                  input.ReadStringArray(tag, field_name, result.plugin_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasTitle {
            get { return result.hasTitle; }
          }
          public string Title {
            get { return result.Title; }
            set { SetTitle(value); }
          }
          public Builder SetTitle(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasTitle = true;
            result.title_ = value;
            return this;
          }
          public Builder ClearTitle() {
            PrepareBuilder();
            result.hasTitle = false;
            result.title_ = "";
            return this;
          }
          
          public bool HasDescription {
            get { return result.hasDescription; }
          }
          public string Description {
            get { return result.Description; }
            set { SetDescription(value); }
          }
          public Builder SetDescription(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasDescription = true;
            result.description_ = value;
            return this;
          }
          public Builder ClearDescription() {
            PrepareBuilder();
            result.hasDescription = false;
            result.description_ = "";
            return this;
          }
          
          public bool HasDefaultValue {
           get { return result.hasDefaultValue; }
          }
          public global::Plugin.Common.Types.AnyDataType DefaultValue {
            get { return result.DefaultValue; }
            set { SetDefaultValue(value); }
          }
          public Builder SetDefaultValue(global::Plugin.Common.Types.AnyDataType value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasDefaultValue = true;
            result.defaultValue_ = value;
            return this;
          }
          public Builder SetDefaultValue(global::Plugin.Common.Types.AnyDataType.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasDefaultValue = true;
            result.defaultValue_ = builderForValue.Build();
            return this;
          }
          public Builder MergeDefaultValue(global::Plugin.Common.Types.AnyDataType value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasDefaultValue &&
                result.defaultValue_ != global::Plugin.Common.Types.AnyDataType.DefaultInstance) {
                result.defaultValue_ = global::Plugin.Common.Types.AnyDataType.CreateBuilder(result.defaultValue_).MergeFrom(value).BuildPartial();
            } else {
              result.defaultValue_ = value;
            }
            result.hasDefaultValue = true;
            return this;
          }
          public Builder ClearDefaultValue() {
            PrepareBuilder();
            result.hasDefaultValue = false;
            result.defaultValue_ = null;
            return this;
          }
          
          public bool HasMinVersion {
            get { return result.hasMinVersion; }
          }
          public string MinVersion {
            get { return result.MinVersion; }
            set { SetMinVersion(value); }
          }
          public Builder SetMinVersion(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasMinVersion = true;
            result.minVersion_ = value;
            return this;
          }
          public Builder ClearMinVersion() {
            PrepareBuilder();
            result.hasMinVersion = false;
            result.minVersion_ = "";
            return this;
          }
          
          public bool HasMaxVersion {
            get { return result.hasMaxVersion; }
          }
          public string MaxVersion {
            get { return result.MaxVersion; }
            set { SetMaxVersion(value); }
          }
          public Builder SetMaxVersion(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasMaxVersion = true;
            result.maxVersion_ = value;
            return this;
          }
          public Builder ClearMaxVersion() {
            PrepareBuilder();
            result.hasMaxVersion = false;
            result.maxVersion_ = "";
            return this;
          }
          
          public bool HasAdvanced {
            get { return result.hasAdvanced; }
          }
          public bool Advanced {
            get { return result.Advanced; }
            set { SetAdvanced(value); }
          }
          public Builder SetAdvanced(bool value) {
            PrepareBuilder();
            result.hasAdvanced = true;
            result.advanced_ = value;
            return this;
          }
          public Builder ClearAdvanced() {
            PrepareBuilder();
            result.hasAdvanced = false;
            result.advanced_ = false;
            return this;
          }
          
          public bool HasSample {
            get { return result.hasSample; }
          }
          public bool Sample {
            get { return result.Sample; }
            set { SetSample(value); }
          }
          public Builder SetSample(bool value) {
            PrepareBuilder();
            result.hasSample = true;
            result.sample_ = value;
            return this;
          }
          public Builder ClearSample() {
            PrepareBuilder();
            result.hasSample = false;
            result.sample_ = false;
            return this;
          }
          
          public bool HasSampleUsage {
            get { return result.hasSampleUsage; }
          }
          public string SampleUsage {
            get { return result.SampleUsage; }
            set { SetSampleUsage(value); }
          }
          public Builder SetSampleUsage(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasSampleUsage = true;
            result.sampleUsage_ = value;
            return this;
          }
          public Builder ClearSampleUsage() {
            PrepareBuilder();
            result.hasSampleUsage = false;
            result.sampleUsage_ = "";
            return this;
          }
          
          public pbc::IPopsicleList<string> PluginList {
            get { return PrepareBuilder().plugin_; }
          }
          public int PluginCount {
            get { return result.PluginCount; }
          }
          public string GetPlugin(int index) {
            return result.GetPlugin(index);
          }
          public Builder SetPlugin(int index, string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.plugin_[index] = value;
            return this;
          }
          public Builder AddPlugin(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.plugin_.Add(value);
            return this;
          }
          public Builder AddRangePlugin(scg::IEnumerable<string> values) {
            PrepareBuilder();
            result.plugin_.Add(values);
            return this;
          }
          public Builder ClearPlugin() {
            PrepareBuilder();
            result.plugin_.Clear();
            return this;
          }
        }
        static Information() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _settingsFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Settings ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Settings ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Settings ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Settings ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Settings ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Settings ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Settings ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Settings ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Settings ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Settings ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Settings MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Settings prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Settings, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Settings cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Settings result;
      
      private Settings PrepareBuilder() {
        if (resultIsReadOnly) {
          Settings original = result;
          result = new Settings();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Settings MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.Settings.Descriptor; }
      }
      
      public override Settings DefaultInstanceForType {
        get { return global::Plugin.Settings.DefaultInstance; }
      }
      
      public override Settings BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Settings) {
          return MergeFrom((Settings) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Settings other) {
        if (other == global::Plugin.Settings.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_settingsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _settingsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static Settings() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SettingsRequestMessage : pb::GeneratedMessage<SettingsRequestMessage, SettingsRequestMessage.Builder> {
    private SettingsRequestMessage() { }
    private static readonly SettingsRequestMessage defaultInstance = new SettingsRequestMessage().MakeReadOnly();
    private static readonly string[] _settingsRequestMessageFieldNames = new string[] { "header", "payload" };
    private static readonly uint[] _settingsRequestMessageFieldTags = new uint[] { 10, 18 };
    public static SettingsRequestMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SettingsRequestMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SettingsRequestMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_SettingsRequestMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SettingsRequestMessage, SettingsRequestMessage.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_SettingsRequestMessage__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Request : pb::GeneratedMessage<Request, Request.Builder> {
        private Request() { }
        private static readonly Request defaultInstance = new Request().MakeReadOnly();
        private static readonly string[] _requestFieldNames = new string[] { "control", "id", "inventory", "plugin_id", "query", "registration", "status", "update" };
        private static readonly uint[] _requestFieldTags = new uint[] { 114, 8, 106, 24, 90, 82, 122, 98 };
        public static Request DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Request DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Request ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_SettingsRequestMessage_Request__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Request, Request.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_SettingsRequestMessage_Request__FieldAccessorTable; }
        }
        
        #region Nested types
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static partial class Types {
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Registration : pb::GeneratedMessage<Registration, Registration.Builder> {
            private Registration() { }
            private static readonly Registration defaultInstance = new Registration().MakeReadOnly();
            private static readonly string[] _registrationFieldNames = new string[] { "info", "node" };
            private static readonly uint[] _registrationFieldTags = new uint[] { 18, 10 };
            public static Registration DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Registration DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Registration ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_SettingsRequestMessage_Request_Registration__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Registration, Registration.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_SettingsRequestMessage_Request_Registration__FieldAccessorTable; }
            }
            
            public const int NodeFieldNumber = 1;
            private bool hasNode;
            private global::Plugin.Settings.Types.Node node_;
            public bool HasNode {
              get { return hasNode; }
            }
            public global::Plugin.Settings.Types.Node Node {
              get { return node_ ?? global::Plugin.Settings.Types.Node.DefaultInstance; }
            }
            
            public const int InfoFieldNumber = 2;
            private bool hasInfo;
            private global::Plugin.Settings.Types.Information info_;
            public bool HasInfo {
              get { return hasInfo; }
            }
            public global::Plugin.Settings.Types.Information Info {
              get { return info_ ?? global::Plugin.Settings.Types.Information.DefaultInstance; }
            }
            
            public override bool IsInitialized {
              get {
                if (HasNode) {
                  if (!Node.IsInitialized) return false;
                }
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _registrationFieldNames;
              if (hasNode) {
                output.WriteMessage(1, field_names[1], Node);
              }
              if (hasInfo) {
                output.WriteMessage(2, field_names[0], Info);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                if (hasNode) {
                  size += pb::CodedOutputStream.ComputeMessageSize(1, Node);
                }
                if (hasInfo) {
                  size += pb::CodedOutputStream.ComputeMessageSize(2, Info);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static Registration ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Registration ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Registration ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Registration ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Registration ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Registration ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Registration ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Registration ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Registration ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Registration ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Registration MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Registration prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Registration, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Registration cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Registration result;
              
              private Registration PrepareBuilder() {
                if (resultIsReadOnly) {
                  Registration original = result;
                  result = new Registration();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Registration MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.SettingsRequestMessage.Types.Request.Types.Registration.Descriptor; }
              }
              
              public override Registration DefaultInstanceForType {
                get { return global::Plugin.SettingsRequestMessage.Types.Request.Types.Registration.DefaultInstance; }
              }
              
              public override Registration BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Registration) {
                  return MergeFrom((Registration) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Registration other) {
                if (other == global::Plugin.SettingsRequestMessage.Types.Request.Types.Registration.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasNode) {
                  MergeNode(other.Node);
                }
                if (other.HasInfo) {
                  MergeInfo(other.Info);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_registrationFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _registrationFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 10: {
                      global::Plugin.Settings.Types.Node.Builder subBuilder = global::Plugin.Settings.Types.Node.CreateBuilder();
                      if (result.hasNode) {
                        subBuilder.MergeFrom(Node);
                      }
                      input.ReadMessage(subBuilder, extensionRegistry);
                      Node = subBuilder.BuildPartial();
                      break;
                    }
                    case 18: {
                      global::Plugin.Settings.Types.Information.Builder subBuilder = global::Plugin.Settings.Types.Information.CreateBuilder();
                      if (result.hasInfo) {
                        subBuilder.MergeFrom(Info);
                      }
                      input.ReadMessage(subBuilder, extensionRegistry);
                      Info = subBuilder.BuildPartial();
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasNode {
               get { return result.hasNode; }
              }
              public global::Plugin.Settings.Types.Node Node {
                get { return result.Node; }
                set { SetNode(value); }
              }
              public Builder SetNode(global::Plugin.Settings.Types.Node value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasNode = true;
                result.node_ = value;
                return this;
              }
              public Builder SetNode(global::Plugin.Settings.Types.Node.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasNode = true;
                result.node_ = builderForValue.Build();
                return this;
              }
              public Builder MergeNode(global::Plugin.Settings.Types.Node value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasNode &&
                    result.node_ != global::Plugin.Settings.Types.Node.DefaultInstance) {
                    result.node_ = global::Plugin.Settings.Types.Node.CreateBuilder(result.node_).MergeFrom(value).BuildPartial();
                } else {
                  result.node_ = value;
                }
                result.hasNode = true;
                return this;
              }
              public Builder ClearNode() {
                PrepareBuilder();
                result.hasNode = false;
                result.node_ = null;
                return this;
              }
              
              public bool HasInfo {
               get { return result.hasInfo; }
              }
              public global::Plugin.Settings.Types.Information Info {
                get { return result.Info; }
                set { SetInfo(value); }
              }
              public Builder SetInfo(global::Plugin.Settings.Types.Information value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasInfo = true;
                result.info_ = value;
                return this;
              }
              public Builder SetInfo(global::Plugin.Settings.Types.Information.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasInfo = true;
                result.info_ = builderForValue.Build();
                return this;
              }
              public Builder MergeInfo(global::Plugin.Settings.Types.Information value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasInfo &&
                    result.info_ != global::Plugin.Settings.Types.Information.DefaultInstance) {
                    result.info_ = global::Plugin.Settings.Types.Information.CreateBuilder(result.info_).MergeFrom(value).BuildPartial();
                } else {
                  result.info_ = value;
                }
                result.hasInfo = true;
                return this;
              }
              public Builder ClearInfo() {
                PrepareBuilder();
                result.hasInfo = false;
                result.info_ = null;
                return this;
              }
            }
            static Registration() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Query : pb::GeneratedMessage<Query, Query.Builder> {
            private Query() { }
            private static readonly Query defaultInstance = new Query().MakeReadOnly();
            private static readonly string[] _queryFieldNames = new string[] { "default_value", "node", "query", "recursive", "type" };
            private static readonly uint[] _queryFieldTags = new uint[] { 42, 10, 34, 16, 24 };
            public static Query DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Query DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Query ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_SettingsRequestMessage_Request_Query__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Query, Query.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_SettingsRequestMessage_Request_Query__FieldAccessorTable; }
            }
            
            public const int NodeFieldNumber = 1;
            private bool hasNode;
            private global::Plugin.Settings.Types.Node node_;
            public bool HasNode {
              get { return hasNode; }
            }
            public global::Plugin.Settings.Types.Node Node {
              get { return node_ ?? global::Plugin.Settings.Types.Node.DefaultInstance; }
            }
            
            public const int Query_FieldNumber = 4;
            private bool hasQuery_;
            private global::Plugin.Settings.Types.Query query_;
            public bool HasQuery_ {
              get { return hasQuery_; }
            }
            public global::Plugin.Settings.Types.Query Query_ {
              get { return query_ ?? global::Plugin.Settings.Types.Query.DefaultInstance; }
            }
            
            public const int RecursiveFieldNumber = 2;
            private bool hasRecursive;
            private bool recursive_;
            public bool HasRecursive {
              get { return hasRecursive; }
            }
            public bool Recursive {
              get { return recursive_; }
            }
            
            public const int TypeFieldNumber = 3;
            private bool hasType;
            private global::Plugin.Common.Types.DataType type_ = global::Plugin.Common.Types.DataType.INT;
            public bool HasType {
              get { return hasType; }
            }
            public global::Plugin.Common.Types.DataType Type {
              get { return type_; }
            }
            
            public const int DefaultValueFieldNumber = 5;
            private bool hasDefaultValue;
            private global::Plugin.Common.Types.AnyDataType defaultValue_;
            public bool HasDefaultValue {
              get { return hasDefaultValue; }
            }
            public global::Plugin.Common.Types.AnyDataType DefaultValue {
              get { return defaultValue_ ?? global::Plugin.Common.Types.AnyDataType.DefaultInstance; }
            }
            
            public override bool IsInitialized {
              get {
                if (HasNode) {
                  if (!Node.IsInitialized) return false;
                }
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _queryFieldNames;
              if (hasNode) {
                output.WriteMessage(1, field_names[1], Node);
              }
              if (hasRecursive) {
                output.WriteBool(2, field_names[3], Recursive);
              }
              if (hasType) {
                output.WriteEnum(3, field_names[4], (int) Type, Type);
              }
              if (hasQuery_) {
                output.WriteMessage(4, field_names[2], Query_);
              }
              if (hasDefaultValue) {
                output.WriteMessage(5, field_names[0], DefaultValue);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                if (hasNode) {
                  size += pb::CodedOutputStream.ComputeMessageSize(1, Node);
                }
                if (hasQuery_) {
                  size += pb::CodedOutputStream.ComputeMessageSize(4, Query_);
                }
                if (hasRecursive) {
                  size += pb::CodedOutputStream.ComputeBoolSize(2, Recursive);
                }
                if (hasType) {
                  size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Type);
                }
                if (hasDefaultValue) {
                  size += pb::CodedOutputStream.ComputeMessageSize(5, DefaultValue);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static Query ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Query ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Query ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Query ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Query ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Query ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Query ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Query ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Query ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Query ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Query MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Query prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Query, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Query cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Query result;
              
              private Query PrepareBuilder() {
                if (resultIsReadOnly) {
                  Query original = result;
                  result = new Query();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Query MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.SettingsRequestMessage.Types.Request.Types.Query.Descriptor; }
              }
              
              public override Query DefaultInstanceForType {
                get { return global::Plugin.SettingsRequestMessage.Types.Request.Types.Query.DefaultInstance; }
              }
              
              public override Query BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Query) {
                  return MergeFrom((Query) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Query other) {
                if (other == global::Plugin.SettingsRequestMessage.Types.Request.Types.Query.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasNode) {
                  MergeNode(other.Node);
                }
                if (other.HasQuery_) {
                  MergeQuery_(other.Query_);
                }
                if (other.HasRecursive) {
                  Recursive = other.Recursive;
                }
                if (other.HasType) {
                  Type = other.Type;
                }
                if (other.HasDefaultValue) {
                  MergeDefaultValue(other.DefaultValue);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_queryFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _queryFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 10: {
                      global::Plugin.Settings.Types.Node.Builder subBuilder = global::Plugin.Settings.Types.Node.CreateBuilder();
                      if (result.hasNode) {
                        subBuilder.MergeFrom(Node);
                      }
                      input.ReadMessage(subBuilder, extensionRegistry);
                      Node = subBuilder.BuildPartial();
                      break;
                    }
                    case 16: {
                      result.hasRecursive = input.ReadBool(ref result.recursive_);
                      break;
                    }
                    case 24: {
                      object unknown;
                      if(input.ReadEnum(ref result.type_, out unknown)) {
                        result.hasType = true;
                      } else if(unknown is int) {
                        if (unknownFields == null) {
                          unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        unknownFields.MergeVarintField(3, (ulong)(int)unknown);
                      }
                      break;
                    }
                    case 34: {
                      global::Plugin.Settings.Types.Query.Builder subBuilder = global::Plugin.Settings.Types.Query.CreateBuilder();
                      if (result.hasQuery_) {
                        subBuilder.MergeFrom(Query_);
                      }
                      input.ReadMessage(subBuilder, extensionRegistry);
                      Query_ = subBuilder.BuildPartial();
                      break;
                    }
                    case 42: {
                      global::Plugin.Common.Types.AnyDataType.Builder subBuilder = global::Plugin.Common.Types.AnyDataType.CreateBuilder();
                      if (result.hasDefaultValue) {
                        subBuilder.MergeFrom(DefaultValue);
                      }
                      input.ReadMessage(subBuilder, extensionRegistry);
                      DefaultValue = subBuilder.BuildPartial();
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasNode {
               get { return result.hasNode; }
              }
              public global::Plugin.Settings.Types.Node Node {
                get { return result.Node; }
                set { SetNode(value); }
              }
              public Builder SetNode(global::Plugin.Settings.Types.Node value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasNode = true;
                result.node_ = value;
                return this;
              }
              public Builder SetNode(global::Plugin.Settings.Types.Node.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasNode = true;
                result.node_ = builderForValue.Build();
                return this;
              }
              public Builder MergeNode(global::Plugin.Settings.Types.Node value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasNode &&
                    result.node_ != global::Plugin.Settings.Types.Node.DefaultInstance) {
                    result.node_ = global::Plugin.Settings.Types.Node.CreateBuilder(result.node_).MergeFrom(value).BuildPartial();
                } else {
                  result.node_ = value;
                }
                result.hasNode = true;
                return this;
              }
              public Builder ClearNode() {
                PrepareBuilder();
                result.hasNode = false;
                result.node_ = null;
                return this;
              }
              
              public bool HasQuery_ {
               get { return result.hasQuery_; }
              }
              public global::Plugin.Settings.Types.Query Query_ {
                get { return result.Query_; }
                set { SetQuery_(value); }
              }
              public Builder SetQuery_(global::Plugin.Settings.Types.Query value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasQuery_ = true;
                result.query_ = value;
                return this;
              }
              public Builder SetQuery_(global::Plugin.Settings.Types.Query.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasQuery_ = true;
                result.query_ = builderForValue.Build();
                return this;
              }
              public Builder MergeQuery_(global::Plugin.Settings.Types.Query value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasQuery_ &&
                    result.query_ != global::Plugin.Settings.Types.Query.DefaultInstance) {
                    result.query_ = global::Plugin.Settings.Types.Query.CreateBuilder(result.query_).MergeFrom(value).BuildPartial();
                } else {
                  result.query_ = value;
                }
                result.hasQuery_ = true;
                return this;
              }
              public Builder ClearQuery_() {
                PrepareBuilder();
                result.hasQuery_ = false;
                result.query_ = null;
                return this;
              }
              
              public bool HasRecursive {
                get { return result.hasRecursive; }
              }
              public bool Recursive {
                get { return result.Recursive; }
                set { SetRecursive(value); }
              }
              public Builder SetRecursive(bool value) {
                PrepareBuilder();
                result.hasRecursive = true;
                result.recursive_ = value;
                return this;
              }
              public Builder ClearRecursive() {
                PrepareBuilder();
                result.hasRecursive = false;
                result.recursive_ = false;
                return this;
              }
              
              public bool HasType {
               get { return result.hasType; }
              }
              public global::Plugin.Common.Types.DataType Type {
                get { return result.Type; }
                set { SetType(value); }
              }
              public Builder SetType(global::Plugin.Common.Types.DataType value) {
                PrepareBuilder();
                result.hasType = true;
                result.type_ = value;
                return this;
              }
              public Builder ClearType() {
                PrepareBuilder();
                result.hasType = false;
                result.type_ = global::Plugin.Common.Types.DataType.INT;
                return this;
              }
              
              public bool HasDefaultValue {
               get { return result.hasDefaultValue; }
              }
              public global::Plugin.Common.Types.AnyDataType DefaultValue {
                get { return result.DefaultValue; }
                set { SetDefaultValue(value); }
              }
              public Builder SetDefaultValue(global::Plugin.Common.Types.AnyDataType value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasDefaultValue = true;
                result.defaultValue_ = value;
                return this;
              }
              public Builder SetDefaultValue(global::Plugin.Common.Types.AnyDataType.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasDefaultValue = true;
                result.defaultValue_ = builderForValue.Build();
                return this;
              }
              public Builder MergeDefaultValue(global::Plugin.Common.Types.AnyDataType value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasDefaultValue &&
                    result.defaultValue_ != global::Plugin.Common.Types.AnyDataType.DefaultInstance) {
                    result.defaultValue_ = global::Plugin.Common.Types.AnyDataType.CreateBuilder(result.defaultValue_).MergeFrom(value).BuildPartial();
                } else {
                  result.defaultValue_ = value;
                }
                result.hasDefaultValue = true;
                return this;
              }
              public Builder ClearDefaultValue() {
                PrepareBuilder();
                result.hasDefaultValue = false;
                result.defaultValue_ = null;
                return this;
              }
            }
            static Query() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Update : pb::GeneratedMessage<Update, Update.Builder> {
            private Update() { }
            private static readonly Update defaultInstance = new Update().MakeReadOnly();
            private static readonly string[] _updateFieldNames = new string[] { "node", "value" };
            private static readonly uint[] _updateFieldTags = new uint[] { 10, 18 };
            public static Update DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Update DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Update ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_SettingsRequestMessage_Request_Update__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Update, Update.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_SettingsRequestMessage_Request_Update__FieldAccessorTable; }
            }
            
            public const int NodeFieldNumber = 1;
            private bool hasNode;
            private global::Plugin.Settings.Types.Node node_;
            public bool HasNode {
              get { return hasNode; }
            }
            public global::Plugin.Settings.Types.Node Node {
              get { return node_ ?? global::Plugin.Settings.Types.Node.DefaultInstance; }
            }
            
            public const int ValueFieldNumber = 2;
            private bool hasValue;
            private global::Plugin.Common.Types.AnyDataType value_;
            public bool HasValue {
              get { return hasValue; }
            }
            public global::Plugin.Common.Types.AnyDataType Value {
              get { return value_ ?? global::Plugin.Common.Types.AnyDataType.DefaultInstance; }
            }
            
            public override bool IsInitialized {
              get {
                if (HasNode) {
                  if (!Node.IsInitialized) return false;
                }
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _updateFieldNames;
              if (hasNode) {
                output.WriteMessage(1, field_names[0], Node);
              }
              if (hasValue) {
                output.WriteMessage(2, field_names[1], Value);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                if (hasNode) {
                  size += pb::CodedOutputStream.ComputeMessageSize(1, Node);
                }
                if (hasValue) {
                  size += pb::CodedOutputStream.ComputeMessageSize(2, Value);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static Update ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Update ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Update ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Update ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Update ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Update ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Update ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Update ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Update ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Update ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Update MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Update prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Update, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Update cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Update result;
              
              private Update PrepareBuilder() {
                if (resultIsReadOnly) {
                  Update original = result;
                  result = new Update();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Update MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.SettingsRequestMessage.Types.Request.Types.Update.Descriptor; }
              }
              
              public override Update DefaultInstanceForType {
                get { return global::Plugin.SettingsRequestMessage.Types.Request.Types.Update.DefaultInstance; }
              }
              
              public override Update BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Update) {
                  return MergeFrom((Update) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Update other) {
                if (other == global::Plugin.SettingsRequestMessage.Types.Request.Types.Update.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasNode) {
                  MergeNode(other.Node);
                }
                if (other.HasValue) {
                  MergeValue(other.Value);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_updateFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _updateFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 10: {
                      global::Plugin.Settings.Types.Node.Builder subBuilder = global::Plugin.Settings.Types.Node.CreateBuilder();
                      if (result.hasNode) {
                        subBuilder.MergeFrom(Node);
                      }
                      input.ReadMessage(subBuilder, extensionRegistry);
                      Node = subBuilder.BuildPartial();
                      break;
                    }
                    case 18: {
                      global::Plugin.Common.Types.AnyDataType.Builder subBuilder = global::Plugin.Common.Types.AnyDataType.CreateBuilder();
                      if (result.hasValue) {
                        subBuilder.MergeFrom(Value);
                      }
                      input.ReadMessage(subBuilder, extensionRegistry);
                      Value = subBuilder.BuildPartial();
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasNode {
               get { return result.hasNode; }
              }
              public global::Plugin.Settings.Types.Node Node {
                get { return result.Node; }
                set { SetNode(value); }
              }
              public Builder SetNode(global::Plugin.Settings.Types.Node value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasNode = true;
                result.node_ = value;
                return this;
              }
              public Builder SetNode(global::Plugin.Settings.Types.Node.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasNode = true;
                result.node_ = builderForValue.Build();
                return this;
              }
              public Builder MergeNode(global::Plugin.Settings.Types.Node value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasNode &&
                    result.node_ != global::Plugin.Settings.Types.Node.DefaultInstance) {
                    result.node_ = global::Plugin.Settings.Types.Node.CreateBuilder(result.node_).MergeFrom(value).BuildPartial();
                } else {
                  result.node_ = value;
                }
                result.hasNode = true;
                return this;
              }
              public Builder ClearNode() {
                PrepareBuilder();
                result.hasNode = false;
                result.node_ = null;
                return this;
              }
              
              public bool HasValue {
               get { return result.hasValue; }
              }
              public global::Plugin.Common.Types.AnyDataType Value {
                get { return result.Value; }
                set { SetValue(value); }
              }
              public Builder SetValue(global::Plugin.Common.Types.AnyDataType value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasValue = true;
                result.value_ = value;
                return this;
              }
              public Builder SetValue(global::Plugin.Common.Types.AnyDataType.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasValue = true;
                result.value_ = builderForValue.Build();
                return this;
              }
              public Builder MergeValue(global::Plugin.Common.Types.AnyDataType value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasValue &&
                    result.value_ != global::Plugin.Common.Types.AnyDataType.DefaultInstance) {
                    result.value_ = global::Plugin.Common.Types.AnyDataType.CreateBuilder(result.value_).MergeFrom(value).BuildPartial();
                } else {
                  result.value_ = value;
                }
                result.hasValue = true;
                return this;
              }
              public Builder ClearValue() {
                PrepareBuilder();
                result.hasValue = false;
                result.value_ = null;
                return this;
              }
            }
            static Update() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Inventory : pb::GeneratedMessage<Inventory, Inventory.Builder> {
            private Inventory() { }
            private static readonly Inventory defaultInstance = new Inventory().MakeReadOnly();
            private static readonly string[] _inventoryFieldNames = new string[] { "descriptions", "fetch_keys", "fetch_paths", "fetch_samples", "node", "plugin", "query", "recursive_fetch" };
            private static readonly uint[] _inventoryFieldTags = new uint[] { 48, 24, 32, 40, 10, 90, 82, 16 };
            public static Inventory DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Inventory DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Inventory ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_SettingsRequestMessage_Request_Inventory__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Inventory, Inventory.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_SettingsRequestMessage_Request_Inventory__FieldAccessorTable; }
            }
            
            public const int PluginFieldNumber = 11;
            private bool hasPlugin;
            private string plugin_ = "";
            public bool HasPlugin {
              get { return hasPlugin; }
            }
            public string Plugin {
              get { return plugin_; }
            }
            
            public const int NodeFieldNumber = 1;
            private bool hasNode;
            private global::Plugin.Settings.Types.Node node_;
            public bool HasNode {
              get { return hasNode; }
            }
            public global::Plugin.Settings.Types.Node Node {
              get { return node_ ?? global::Plugin.Settings.Types.Node.DefaultInstance; }
            }
            
            public const int QueryFieldNumber = 10;
            private bool hasQuery;
            private global::Plugin.Settings.Types.Query query_;
            public bool HasQuery {
              get { return hasQuery; }
            }
            public global::Plugin.Settings.Types.Query Query {
              get { return query_ ?? global::Plugin.Settings.Types.Query.DefaultInstance; }
            }
            
            public const int RecursiveFetchFieldNumber = 2;
            private bool hasRecursiveFetch;
            private bool recursiveFetch_;
            public bool HasRecursiveFetch {
              get { return hasRecursiveFetch; }
            }
            public bool RecursiveFetch {
              get { return recursiveFetch_; }
            }
            
            public const int FetchKeysFieldNumber = 3;
            private bool hasFetchKeys;
            private bool fetchKeys_;
            public bool HasFetchKeys {
              get { return hasFetchKeys; }
            }
            public bool FetchKeys {
              get { return fetchKeys_; }
            }
            
            public const int FetchPathsFieldNumber = 4;
            private bool hasFetchPaths;
            private bool fetchPaths_;
            public bool HasFetchPaths {
              get { return hasFetchPaths; }
            }
            public bool FetchPaths {
              get { return fetchPaths_; }
            }
            
            public const int FetchSamplesFieldNumber = 5;
            private bool hasFetchSamples;
            private bool fetchSamples_;
            public bool HasFetchSamples {
              get { return hasFetchSamples; }
            }
            public bool FetchSamples {
              get { return fetchSamples_; }
            }
            
            public const int DescriptionsFieldNumber = 6;
            private bool hasDescriptions;
            private bool descriptions_;
            public bool HasDescriptions {
              get { return hasDescriptions; }
            }
            public bool Descriptions {
              get { return descriptions_; }
            }
            
            public override bool IsInitialized {
              get {
                if (HasNode) {
                  if (!Node.IsInitialized) return false;
                }
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _inventoryFieldNames;
              if (hasNode) {
                output.WriteMessage(1, field_names[4], Node);
              }
              if (hasRecursiveFetch) {
                output.WriteBool(2, field_names[7], RecursiveFetch);
              }
              if (hasFetchKeys) {
                output.WriteBool(3, field_names[1], FetchKeys);
              }
              if (hasFetchPaths) {
                output.WriteBool(4, field_names[2], FetchPaths);
              }
              if (hasFetchSamples) {
                output.WriteBool(5, field_names[3], FetchSamples);
              }
              if (hasDescriptions) {
                output.WriteBool(6, field_names[0], Descriptions);
              }
              if (hasQuery) {
                output.WriteMessage(10, field_names[6], Query);
              }
              if (hasPlugin) {
                output.WriteString(11, field_names[5], Plugin);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                if (hasPlugin) {
                  size += pb::CodedOutputStream.ComputeStringSize(11, Plugin);
                }
                if (hasNode) {
                  size += pb::CodedOutputStream.ComputeMessageSize(1, Node);
                }
                if (hasQuery) {
                  size += pb::CodedOutputStream.ComputeMessageSize(10, Query);
                }
                if (hasRecursiveFetch) {
                  size += pb::CodedOutputStream.ComputeBoolSize(2, RecursiveFetch);
                }
                if (hasFetchKeys) {
                  size += pb::CodedOutputStream.ComputeBoolSize(3, FetchKeys);
                }
                if (hasFetchPaths) {
                  size += pb::CodedOutputStream.ComputeBoolSize(4, FetchPaths);
                }
                if (hasFetchSamples) {
                  size += pb::CodedOutputStream.ComputeBoolSize(5, FetchSamples);
                }
                if (hasDescriptions) {
                  size += pb::CodedOutputStream.ComputeBoolSize(6, Descriptions);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static Inventory ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Inventory ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Inventory ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Inventory ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Inventory ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Inventory ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Inventory ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Inventory ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Inventory ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Inventory ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Inventory MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Inventory prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Inventory, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Inventory cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Inventory result;
              
              private Inventory PrepareBuilder() {
                if (resultIsReadOnly) {
                  Inventory original = result;
                  result = new Inventory();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Inventory MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.SettingsRequestMessage.Types.Request.Types.Inventory.Descriptor; }
              }
              
              public override Inventory DefaultInstanceForType {
                get { return global::Plugin.SettingsRequestMessage.Types.Request.Types.Inventory.DefaultInstance; }
              }
              
              public override Inventory BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Inventory) {
                  return MergeFrom((Inventory) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Inventory other) {
                if (other == global::Plugin.SettingsRequestMessage.Types.Request.Types.Inventory.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasPlugin) {
                  Plugin = other.Plugin;
                }
                if (other.HasNode) {
                  MergeNode(other.Node);
                }
                if (other.HasQuery) {
                  MergeQuery(other.Query);
                }
                if (other.HasRecursiveFetch) {
                  RecursiveFetch = other.RecursiveFetch;
                }
                if (other.HasFetchKeys) {
                  FetchKeys = other.FetchKeys;
                }
                if (other.HasFetchPaths) {
                  FetchPaths = other.FetchPaths;
                }
                if (other.HasFetchSamples) {
                  FetchSamples = other.FetchSamples;
                }
                if (other.HasDescriptions) {
                  Descriptions = other.Descriptions;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_inventoryFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _inventoryFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 10: {
                      global::Plugin.Settings.Types.Node.Builder subBuilder = global::Plugin.Settings.Types.Node.CreateBuilder();
                      if (result.hasNode) {
                        subBuilder.MergeFrom(Node);
                      }
                      input.ReadMessage(subBuilder, extensionRegistry);
                      Node = subBuilder.BuildPartial();
                      break;
                    }
                    case 16: {
                      result.hasRecursiveFetch = input.ReadBool(ref result.recursiveFetch_);
                      break;
                    }
                    case 24: {
                      result.hasFetchKeys = input.ReadBool(ref result.fetchKeys_);
                      break;
                    }
                    case 32: {
                      result.hasFetchPaths = input.ReadBool(ref result.fetchPaths_);
                      break;
                    }
                    case 40: {
                      result.hasFetchSamples = input.ReadBool(ref result.fetchSamples_);
                      break;
                    }
                    case 48: {
                      result.hasDescriptions = input.ReadBool(ref result.descriptions_);
                      break;
                    }
                    case 82: {
                      global::Plugin.Settings.Types.Query.Builder subBuilder = global::Plugin.Settings.Types.Query.CreateBuilder();
                      if (result.hasQuery) {
                        subBuilder.MergeFrom(Query);
                      }
                      input.ReadMessage(subBuilder, extensionRegistry);
                      Query = subBuilder.BuildPartial();
                      break;
                    }
                    case 90: {
                      result.hasPlugin = input.ReadString(ref result.plugin_);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasPlugin {
                get { return result.hasPlugin; }
              }
              public string Plugin {
                get { return result.Plugin; }
                set { SetPlugin(value); }
              }
              public Builder SetPlugin(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasPlugin = true;
                result.plugin_ = value;
                return this;
              }
              public Builder ClearPlugin() {
                PrepareBuilder();
                result.hasPlugin = false;
                result.plugin_ = "";
                return this;
              }
              
              public bool HasNode {
               get { return result.hasNode; }
              }
              public global::Plugin.Settings.Types.Node Node {
                get { return result.Node; }
                set { SetNode(value); }
              }
              public Builder SetNode(global::Plugin.Settings.Types.Node value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasNode = true;
                result.node_ = value;
                return this;
              }
              public Builder SetNode(global::Plugin.Settings.Types.Node.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasNode = true;
                result.node_ = builderForValue.Build();
                return this;
              }
              public Builder MergeNode(global::Plugin.Settings.Types.Node value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasNode &&
                    result.node_ != global::Plugin.Settings.Types.Node.DefaultInstance) {
                    result.node_ = global::Plugin.Settings.Types.Node.CreateBuilder(result.node_).MergeFrom(value).BuildPartial();
                } else {
                  result.node_ = value;
                }
                result.hasNode = true;
                return this;
              }
              public Builder ClearNode() {
                PrepareBuilder();
                result.hasNode = false;
                result.node_ = null;
                return this;
              }
              
              public bool HasQuery {
               get { return result.hasQuery; }
              }
              public global::Plugin.Settings.Types.Query Query {
                get { return result.Query; }
                set { SetQuery(value); }
              }
              public Builder SetQuery(global::Plugin.Settings.Types.Query value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasQuery = true;
                result.query_ = value;
                return this;
              }
              public Builder SetQuery(global::Plugin.Settings.Types.Query.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasQuery = true;
                result.query_ = builderForValue.Build();
                return this;
              }
              public Builder MergeQuery(global::Plugin.Settings.Types.Query value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasQuery &&
                    result.query_ != global::Plugin.Settings.Types.Query.DefaultInstance) {
                    result.query_ = global::Plugin.Settings.Types.Query.CreateBuilder(result.query_).MergeFrom(value).BuildPartial();
                } else {
                  result.query_ = value;
                }
                result.hasQuery = true;
                return this;
              }
              public Builder ClearQuery() {
                PrepareBuilder();
                result.hasQuery = false;
                result.query_ = null;
                return this;
              }
              
              public bool HasRecursiveFetch {
                get { return result.hasRecursiveFetch; }
              }
              public bool RecursiveFetch {
                get { return result.RecursiveFetch; }
                set { SetRecursiveFetch(value); }
              }
              public Builder SetRecursiveFetch(bool value) {
                PrepareBuilder();
                result.hasRecursiveFetch = true;
                result.recursiveFetch_ = value;
                return this;
              }
              public Builder ClearRecursiveFetch() {
                PrepareBuilder();
                result.hasRecursiveFetch = false;
                result.recursiveFetch_ = false;
                return this;
              }
              
              public bool HasFetchKeys {
                get { return result.hasFetchKeys; }
              }
              public bool FetchKeys {
                get { return result.FetchKeys; }
                set { SetFetchKeys(value); }
              }
              public Builder SetFetchKeys(bool value) {
                PrepareBuilder();
                result.hasFetchKeys = true;
                result.fetchKeys_ = value;
                return this;
              }
              public Builder ClearFetchKeys() {
                PrepareBuilder();
                result.hasFetchKeys = false;
                result.fetchKeys_ = false;
                return this;
              }
              
              public bool HasFetchPaths {
                get { return result.hasFetchPaths; }
              }
              public bool FetchPaths {
                get { return result.FetchPaths; }
                set { SetFetchPaths(value); }
              }
              public Builder SetFetchPaths(bool value) {
                PrepareBuilder();
                result.hasFetchPaths = true;
                result.fetchPaths_ = value;
                return this;
              }
              public Builder ClearFetchPaths() {
                PrepareBuilder();
                result.hasFetchPaths = false;
                result.fetchPaths_ = false;
                return this;
              }
              
              public bool HasFetchSamples {
                get { return result.hasFetchSamples; }
              }
              public bool FetchSamples {
                get { return result.FetchSamples; }
                set { SetFetchSamples(value); }
              }
              public Builder SetFetchSamples(bool value) {
                PrepareBuilder();
                result.hasFetchSamples = true;
                result.fetchSamples_ = value;
                return this;
              }
              public Builder ClearFetchSamples() {
                PrepareBuilder();
                result.hasFetchSamples = false;
                result.fetchSamples_ = false;
                return this;
              }
              
              public bool HasDescriptions {
                get { return result.hasDescriptions; }
              }
              public bool Descriptions {
                get { return result.Descriptions; }
                set { SetDescriptions(value); }
              }
              public Builder SetDescriptions(bool value) {
                PrepareBuilder();
                result.hasDescriptions = true;
                result.descriptions_ = value;
                return this;
              }
              public Builder ClearDescriptions() {
                PrepareBuilder();
                result.hasDescriptions = false;
                result.descriptions_ = false;
                return this;
              }
            }
            static Inventory() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Control : pb::GeneratedMessage<Control, Control.Builder> {
            private Control() { }
            private static readonly Control defaultInstance = new Control().MakeReadOnly();
            private static readonly string[] _controlFieldNames = new string[] { "command", "context" };
            private static readonly uint[] _controlFieldTags = new uint[] { 8, 18 };
            public static Control DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Control DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Control ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_SettingsRequestMessage_Request_Control__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Control, Control.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_SettingsRequestMessage_Request_Control__FieldAccessorTable; }
            }
            
            public const int CommandFieldNumber = 1;
            private bool hasCommand;
            private global::Plugin.Settings.Types.Command command_ = global::Plugin.Settings.Types.Command.LOAD;
            public bool HasCommand {
              get { return hasCommand; }
            }
            public global::Plugin.Settings.Types.Command Command {
              get { return command_; }
            }
            
            public const int ContextFieldNumber = 2;
            private bool hasContext;
            private string context_ = "";
            public bool HasContext {
              get { return hasContext; }
            }
            public string Context {
              get { return context_; }
            }
            
            public override bool IsInitialized {
              get {
                if (!hasCommand) return false;
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _controlFieldNames;
              if (hasCommand) {
                output.WriteEnum(1, field_names[0], (int) Command, Command);
              }
              if (hasContext) {
                output.WriteString(2, field_names[1], Context);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                if (hasCommand) {
                  size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Command);
                }
                if (hasContext) {
                  size += pb::CodedOutputStream.ComputeStringSize(2, Context);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static Control ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Control ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Control ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Control ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Control ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Control ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Control ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Control ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Control ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Control ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Control MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Control prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Control, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Control cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Control result;
              
              private Control PrepareBuilder() {
                if (resultIsReadOnly) {
                  Control original = result;
                  result = new Control();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Control MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.SettingsRequestMessage.Types.Request.Types.Control.Descriptor; }
              }
              
              public override Control DefaultInstanceForType {
                get { return global::Plugin.SettingsRequestMessage.Types.Request.Types.Control.DefaultInstance; }
              }
              
              public override Control BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Control) {
                  return MergeFrom((Control) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Control other) {
                if (other == global::Plugin.SettingsRequestMessage.Types.Request.Types.Control.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasCommand) {
                  Command = other.Command;
                }
                if (other.HasContext) {
                  Context = other.Context;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_controlFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _controlFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 8: {
                      object unknown;
                      if(input.ReadEnum(ref result.command_, out unknown)) {
                        result.hasCommand = true;
                      } else if(unknown is int) {
                        if (unknownFields == null) {
                          unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                        }
                        unknownFields.MergeVarintField(1, (ulong)(int)unknown);
                      }
                      break;
                    }
                    case 18: {
                      result.hasContext = input.ReadString(ref result.context_);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasCommand {
               get { return result.hasCommand; }
              }
              public global::Plugin.Settings.Types.Command Command {
                get { return result.Command; }
                set { SetCommand(value); }
              }
              public Builder SetCommand(global::Plugin.Settings.Types.Command value) {
                PrepareBuilder();
                result.hasCommand = true;
                result.command_ = value;
                return this;
              }
              public Builder ClearCommand() {
                PrepareBuilder();
                result.hasCommand = false;
                result.command_ = global::Plugin.Settings.Types.Command.LOAD;
                return this;
              }
              
              public bool HasContext {
                get { return result.hasContext; }
              }
              public string Context {
                get { return result.Context; }
                set { SetContext(value); }
              }
              public Builder SetContext(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasContext = true;
                result.context_ = value;
                return this;
              }
              public Builder ClearContext() {
                PrepareBuilder();
                result.hasContext = false;
                result.context_ = "";
                return this;
              }
            }
            static Control() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Status : pb::GeneratedMessage<Status, Status.Builder> {
            private Status() { }
            private static readonly Status defaultInstance = new Status().MakeReadOnly();
            private static readonly string[] _statusFieldNames = new string[] {  };
            private static readonly uint[] _statusFieldTags = new uint[] {  };
            public static Status DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Status DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Status ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_SettingsRequestMessage_Request_Status__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Status, Status.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_SettingsRequestMessage_Request_Status__FieldAccessorTable; }
            }
            
            public override bool IsInitialized {
              get {
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _statusFieldNames;
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static Status ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Status ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Status ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Status ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Status ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Status ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Status ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Status ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Status ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Status ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Status MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Status prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Status, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Status cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Status result;
              
              private Status PrepareBuilder() {
                if (resultIsReadOnly) {
                  Status original = result;
                  result = new Status();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Status MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.SettingsRequestMessage.Types.Request.Types.Status.Descriptor; }
              }
              
              public override Status DefaultInstanceForType {
                get { return global::Plugin.SettingsRequestMessage.Types.Request.Types.Status.DefaultInstance; }
              }
              
              public override Status BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Status) {
                  return MergeFrom((Status) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Status other) {
                if (other == global::Plugin.SettingsRequestMessage.Types.Request.Types.Status.DefaultInstance) return this;
                PrepareBuilder();
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_statusFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _statusFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
            }
            static Status() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
        }
        #endregion
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private long id_;
        public bool HasId {
          get { return hasId; }
        }
        public long Id {
          get { return id_; }
        }
        
        public const int PluginIdFieldNumber = 3;
        private bool hasPluginId;
        private int pluginId_;
        public bool HasPluginId {
          get { return hasPluginId; }
        }
        public int PluginId {
          get { return pluginId_; }
        }
        
        public const int RegistrationFieldNumber = 10;
        private bool hasRegistration;
        private global::Plugin.SettingsRequestMessage.Types.Request.Types.Registration registration_;
        public bool HasRegistration {
          get { return hasRegistration; }
        }
        public global::Plugin.SettingsRequestMessage.Types.Request.Types.Registration Registration {
          get { return registration_ ?? global::Plugin.SettingsRequestMessage.Types.Request.Types.Registration.DefaultInstance; }
        }
        
        public const int QueryFieldNumber = 11;
        private bool hasQuery;
        private global::Plugin.SettingsRequestMessage.Types.Request.Types.Query query_;
        public bool HasQuery {
          get { return hasQuery; }
        }
        public global::Plugin.SettingsRequestMessage.Types.Request.Types.Query Query {
          get { return query_ ?? global::Plugin.SettingsRequestMessage.Types.Request.Types.Query.DefaultInstance; }
        }
        
        public const int UpdateFieldNumber = 12;
        private bool hasUpdate;
        private global::Plugin.SettingsRequestMessage.Types.Request.Types.Update update_;
        public bool HasUpdate {
          get { return hasUpdate; }
        }
        public global::Plugin.SettingsRequestMessage.Types.Request.Types.Update Update {
          get { return update_ ?? global::Plugin.SettingsRequestMessage.Types.Request.Types.Update.DefaultInstance; }
        }
        
        public const int InventoryFieldNumber = 13;
        private bool hasInventory;
        private global::Plugin.SettingsRequestMessage.Types.Request.Types.Inventory inventory_;
        public bool HasInventory {
          get { return hasInventory; }
        }
        public global::Plugin.SettingsRequestMessage.Types.Request.Types.Inventory Inventory {
          get { return inventory_ ?? global::Plugin.SettingsRequestMessage.Types.Request.Types.Inventory.DefaultInstance; }
        }
        
        public const int ControlFieldNumber = 14;
        private bool hasControl;
        private global::Plugin.SettingsRequestMessage.Types.Request.Types.Control control_;
        public bool HasControl {
          get { return hasControl; }
        }
        public global::Plugin.SettingsRequestMessage.Types.Request.Types.Control Control {
          get { return control_ ?? global::Plugin.SettingsRequestMessage.Types.Request.Types.Control.DefaultInstance; }
        }
        
        public const int StatusFieldNumber = 15;
        private bool hasStatus;
        private global::Plugin.SettingsRequestMessage.Types.Request.Types.Status status_;
        public bool HasStatus {
          get { return hasStatus; }
        }
        public global::Plugin.SettingsRequestMessage.Types.Request.Types.Status Status {
          get { return status_ ?? global::Plugin.SettingsRequestMessage.Types.Request.Types.Status.DefaultInstance; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasPluginId) return false;
            if (HasRegistration) {
              if (!Registration.IsInitialized) return false;
            }
            if (HasQuery) {
              if (!Query.IsInitialized) return false;
            }
            if (HasUpdate) {
              if (!Update.IsInitialized) return false;
            }
            if (HasInventory) {
              if (!Inventory.IsInitialized) return false;
            }
            if (HasControl) {
              if (!Control.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _requestFieldNames;
          if (hasId) {
            output.WriteInt64(1, field_names[1], Id);
          }
          if (hasPluginId) {
            output.WriteInt32(3, field_names[3], PluginId);
          }
          if (hasRegistration) {
            output.WriteMessage(10, field_names[5], Registration);
          }
          if (hasQuery) {
            output.WriteMessage(11, field_names[4], Query);
          }
          if (hasUpdate) {
            output.WriteMessage(12, field_names[7], Update);
          }
          if (hasInventory) {
            output.WriteMessage(13, field_names[2], Inventory);
          }
          if (hasControl) {
            output.WriteMessage(14, field_names[0], Control);
          }
          if (hasStatus) {
            output.WriteMessage(15, field_names[6], Status);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasId) {
              size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
            }
            if (hasPluginId) {
              size += pb::CodedOutputStream.ComputeInt32Size(3, PluginId);
            }
            if (hasRegistration) {
              size += pb::CodedOutputStream.ComputeMessageSize(10, Registration);
            }
            if (hasQuery) {
              size += pb::CodedOutputStream.ComputeMessageSize(11, Query);
            }
            if (hasUpdate) {
              size += pb::CodedOutputStream.ComputeMessageSize(12, Update);
            }
            if (hasInventory) {
              size += pb::CodedOutputStream.ComputeMessageSize(13, Inventory);
            }
            if (hasControl) {
              size += pb::CodedOutputStream.ComputeMessageSize(14, Control);
            }
            if (hasStatus) {
              size += pb::CodedOutputStream.ComputeMessageSize(15, Status);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Request ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Request ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Request ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Request ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Request ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Request ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Request ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Request ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Request ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Request ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Request MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Request prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Request, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Request cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Request result;
          
          private Request PrepareBuilder() {
            if (resultIsReadOnly) {
              Request original = result;
              result = new Request();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Request MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.SettingsRequestMessage.Types.Request.Descriptor; }
          }
          
          public override Request DefaultInstanceForType {
            get { return global::Plugin.SettingsRequestMessage.Types.Request.DefaultInstance; }
          }
          
          public override Request BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Request) {
              return MergeFrom((Request) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Request other) {
            if (other == global::Plugin.SettingsRequestMessage.Types.Request.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasPluginId) {
              PluginId = other.PluginId;
            }
            if (other.HasRegistration) {
              MergeRegistration(other.Registration);
            }
            if (other.HasQuery) {
              MergeQuery(other.Query);
            }
            if (other.HasUpdate) {
              MergeUpdate(other.Update);
            }
            if (other.HasInventory) {
              MergeInventory(other.Inventory);
            }
            if (other.HasControl) {
              MergeControl(other.Control);
            }
            if (other.HasStatus) {
              MergeStatus(other.Status);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_requestFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _requestFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasId = input.ReadInt64(ref result.id_);
                  break;
                }
                case 24: {
                  result.hasPluginId = input.ReadInt32(ref result.pluginId_);
                  break;
                }
                case 82: {
                  global::Plugin.SettingsRequestMessage.Types.Request.Types.Registration.Builder subBuilder = global::Plugin.SettingsRequestMessage.Types.Request.Types.Registration.CreateBuilder();
                  if (result.hasRegistration) {
                    subBuilder.MergeFrom(Registration);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Registration = subBuilder.BuildPartial();
                  break;
                }
                case 90: {
                  global::Plugin.SettingsRequestMessage.Types.Request.Types.Query.Builder subBuilder = global::Plugin.SettingsRequestMessage.Types.Request.Types.Query.CreateBuilder();
                  if (result.hasQuery) {
                    subBuilder.MergeFrom(Query);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Query = subBuilder.BuildPartial();
                  break;
                }
                case 98: {
                  global::Plugin.SettingsRequestMessage.Types.Request.Types.Update.Builder subBuilder = global::Plugin.SettingsRequestMessage.Types.Request.Types.Update.CreateBuilder();
                  if (result.hasUpdate) {
                    subBuilder.MergeFrom(Update);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Update = subBuilder.BuildPartial();
                  break;
                }
                case 106: {
                  global::Plugin.SettingsRequestMessage.Types.Request.Types.Inventory.Builder subBuilder = global::Plugin.SettingsRequestMessage.Types.Request.Types.Inventory.CreateBuilder();
                  if (result.hasInventory) {
                    subBuilder.MergeFrom(Inventory);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Inventory = subBuilder.BuildPartial();
                  break;
                }
                case 114: {
                  global::Plugin.SettingsRequestMessage.Types.Request.Types.Control.Builder subBuilder = global::Plugin.SettingsRequestMessage.Types.Request.Types.Control.CreateBuilder();
                  if (result.hasControl) {
                    subBuilder.MergeFrom(Control);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Control = subBuilder.BuildPartial();
                  break;
                }
                case 122: {
                  global::Plugin.SettingsRequestMessage.Types.Request.Types.Status.Builder subBuilder = global::Plugin.SettingsRequestMessage.Types.Request.Types.Status.CreateBuilder();
                  if (result.hasStatus) {
                    subBuilder.MergeFrom(Status);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Status = subBuilder.BuildPartial();
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public long Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(long value) {
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = 0L;
            return this;
          }
          
          public bool HasPluginId {
            get { return result.hasPluginId; }
          }
          public int PluginId {
            get { return result.PluginId; }
            set { SetPluginId(value); }
          }
          public Builder SetPluginId(int value) {
            PrepareBuilder();
            result.hasPluginId = true;
            result.pluginId_ = value;
            return this;
          }
          public Builder ClearPluginId() {
            PrepareBuilder();
            result.hasPluginId = false;
            result.pluginId_ = 0;
            return this;
          }
          
          public bool HasRegistration {
           get { return result.hasRegistration; }
          }
          public global::Plugin.SettingsRequestMessage.Types.Request.Types.Registration Registration {
            get { return result.Registration; }
            set { SetRegistration(value); }
          }
          public Builder SetRegistration(global::Plugin.SettingsRequestMessage.Types.Request.Types.Registration value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasRegistration = true;
            result.registration_ = value;
            return this;
          }
          public Builder SetRegistration(global::Plugin.SettingsRequestMessage.Types.Request.Types.Registration.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasRegistration = true;
            result.registration_ = builderForValue.Build();
            return this;
          }
          public Builder MergeRegistration(global::Plugin.SettingsRequestMessage.Types.Request.Types.Registration value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasRegistration &&
                result.registration_ != global::Plugin.SettingsRequestMessage.Types.Request.Types.Registration.DefaultInstance) {
                result.registration_ = global::Plugin.SettingsRequestMessage.Types.Request.Types.Registration.CreateBuilder(result.registration_).MergeFrom(value).BuildPartial();
            } else {
              result.registration_ = value;
            }
            result.hasRegistration = true;
            return this;
          }
          public Builder ClearRegistration() {
            PrepareBuilder();
            result.hasRegistration = false;
            result.registration_ = null;
            return this;
          }
          
          public bool HasQuery {
           get { return result.hasQuery; }
          }
          public global::Plugin.SettingsRequestMessage.Types.Request.Types.Query Query {
            get { return result.Query; }
            set { SetQuery(value); }
          }
          public Builder SetQuery(global::Plugin.SettingsRequestMessage.Types.Request.Types.Query value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasQuery = true;
            result.query_ = value;
            return this;
          }
          public Builder SetQuery(global::Plugin.SettingsRequestMessage.Types.Request.Types.Query.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasQuery = true;
            result.query_ = builderForValue.Build();
            return this;
          }
          public Builder MergeQuery(global::Plugin.SettingsRequestMessage.Types.Request.Types.Query value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasQuery &&
                result.query_ != global::Plugin.SettingsRequestMessage.Types.Request.Types.Query.DefaultInstance) {
                result.query_ = global::Plugin.SettingsRequestMessage.Types.Request.Types.Query.CreateBuilder(result.query_).MergeFrom(value).BuildPartial();
            } else {
              result.query_ = value;
            }
            result.hasQuery = true;
            return this;
          }
          public Builder ClearQuery() {
            PrepareBuilder();
            result.hasQuery = false;
            result.query_ = null;
            return this;
          }
          
          public bool HasUpdate {
           get { return result.hasUpdate; }
          }
          public global::Plugin.SettingsRequestMessage.Types.Request.Types.Update Update {
            get { return result.Update; }
            set { SetUpdate(value); }
          }
          public Builder SetUpdate(global::Plugin.SettingsRequestMessage.Types.Request.Types.Update value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasUpdate = true;
            result.update_ = value;
            return this;
          }
          public Builder SetUpdate(global::Plugin.SettingsRequestMessage.Types.Request.Types.Update.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasUpdate = true;
            result.update_ = builderForValue.Build();
            return this;
          }
          public Builder MergeUpdate(global::Plugin.SettingsRequestMessage.Types.Request.Types.Update value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasUpdate &&
                result.update_ != global::Plugin.SettingsRequestMessage.Types.Request.Types.Update.DefaultInstance) {
                result.update_ = global::Plugin.SettingsRequestMessage.Types.Request.Types.Update.CreateBuilder(result.update_).MergeFrom(value).BuildPartial();
            } else {
              result.update_ = value;
            }
            result.hasUpdate = true;
            return this;
          }
          public Builder ClearUpdate() {
            PrepareBuilder();
            result.hasUpdate = false;
            result.update_ = null;
            return this;
          }
          
          public bool HasInventory {
           get { return result.hasInventory; }
          }
          public global::Plugin.SettingsRequestMessage.Types.Request.Types.Inventory Inventory {
            get { return result.Inventory; }
            set { SetInventory(value); }
          }
          public Builder SetInventory(global::Plugin.SettingsRequestMessage.Types.Request.Types.Inventory value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasInventory = true;
            result.inventory_ = value;
            return this;
          }
          public Builder SetInventory(global::Plugin.SettingsRequestMessage.Types.Request.Types.Inventory.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasInventory = true;
            result.inventory_ = builderForValue.Build();
            return this;
          }
          public Builder MergeInventory(global::Plugin.SettingsRequestMessage.Types.Request.Types.Inventory value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasInventory &&
                result.inventory_ != global::Plugin.SettingsRequestMessage.Types.Request.Types.Inventory.DefaultInstance) {
                result.inventory_ = global::Plugin.SettingsRequestMessage.Types.Request.Types.Inventory.CreateBuilder(result.inventory_).MergeFrom(value).BuildPartial();
            } else {
              result.inventory_ = value;
            }
            result.hasInventory = true;
            return this;
          }
          public Builder ClearInventory() {
            PrepareBuilder();
            result.hasInventory = false;
            result.inventory_ = null;
            return this;
          }
          
          public bool HasControl {
           get { return result.hasControl; }
          }
          public global::Plugin.SettingsRequestMessage.Types.Request.Types.Control Control {
            get { return result.Control; }
            set { SetControl(value); }
          }
          public Builder SetControl(global::Plugin.SettingsRequestMessage.Types.Request.Types.Control value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasControl = true;
            result.control_ = value;
            return this;
          }
          public Builder SetControl(global::Plugin.SettingsRequestMessage.Types.Request.Types.Control.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasControl = true;
            result.control_ = builderForValue.Build();
            return this;
          }
          public Builder MergeControl(global::Plugin.SettingsRequestMessage.Types.Request.Types.Control value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasControl &&
                result.control_ != global::Plugin.SettingsRequestMessage.Types.Request.Types.Control.DefaultInstance) {
                result.control_ = global::Plugin.SettingsRequestMessage.Types.Request.Types.Control.CreateBuilder(result.control_).MergeFrom(value).BuildPartial();
            } else {
              result.control_ = value;
            }
            result.hasControl = true;
            return this;
          }
          public Builder ClearControl() {
            PrepareBuilder();
            result.hasControl = false;
            result.control_ = null;
            return this;
          }
          
          public bool HasStatus {
           get { return result.hasStatus; }
          }
          public global::Plugin.SettingsRequestMessage.Types.Request.Types.Status Status {
            get { return result.Status; }
            set { SetStatus(value); }
          }
          public Builder SetStatus(global::Plugin.SettingsRequestMessage.Types.Request.Types.Status value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasStatus = true;
            result.status_ = value;
            return this;
          }
          public Builder SetStatus(global::Plugin.SettingsRequestMessage.Types.Request.Types.Status.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasStatus = true;
            result.status_ = builderForValue.Build();
            return this;
          }
          public Builder MergeStatus(global::Plugin.SettingsRequestMessage.Types.Request.Types.Status value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasStatus &&
                result.status_ != global::Plugin.SettingsRequestMessage.Types.Request.Types.Status.DefaultInstance) {
                result.status_ = global::Plugin.SettingsRequestMessage.Types.Request.Types.Status.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
            } else {
              result.status_ = value;
            }
            result.hasStatus = true;
            return this;
          }
          public Builder ClearStatus() {
            PrepareBuilder();
            result.hasStatus = false;
            result.status_ = null;
            return this;
          }
        }
        static Request() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::Plugin.Common.Types.Header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::Plugin.Common.Types.Header Header {
      get { return header_ ?? global::Plugin.Common.Types.Header.DefaultInstance; }
    }
    
    public const int PayloadFieldNumber = 2;
    private pbc::PopsicleList<global::Plugin.SettingsRequestMessage.Types.Request> payload_ = new pbc::PopsicleList<global::Plugin.SettingsRequestMessage.Types.Request>();
    public scg::IList<global::Plugin.SettingsRequestMessage.Types.Request> PayloadList {
      get { return payload_; }
    }
    public int PayloadCount {
      get { return payload_.Count; }
    }
    public global::Plugin.SettingsRequestMessage.Types.Request GetPayload(int index) {
      return payload_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (HasHeader) {
          if (!Header.IsInitialized) return false;
        }
        foreach (global::Plugin.SettingsRequestMessage.Types.Request element in PayloadList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _settingsRequestMessageFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[0], Header);
      }
      if (payload_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], payload_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
        }
        foreach (global::Plugin.SettingsRequestMessage.Types.Request element in PayloadList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SettingsRequestMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SettingsRequestMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SettingsRequestMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SettingsRequestMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SettingsRequestMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SettingsRequestMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SettingsRequestMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SettingsRequestMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SettingsRequestMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SettingsRequestMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SettingsRequestMessage MakeReadOnly() {
      payload_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SettingsRequestMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SettingsRequestMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SettingsRequestMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SettingsRequestMessage result;
      
      private SettingsRequestMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          SettingsRequestMessage original = result;
          result = new SettingsRequestMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SettingsRequestMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.SettingsRequestMessage.Descriptor; }
      }
      
      public override SettingsRequestMessage DefaultInstanceForType {
        get { return global::Plugin.SettingsRequestMessage.DefaultInstance; }
      }
      
      public override SettingsRequestMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SettingsRequestMessage) {
          return MergeFrom((SettingsRequestMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SettingsRequestMessage other) {
        if (other == global::Plugin.SettingsRequestMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.payload_.Count != 0) {
          result.payload_.Add(other.payload_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_settingsRequestMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _settingsRequestMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Plugin.Common.Types.Header.Builder subBuilder = global::Plugin.Common.Types.Header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.payload_, global::Plugin.SettingsRequestMessage.Types.Request.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::Plugin.Common.Types.Header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::Plugin.Common.Types.Header.DefaultInstance) {
            result.header_ = global::Plugin.Common.Types.Header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.SettingsRequestMessage.Types.Request> PayloadList {
        get { return PrepareBuilder().payload_; }
      }
      public int PayloadCount {
        get { return result.PayloadCount; }
      }
      public global::Plugin.SettingsRequestMessage.Types.Request GetPayload(int index) {
        return result.GetPayload(index);
      }
      public Builder SetPayload(int index, global::Plugin.SettingsRequestMessage.Types.Request value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_[index] = value;
        return this;
      }
      public Builder SetPayload(int index, global::Plugin.SettingsRequestMessage.Types.Request.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPayload(global::Plugin.SettingsRequestMessage.Types.Request value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_.Add(value);
        return this;
      }
      public Builder AddPayload(global::Plugin.SettingsRequestMessage.Types.Request.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePayload(scg::IEnumerable<global::Plugin.SettingsRequestMessage.Types.Request> values) {
        PrepareBuilder();
        result.payload_.Add(values);
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.payload_.Clear();
        return this;
      }
    }
    static SettingsRequestMessage() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SettingsResponseMessage : pb::GeneratedMessage<SettingsResponseMessage, SettingsResponseMessage.Builder> {
    private SettingsResponseMessage() { }
    private static readonly SettingsResponseMessage defaultInstance = new SettingsResponseMessage().MakeReadOnly();
    private static readonly string[] _settingsResponseMessageFieldNames = new string[] { "header", "payload" };
    private static readonly uint[] _settingsResponseMessageFieldTags = new uint[] { 10, 18 };
    public static SettingsResponseMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SettingsResponseMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SettingsResponseMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_SettingsResponseMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SettingsResponseMessage, SettingsResponseMessage.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_SettingsResponseMessage__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Response : pb::GeneratedMessage<Response, Response.Builder> {
        private Response() { }
        private static readonly Response defaultInstance = new Response().MakeReadOnly();
        private static readonly string[] _responseFieldNames = new string[] { "control", "id", "inventory", "query", "registration", "result", "status", "update" };
        private static readonly uint[] _responseFieldTags = new uint[] { 114, 8, 106, 90, 82, 18, 122, 98 };
        public static Response DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Response DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Response ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_SettingsResponseMessage_Response__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Response, Response.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_SettingsResponseMessage_Response__FieldAccessorTable; }
        }
        
        #region Nested types
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static partial class Types {
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Registration : pb::GeneratedMessage<Registration, Registration.Builder> {
            private Registration() { }
            private static readonly Registration defaultInstance = new Registration().MakeReadOnly();
            private static readonly string[] _registrationFieldNames = new string[] {  };
            private static readonly uint[] _registrationFieldTags = new uint[] {  };
            public static Registration DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Registration DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Registration ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_SettingsResponseMessage_Response_Registration__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Registration, Registration.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_SettingsResponseMessage_Response_Registration__FieldAccessorTable; }
            }
            
            public override bool IsInitialized {
              get {
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _registrationFieldNames;
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static Registration ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Registration ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Registration ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Registration ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Registration ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Registration ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Registration ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Registration ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Registration ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Registration ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Registration MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Registration prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Registration, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Registration cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Registration result;
              
              private Registration PrepareBuilder() {
                if (resultIsReadOnly) {
                  Registration original = result;
                  result = new Registration();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Registration MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.SettingsResponseMessage.Types.Response.Types.Registration.Descriptor; }
              }
              
              public override Registration DefaultInstanceForType {
                get { return global::Plugin.SettingsResponseMessage.Types.Response.Types.Registration.DefaultInstance; }
              }
              
              public override Registration BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Registration) {
                  return MergeFrom((Registration) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Registration other) {
                if (other == global::Plugin.SettingsResponseMessage.Types.Response.Types.Registration.DefaultInstance) return this;
                PrepareBuilder();
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_registrationFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _registrationFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
            }
            static Registration() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Query : pb::GeneratedMessage<Query, Query.Builder> {
            private Query() { }
            private static readonly Query defaultInstance = new Query().MakeReadOnly();
            private static readonly string[] _queryFieldNames = new string[] { "node", "value" };
            private static readonly uint[] _queryFieldTags = new uint[] { 10, 18 };
            public static Query DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Query DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Query ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_SettingsResponseMessage_Response_Query__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Query, Query.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_SettingsResponseMessage_Response_Query__FieldAccessorTable; }
            }
            
            public const int NodeFieldNumber = 1;
            private bool hasNode;
            private global::Plugin.Settings.Types.Node node_;
            public bool HasNode {
              get { return hasNode; }
            }
            public global::Plugin.Settings.Types.Node Node {
              get { return node_ ?? global::Plugin.Settings.Types.Node.DefaultInstance; }
            }
            
            public const int ValueFieldNumber = 2;
            private bool hasValue;
            private global::Plugin.Common.Types.AnyDataType value_;
            public bool HasValue {
              get { return hasValue; }
            }
            public global::Plugin.Common.Types.AnyDataType Value {
              get { return value_ ?? global::Plugin.Common.Types.AnyDataType.DefaultInstance; }
            }
            
            public override bool IsInitialized {
              get {
                if (!hasNode) return false;
                if (!hasValue) return false;
                if (!Node.IsInitialized) return false;
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _queryFieldNames;
              if (hasNode) {
                output.WriteMessage(1, field_names[0], Node);
              }
              if (hasValue) {
                output.WriteMessage(2, field_names[1], Value);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                if (hasNode) {
                  size += pb::CodedOutputStream.ComputeMessageSize(1, Node);
                }
                if (hasValue) {
                  size += pb::CodedOutputStream.ComputeMessageSize(2, Value);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static Query ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Query ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Query ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Query ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Query ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Query ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Query ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Query ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Query ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Query ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Query MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Query prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Query, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Query cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Query result;
              
              private Query PrepareBuilder() {
                if (resultIsReadOnly) {
                  Query original = result;
                  result = new Query();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Query MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.SettingsResponseMessage.Types.Response.Types.Query.Descriptor; }
              }
              
              public override Query DefaultInstanceForType {
                get { return global::Plugin.SettingsResponseMessage.Types.Response.Types.Query.DefaultInstance; }
              }
              
              public override Query BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Query) {
                  return MergeFrom((Query) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Query other) {
                if (other == global::Plugin.SettingsResponseMessage.Types.Response.Types.Query.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasNode) {
                  MergeNode(other.Node);
                }
                if (other.HasValue) {
                  MergeValue(other.Value);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_queryFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _queryFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 10: {
                      global::Plugin.Settings.Types.Node.Builder subBuilder = global::Plugin.Settings.Types.Node.CreateBuilder();
                      if (result.hasNode) {
                        subBuilder.MergeFrom(Node);
                      }
                      input.ReadMessage(subBuilder, extensionRegistry);
                      Node = subBuilder.BuildPartial();
                      break;
                    }
                    case 18: {
                      global::Plugin.Common.Types.AnyDataType.Builder subBuilder = global::Plugin.Common.Types.AnyDataType.CreateBuilder();
                      if (result.hasValue) {
                        subBuilder.MergeFrom(Value);
                      }
                      input.ReadMessage(subBuilder, extensionRegistry);
                      Value = subBuilder.BuildPartial();
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasNode {
               get { return result.hasNode; }
              }
              public global::Plugin.Settings.Types.Node Node {
                get { return result.Node; }
                set { SetNode(value); }
              }
              public Builder SetNode(global::Plugin.Settings.Types.Node value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasNode = true;
                result.node_ = value;
                return this;
              }
              public Builder SetNode(global::Plugin.Settings.Types.Node.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasNode = true;
                result.node_ = builderForValue.Build();
                return this;
              }
              public Builder MergeNode(global::Plugin.Settings.Types.Node value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasNode &&
                    result.node_ != global::Plugin.Settings.Types.Node.DefaultInstance) {
                    result.node_ = global::Plugin.Settings.Types.Node.CreateBuilder(result.node_).MergeFrom(value).BuildPartial();
                } else {
                  result.node_ = value;
                }
                result.hasNode = true;
                return this;
              }
              public Builder ClearNode() {
                PrepareBuilder();
                result.hasNode = false;
                result.node_ = null;
                return this;
              }
              
              public bool HasValue {
               get { return result.hasValue; }
              }
              public global::Plugin.Common.Types.AnyDataType Value {
                get { return result.Value; }
                set { SetValue(value); }
              }
              public Builder SetValue(global::Plugin.Common.Types.AnyDataType value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasValue = true;
                result.value_ = value;
                return this;
              }
              public Builder SetValue(global::Plugin.Common.Types.AnyDataType.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasValue = true;
                result.value_ = builderForValue.Build();
                return this;
              }
              public Builder MergeValue(global::Plugin.Common.Types.AnyDataType value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasValue &&
                    result.value_ != global::Plugin.Common.Types.AnyDataType.DefaultInstance) {
                    result.value_ = global::Plugin.Common.Types.AnyDataType.CreateBuilder(result.value_).MergeFrom(value).BuildPartial();
                } else {
                  result.value_ = value;
                }
                result.hasValue = true;
                return this;
              }
              public Builder ClearValue() {
                PrepareBuilder();
                result.hasValue = false;
                result.value_ = null;
                return this;
              }
            }
            static Query() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Update : pb::GeneratedMessage<Update, Update.Builder> {
            private Update() { }
            private static readonly Update defaultInstance = new Update().MakeReadOnly();
            private static readonly string[] _updateFieldNames = new string[] {  };
            private static readonly uint[] _updateFieldTags = new uint[] {  };
            public static Update DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Update DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Update ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_SettingsResponseMessage_Response_Update__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Update, Update.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_SettingsResponseMessage_Response_Update__FieldAccessorTable; }
            }
            
            public override bool IsInitialized {
              get {
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _updateFieldNames;
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static Update ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Update ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Update ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Update ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Update ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Update ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Update ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Update ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Update ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Update ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Update MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Update prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Update, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Update cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Update result;
              
              private Update PrepareBuilder() {
                if (resultIsReadOnly) {
                  Update original = result;
                  result = new Update();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Update MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.SettingsResponseMessage.Types.Response.Types.Update.Descriptor; }
              }
              
              public override Update DefaultInstanceForType {
                get { return global::Plugin.SettingsResponseMessage.Types.Response.Types.Update.DefaultInstance; }
              }
              
              public override Update BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Update) {
                  return MergeFrom((Update) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Update other) {
                if (other == global::Plugin.SettingsResponseMessage.Types.Response.Types.Update.DefaultInstance) return this;
                PrepareBuilder();
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_updateFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _updateFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
            }
            static Update() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Inventory : pb::GeneratedMessage<Inventory, Inventory.Builder> {
            private Inventory() { }
            private static readonly Inventory defaultInstance = new Inventory().MakeReadOnly();
            private static readonly string[] _inventoryFieldNames = new string[] { "info", "node", "value" };
            private static readonly uint[] _inventoryFieldTags = new uint[] { 18, 10, 26 };
            public static Inventory DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Inventory DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Inventory ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_SettingsResponseMessage_Response_Inventory__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Inventory, Inventory.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_SettingsResponseMessage_Response_Inventory__FieldAccessorTable; }
            }
            
            public const int NodeFieldNumber = 1;
            private bool hasNode;
            private global::Plugin.Settings.Types.Node node_;
            public bool HasNode {
              get { return hasNode; }
            }
            public global::Plugin.Settings.Types.Node Node {
              get { return node_ ?? global::Plugin.Settings.Types.Node.DefaultInstance; }
            }
            
            public const int InfoFieldNumber = 2;
            private bool hasInfo;
            private global::Plugin.Settings.Types.Information info_;
            public bool HasInfo {
              get { return hasInfo; }
            }
            public global::Plugin.Settings.Types.Information Info {
              get { return info_ ?? global::Plugin.Settings.Types.Information.DefaultInstance; }
            }
            
            public const int ValueFieldNumber = 3;
            private bool hasValue;
            private global::Plugin.Common.Types.AnyDataType value_;
            public bool HasValue {
              get { return hasValue; }
            }
            public global::Plugin.Common.Types.AnyDataType Value {
              get { return value_ ?? global::Plugin.Common.Types.AnyDataType.DefaultInstance; }
            }
            
            public override bool IsInitialized {
              get {
                if (!hasNode) return false;
                if (!hasInfo) return false;
                if (!Node.IsInitialized) return false;
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _inventoryFieldNames;
              if (hasNode) {
                output.WriteMessage(1, field_names[1], Node);
              }
              if (hasInfo) {
                output.WriteMessage(2, field_names[0], Info);
              }
              if (hasValue) {
                output.WriteMessage(3, field_names[2], Value);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                if (hasNode) {
                  size += pb::CodedOutputStream.ComputeMessageSize(1, Node);
                }
                if (hasInfo) {
                  size += pb::CodedOutputStream.ComputeMessageSize(2, Info);
                }
                if (hasValue) {
                  size += pb::CodedOutputStream.ComputeMessageSize(3, Value);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static Inventory ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Inventory ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Inventory ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Inventory ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Inventory ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Inventory ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Inventory ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Inventory ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Inventory ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Inventory ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Inventory MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Inventory prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Inventory, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Inventory cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Inventory result;
              
              private Inventory PrepareBuilder() {
                if (resultIsReadOnly) {
                  Inventory original = result;
                  result = new Inventory();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Inventory MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.SettingsResponseMessage.Types.Response.Types.Inventory.Descriptor; }
              }
              
              public override Inventory DefaultInstanceForType {
                get { return global::Plugin.SettingsResponseMessage.Types.Response.Types.Inventory.DefaultInstance; }
              }
              
              public override Inventory BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Inventory) {
                  return MergeFrom((Inventory) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Inventory other) {
                if (other == global::Plugin.SettingsResponseMessage.Types.Response.Types.Inventory.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasNode) {
                  MergeNode(other.Node);
                }
                if (other.HasInfo) {
                  MergeInfo(other.Info);
                }
                if (other.HasValue) {
                  MergeValue(other.Value);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_inventoryFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _inventoryFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 10: {
                      global::Plugin.Settings.Types.Node.Builder subBuilder = global::Plugin.Settings.Types.Node.CreateBuilder();
                      if (result.hasNode) {
                        subBuilder.MergeFrom(Node);
                      }
                      input.ReadMessage(subBuilder, extensionRegistry);
                      Node = subBuilder.BuildPartial();
                      break;
                    }
                    case 18: {
                      global::Plugin.Settings.Types.Information.Builder subBuilder = global::Plugin.Settings.Types.Information.CreateBuilder();
                      if (result.hasInfo) {
                        subBuilder.MergeFrom(Info);
                      }
                      input.ReadMessage(subBuilder, extensionRegistry);
                      Info = subBuilder.BuildPartial();
                      break;
                    }
                    case 26: {
                      global::Plugin.Common.Types.AnyDataType.Builder subBuilder = global::Plugin.Common.Types.AnyDataType.CreateBuilder();
                      if (result.hasValue) {
                        subBuilder.MergeFrom(Value);
                      }
                      input.ReadMessage(subBuilder, extensionRegistry);
                      Value = subBuilder.BuildPartial();
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasNode {
               get { return result.hasNode; }
              }
              public global::Plugin.Settings.Types.Node Node {
                get { return result.Node; }
                set { SetNode(value); }
              }
              public Builder SetNode(global::Plugin.Settings.Types.Node value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasNode = true;
                result.node_ = value;
                return this;
              }
              public Builder SetNode(global::Plugin.Settings.Types.Node.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasNode = true;
                result.node_ = builderForValue.Build();
                return this;
              }
              public Builder MergeNode(global::Plugin.Settings.Types.Node value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasNode &&
                    result.node_ != global::Plugin.Settings.Types.Node.DefaultInstance) {
                    result.node_ = global::Plugin.Settings.Types.Node.CreateBuilder(result.node_).MergeFrom(value).BuildPartial();
                } else {
                  result.node_ = value;
                }
                result.hasNode = true;
                return this;
              }
              public Builder ClearNode() {
                PrepareBuilder();
                result.hasNode = false;
                result.node_ = null;
                return this;
              }
              
              public bool HasInfo {
               get { return result.hasInfo; }
              }
              public global::Plugin.Settings.Types.Information Info {
                get { return result.Info; }
                set { SetInfo(value); }
              }
              public Builder SetInfo(global::Plugin.Settings.Types.Information value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasInfo = true;
                result.info_ = value;
                return this;
              }
              public Builder SetInfo(global::Plugin.Settings.Types.Information.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasInfo = true;
                result.info_ = builderForValue.Build();
                return this;
              }
              public Builder MergeInfo(global::Plugin.Settings.Types.Information value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasInfo &&
                    result.info_ != global::Plugin.Settings.Types.Information.DefaultInstance) {
                    result.info_ = global::Plugin.Settings.Types.Information.CreateBuilder(result.info_).MergeFrom(value).BuildPartial();
                } else {
                  result.info_ = value;
                }
                result.hasInfo = true;
                return this;
              }
              public Builder ClearInfo() {
                PrepareBuilder();
                result.hasInfo = false;
                result.info_ = null;
                return this;
              }
              
              public bool HasValue {
               get { return result.hasValue; }
              }
              public global::Plugin.Common.Types.AnyDataType Value {
                get { return result.Value; }
                set { SetValue(value); }
              }
              public Builder SetValue(global::Plugin.Common.Types.AnyDataType value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasValue = true;
                result.value_ = value;
                return this;
              }
              public Builder SetValue(global::Plugin.Common.Types.AnyDataType.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasValue = true;
                result.value_ = builderForValue.Build();
                return this;
              }
              public Builder MergeValue(global::Plugin.Common.Types.AnyDataType value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasValue &&
                    result.value_ != global::Plugin.Common.Types.AnyDataType.DefaultInstance) {
                    result.value_ = global::Plugin.Common.Types.AnyDataType.CreateBuilder(result.value_).MergeFrom(value).BuildPartial();
                } else {
                  result.value_ = value;
                }
                result.hasValue = true;
                return this;
              }
              public Builder ClearValue() {
                PrepareBuilder();
                result.hasValue = false;
                result.value_ = null;
                return this;
              }
            }
            static Inventory() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Control : pb::GeneratedMessage<Control, Control.Builder> {
            private Control() { }
            private static readonly Control defaultInstance = new Control().MakeReadOnly();
            private static readonly string[] _controlFieldNames = new string[] {  };
            private static readonly uint[] _controlFieldTags = new uint[] {  };
            public static Control DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Control DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Control ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_SettingsResponseMessage_Response_Control__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Control, Control.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_SettingsResponseMessage_Response_Control__FieldAccessorTable; }
            }
            
            public override bool IsInitialized {
              get {
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _controlFieldNames;
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static Control ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Control ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Control ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Control ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Control ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Control ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Control ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Control ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Control ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Control ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Control MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Control prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Control, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Control cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Control result;
              
              private Control PrepareBuilder() {
                if (resultIsReadOnly) {
                  Control original = result;
                  result = new Control();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Control MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.SettingsResponseMessage.Types.Response.Types.Control.Descriptor; }
              }
              
              public override Control DefaultInstanceForType {
                get { return global::Plugin.SettingsResponseMessage.Types.Response.Types.Control.DefaultInstance; }
              }
              
              public override Control BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Control) {
                  return MergeFrom((Control) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Control other) {
                if (other == global::Plugin.SettingsResponseMessage.Types.Response.Types.Control.DefaultInstance) return this;
                PrepareBuilder();
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_controlFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _controlFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
            }
            static Control() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Status : pb::GeneratedMessage<Status, Status.Builder> {
            private Status() { }
            private static readonly Status defaultInstance = new Status().MakeReadOnly();
            private static readonly string[] _statusFieldNames = new string[] { "context", "has_changed", "type" };
            private static readonly uint[] _statusFieldTags = new uint[] { 10, 24, 18 };
            public static Status DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Status DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Status ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_SettingsResponseMessage_Response_Status__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Status, Status.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_SettingsResponseMessage_Response_Status__FieldAccessorTable; }
            }
            
            public const int ContextFieldNumber = 1;
            private bool hasContext;
            private string context_ = "";
            public bool HasContext {
              get { return hasContext; }
            }
            public string Context {
              get { return context_; }
            }
            
            public const int TypeFieldNumber = 2;
            private bool hasType;
            private string type_ = "";
            public bool HasType {
              get { return hasType; }
            }
            public string Type {
              get { return type_; }
            }
            
            public const int HasChangedFieldNumber = 3;
            private bool hasHasChanged;
            private bool hasChanged_;
            public bool HasHasChanged {
              get { return hasHasChanged; }
            }
            public bool HasChanged {
              get { return hasChanged_; }
            }
            
            public override bool IsInitialized {
              get {
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _statusFieldNames;
              if (hasContext) {
                output.WriteString(1, field_names[0], Context);
              }
              if (hasType) {
                output.WriteString(2, field_names[2], Type);
              }
              if (hasHasChanged) {
                output.WriteBool(3, field_names[1], HasChanged);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                if (hasContext) {
                  size += pb::CodedOutputStream.ComputeStringSize(1, Context);
                }
                if (hasType) {
                  size += pb::CodedOutputStream.ComputeStringSize(2, Type);
                }
                if (hasHasChanged) {
                  size += pb::CodedOutputStream.ComputeBoolSize(3, HasChanged);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static Status ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Status ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Status ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Status ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Status ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Status ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Status ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Status ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Status ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Status ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Status MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Status prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Status, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Status cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Status result;
              
              private Status PrepareBuilder() {
                if (resultIsReadOnly) {
                  Status original = result;
                  result = new Status();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Status MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.SettingsResponseMessage.Types.Response.Types.Status.Descriptor; }
              }
              
              public override Status DefaultInstanceForType {
                get { return global::Plugin.SettingsResponseMessage.Types.Response.Types.Status.DefaultInstance; }
              }
              
              public override Status BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Status) {
                  return MergeFrom((Status) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Status other) {
                if (other == global::Plugin.SettingsResponseMessage.Types.Response.Types.Status.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasContext) {
                  Context = other.Context;
                }
                if (other.HasType) {
                  Type = other.Type;
                }
                if (other.HasHasChanged) {
                  HasChanged = other.HasChanged;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_statusFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _statusFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 10: {
                      result.hasContext = input.ReadString(ref result.context_);
                      break;
                    }
                    case 18: {
                      result.hasType = input.ReadString(ref result.type_);
                      break;
                    }
                    case 24: {
                      result.hasHasChanged = input.ReadBool(ref result.hasChanged_);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasContext {
                get { return result.hasContext; }
              }
              public string Context {
                get { return result.Context; }
                set { SetContext(value); }
              }
              public Builder SetContext(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasContext = true;
                result.context_ = value;
                return this;
              }
              public Builder ClearContext() {
                PrepareBuilder();
                result.hasContext = false;
                result.context_ = "";
                return this;
              }
              
              public bool HasType {
                get { return result.hasType; }
              }
              public string Type {
                get { return result.Type; }
                set { SetType(value); }
              }
              public Builder SetType(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasType = true;
                result.type_ = value;
                return this;
              }
              public Builder ClearType() {
                PrepareBuilder();
                result.hasType = false;
                result.type_ = "";
                return this;
              }
              
              public bool HasHasChanged {
                get { return result.hasHasChanged; }
              }
              public bool HasChanged {
                get { return result.HasChanged; }
                set { SetHasChanged(value); }
              }
              public Builder SetHasChanged(bool value) {
                PrepareBuilder();
                result.hasHasChanged = true;
                result.hasChanged_ = value;
                return this;
              }
              public Builder ClearHasChanged() {
                PrepareBuilder();
                result.hasHasChanged = false;
                result.hasChanged_ = false;
                return this;
              }
            }
            static Status() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
        }
        #endregion
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private long id_;
        public bool HasId {
          get { return hasId; }
        }
        public long Id {
          get { return id_; }
        }
        
        public const int ResultFieldNumber = 2;
        private bool hasResult;
        private global::Plugin.Common.Types.Result result_;
        public bool HasResult {
          get { return hasResult; }
        }
        public global::Plugin.Common.Types.Result Result {
          get { return result_ ?? global::Plugin.Common.Types.Result.DefaultInstance; }
        }
        
        public const int RegistrationFieldNumber = 10;
        private bool hasRegistration;
        private global::Plugin.SettingsResponseMessage.Types.Response.Types.Registration registration_;
        public bool HasRegistration {
          get { return hasRegistration; }
        }
        public global::Plugin.SettingsResponseMessage.Types.Response.Types.Registration Registration {
          get { return registration_ ?? global::Plugin.SettingsResponseMessage.Types.Response.Types.Registration.DefaultInstance; }
        }
        
        public const int QueryFieldNumber = 11;
        private bool hasQuery;
        private global::Plugin.SettingsResponseMessage.Types.Response.Types.Query query_;
        public bool HasQuery {
          get { return hasQuery; }
        }
        public global::Plugin.SettingsResponseMessage.Types.Response.Types.Query Query {
          get { return query_ ?? global::Plugin.SettingsResponseMessage.Types.Response.Types.Query.DefaultInstance; }
        }
        
        public const int UpdateFieldNumber = 12;
        private bool hasUpdate;
        private global::Plugin.SettingsResponseMessage.Types.Response.Types.Update update_;
        public bool HasUpdate {
          get { return hasUpdate; }
        }
        public global::Plugin.SettingsResponseMessage.Types.Response.Types.Update Update {
          get { return update_ ?? global::Plugin.SettingsResponseMessage.Types.Response.Types.Update.DefaultInstance; }
        }
        
        public const int InventoryFieldNumber = 13;
        private pbc::PopsicleList<global::Plugin.SettingsResponseMessage.Types.Response.Types.Inventory> inventory_ = new pbc::PopsicleList<global::Plugin.SettingsResponseMessage.Types.Response.Types.Inventory>();
        public scg::IList<global::Plugin.SettingsResponseMessage.Types.Response.Types.Inventory> InventoryList {
          get { return inventory_; }
        }
        public int InventoryCount {
          get { return inventory_.Count; }
        }
        public global::Plugin.SettingsResponseMessage.Types.Response.Types.Inventory GetInventory(int index) {
          return inventory_[index];
        }
        
        public const int ControlFieldNumber = 14;
        private bool hasControl;
        private global::Plugin.SettingsResponseMessage.Types.Response.Types.Control control_;
        public bool HasControl {
          get { return hasControl; }
        }
        public global::Plugin.SettingsResponseMessage.Types.Response.Types.Control Control {
          get { return control_ ?? global::Plugin.SettingsResponseMessage.Types.Response.Types.Control.DefaultInstance; }
        }
        
        public const int StatusFieldNumber = 15;
        private bool hasStatus;
        private global::Plugin.SettingsResponseMessage.Types.Response.Types.Status status_;
        public bool HasStatus {
          get { return hasStatus; }
        }
        public global::Plugin.SettingsResponseMessage.Types.Response.Types.Status Status {
          get { return status_ ?? global::Plugin.SettingsResponseMessage.Types.Response.Types.Status.DefaultInstance; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasResult) return false;
            if (!Result.IsInitialized) return false;
            if (HasQuery) {
              if (!Query.IsInitialized) return false;
            }
            foreach (global::Plugin.SettingsResponseMessage.Types.Response.Types.Inventory element in InventoryList) {
              if (!element.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _responseFieldNames;
          if (hasId) {
            output.WriteInt64(1, field_names[1], Id);
          }
          if (hasResult) {
            output.WriteMessage(2, field_names[5], Result);
          }
          if (hasRegistration) {
            output.WriteMessage(10, field_names[4], Registration);
          }
          if (hasQuery) {
            output.WriteMessage(11, field_names[3], Query);
          }
          if (hasUpdate) {
            output.WriteMessage(12, field_names[7], Update);
          }
          if (inventory_.Count > 0) {
            output.WriteMessageArray(13, field_names[2], inventory_);
          }
          if (hasControl) {
            output.WriteMessage(14, field_names[0], Control);
          }
          if (hasStatus) {
            output.WriteMessage(15, field_names[6], Status);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasId) {
              size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
            }
            if (hasResult) {
              size += pb::CodedOutputStream.ComputeMessageSize(2, Result);
            }
            if (hasRegistration) {
              size += pb::CodedOutputStream.ComputeMessageSize(10, Registration);
            }
            if (hasQuery) {
              size += pb::CodedOutputStream.ComputeMessageSize(11, Query);
            }
            if (hasUpdate) {
              size += pb::CodedOutputStream.ComputeMessageSize(12, Update);
            }
            foreach (global::Plugin.SettingsResponseMessage.Types.Response.Types.Inventory element in InventoryList) {
              size += pb::CodedOutputStream.ComputeMessageSize(13, element);
            }
            if (hasControl) {
              size += pb::CodedOutputStream.ComputeMessageSize(14, Control);
            }
            if (hasStatus) {
              size += pb::CodedOutputStream.ComputeMessageSize(15, Status);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Response ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Response ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Response ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Response ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Response ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Response MakeReadOnly() {
          inventory_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Response prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Response, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Response cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Response result;
          
          private Response PrepareBuilder() {
            if (resultIsReadOnly) {
              Response original = result;
              result = new Response();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Response MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.SettingsResponseMessage.Types.Response.Descriptor; }
          }
          
          public override Response DefaultInstanceForType {
            get { return global::Plugin.SettingsResponseMessage.Types.Response.DefaultInstance; }
          }
          
          public override Response BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Response) {
              return MergeFrom((Response) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Response other) {
            if (other == global::Plugin.SettingsResponseMessage.Types.Response.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasResult) {
              MergeResult(other.Result);
            }
            if (other.HasRegistration) {
              MergeRegistration(other.Registration);
            }
            if (other.HasQuery) {
              MergeQuery(other.Query);
            }
            if (other.HasUpdate) {
              MergeUpdate(other.Update);
            }
            if (other.inventory_.Count != 0) {
              result.inventory_.Add(other.inventory_);
            }
            if (other.HasControl) {
              MergeControl(other.Control);
            }
            if (other.HasStatus) {
              MergeStatus(other.Status);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_responseFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _responseFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasId = input.ReadInt64(ref result.id_);
                  break;
                }
                case 18: {
                  global::Plugin.Common.Types.Result.Builder subBuilder = global::Plugin.Common.Types.Result.CreateBuilder();
                  if (result.hasResult) {
                    subBuilder.MergeFrom(Result);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Result = subBuilder.BuildPartial();
                  break;
                }
                case 82: {
                  global::Plugin.SettingsResponseMessage.Types.Response.Types.Registration.Builder subBuilder = global::Plugin.SettingsResponseMessage.Types.Response.Types.Registration.CreateBuilder();
                  if (result.hasRegistration) {
                    subBuilder.MergeFrom(Registration);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Registration = subBuilder.BuildPartial();
                  break;
                }
                case 90: {
                  global::Plugin.SettingsResponseMessage.Types.Response.Types.Query.Builder subBuilder = global::Plugin.SettingsResponseMessage.Types.Response.Types.Query.CreateBuilder();
                  if (result.hasQuery) {
                    subBuilder.MergeFrom(Query);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Query = subBuilder.BuildPartial();
                  break;
                }
                case 98: {
                  global::Plugin.SettingsResponseMessage.Types.Response.Types.Update.Builder subBuilder = global::Plugin.SettingsResponseMessage.Types.Response.Types.Update.CreateBuilder();
                  if (result.hasUpdate) {
                    subBuilder.MergeFrom(Update);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Update = subBuilder.BuildPartial();
                  break;
                }
                case 106: {
                  input.ReadMessageArray(tag, field_name, result.inventory_, global::Plugin.SettingsResponseMessage.Types.Response.Types.Inventory.DefaultInstance, extensionRegistry);
                  break;
                }
                case 114: {
                  global::Plugin.SettingsResponseMessage.Types.Response.Types.Control.Builder subBuilder = global::Plugin.SettingsResponseMessage.Types.Response.Types.Control.CreateBuilder();
                  if (result.hasControl) {
                    subBuilder.MergeFrom(Control);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Control = subBuilder.BuildPartial();
                  break;
                }
                case 122: {
                  global::Plugin.SettingsResponseMessage.Types.Response.Types.Status.Builder subBuilder = global::Plugin.SettingsResponseMessage.Types.Response.Types.Status.CreateBuilder();
                  if (result.hasStatus) {
                    subBuilder.MergeFrom(Status);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Status = subBuilder.BuildPartial();
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public long Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(long value) {
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = 0L;
            return this;
          }
          
          public bool HasResult {
           get { return result.hasResult; }
          }
          public global::Plugin.Common.Types.Result Result {
            get { return result.Result; }
            set { SetResult(value); }
          }
          public Builder SetResult(global::Plugin.Common.Types.Result value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasResult = true;
            result.result_ = value;
            return this;
          }
          public Builder SetResult(global::Plugin.Common.Types.Result.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasResult = true;
            result.result_ = builderForValue.Build();
            return this;
          }
          public Builder MergeResult(global::Plugin.Common.Types.Result value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasResult &&
                result.result_ != global::Plugin.Common.Types.Result.DefaultInstance) {
                result.result_ = global::Plugin.Common.Types.Result.CreateBuilder(result.result_).MergeFrom(value).BuildPartial();
            } else {
              result.result_ = value;
            }
            result.hasResult = true;
            return this;
          }
          public Builder ClearResult() {
            PrepareBuilder();
            result.hasResult = false;
            result.result_ = null;
            return this;
          }
          
          public bool HasRegistration {
           get { return result.hasRegistration; }
          }
          public global::Plugin.SettingsResponseMessage.Types.Response.Types.Registration Registration {
            get { return result.Registration; }
            set { SetRegistration(value); }
          }
          public Builder SetRegistration(global::Plugin.SettingsResponseMessage.Types.Response.Types.Registration value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasRegistration = true;
            result.registration_ = value;
            return this;
          }
          public Builder SetRegistration(global::Plugin.SettingsResponseMessage.Types.Response.Types.Registration.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasRegistration = true;
            result.registration_ = builderForValue.Build();
            return this;
          }
          public Builder MergeRegistration(global::Plugin.SettingsResponseMessage.Types.Response.Types.Registration value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasRegistration &&
                result.registration_ != global::Plugin.SettingsResponseMessage.Types.Response.Types.Registration.DefaultInstance) {
                result.registration_ = global::Plugin.SettingsResponseMessage.Types.Response.Types.Registration.CreateBuilder(result.registration_).MergeFrom(value).BuildPartial();
            } else {
              result.registration_ = value;
            }
            result.hasRegistration = true;
            return this;
          }
          public Builder ClearRegistration() {
            PrepareBuilder();
            result.hasRegistration = false;
            result.registration_ = null;
            return this;
          }
          
          public bool HasQuery {
           get { return result.hasQuery; }
          }
          public global::Plugin.SettingsResponseMessage.Types.Response.Types.Query Query {
            get { return result.Query; }
            set { SetQuery(value); }
          }
          public Builder SetQuery(global::Plugin.SettingsResponseMessage.Types.Response.Types.Query value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasQuery = true;
            result.query_ = value;
            return this;
          }
          public Builder SetQuery(global::Plugin.SettingsResponseMessage.Types.Response.Types.Query.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasQuery = true;
            result.query_ = builderForValue.Build();
            return this;
          }
          public Builder MergeQuery(global::Plugin.SettingsResponseMessage.Types.Response.Types.Query value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasQuery &&
                result.query_ != global::Plugin.SettingsResponseMessage.Types.Response.Types.Query.DefaultInstance) {
                result.query_ = global::Plugin.SettingsResponseMessage.Types.Response.Types.Query.CreateBuilder(result.query_).MergeFrom(value).BuildPartial();
            } else {
              result.query_ = value;
            }
            result.hasQuery = true;
            return this;
          }
          public Builder ClearQuery() {
            PrepareBuilder();
            result.hasQuery = false;
            result.query_ = null;
            return this;
          }
          
          public bool HasUpdate {
           get { return result.hasUpdate; }
          }
          public global::Plugin.SettingsResponseMessage.Types.Response.Types.Update Update {
            get { return result.Update; }
            set { SetUpdate(value); }
          }
          public Builder SetUpdate(global::Plugin.SettingsResponseMessage.Types.Response.Types.Update value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasUpdate = true;
            result.update_ = value;
            return this;
          }
          public Builder SetUpdate(global::Plugin.SettingsResponseMessage.Types.Response.Types.Update.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasUpdate = true;
            result.update_ = builderForValue.Build();
            return this;
          }
          public Builder MergeUpdate(global::Plugin.SettingsResponseMessage.Types.Response.Types.Update value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasUpdate &&
                result.update_ != global::Plugin.SettingsResponseMessage.Types.Response.Types.Update.DefaultInstance) {
                result.update_ = global::Plugin.SettingsResponseMessage.Types.Response.Types.Update.CreateBuilder(result.update_).MergeFrom(value).BuildPartial();
            } else {
              result.update_ = value;
            }
            result.hasUpdate = true;
            return this;
          }
          public Builder ClearUpdate() {
            PrepareBuilder();
            result.hasUpdate = false;
            result.update_ = null;
            return this;
          }
          
          public pbc::IPopsicleList<global::Plugin.SettingsResponseMessage.Types.Response.Types.Inventory> InventoryList {
            get { return PrepareBuilder().inventory_; }
          }
          public int InventoryCount {
            get { return result.InventoryCount; }
          }
          public global::Plugin.SettingsResponseMessage.Types.Response.Types.Inventory GetInventory(int index) {
            return result.GetInventory(index);
          }
          public Builder SetInventory(int index, global::Plugin.SettingsResponseMessage.Types.Response.Types.Inventory value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.inventory_[index] = value;
            return this;
          }
          public Builder SetInventory(int index, global::Plugin.SettingsResponseMessage.Types.Response.Types.Inventory.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.inventory_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddInventory(global::Plugin.SettingsResponseMessage.Types.Response.Types.Inventory value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.inventory_.Add(value);
            return this;
          }
          public Builder AddInventory(global::Plugin.SettingsResponseMessage.Types.Response.Types.Inventory.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.inventory_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeInventory(scg::IEnumerable<global::Plugin.SettingsResponseMessage.Types.Response.Types.Inventory> values) {
            PrepareBuilder();
            result.inventory_.Add(values);
            return this;
          }
          public Builder ClearInventory() {
            PrepareBuilder();
            result.inventory_.Clear();
            return this;
          }
          
          public bool HasControl {
           get { return result.hasControl; }
          }
          public global::Plugin.SettingsResponseMessage.Types.Response.Types.Control Control {
            get { return result.Control; }
            set { SetControl(value); }
          }
          public Builder SetControl(global::Plugin.SettingsResponseMessage.Types.Response.Types.Control value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasControl = true;
            result.control_ = value;
            return this;
          }
          public Builder SetControl(global::Plugin.SettingsResponseMessage.Types.Response.Types.Control.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasControl = true;
            result.control_ = builderForValue.Build();
            return this;
          }
          public Builder MergeControl(global::Plugin.SettingsResponseMessage.Types.Response.Types.Control value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasControl &&
                result.control_ != global::Plugin.SettingsResponseMessage.Types.Response.Types.Control.DefaultInstance) {
                result.control_ = global::Plugin.SettingsResponseMessage.Types.Response.Types.Control.CreateBuilder(result.control_).MergeFrom(value).BuildPartial();
            } else {
              result.control_ = value;
            }
            result.hasControl = true;
            return this;
          }
          public Builder ClearControl() {
            PrepareBuilder();
            result.hasControl = false;
            result.control_ = null;
            return this;
          }
          
          public bool HasStatus {
           get { return result.hasStatus; }
          }
          public global::Plugin.SettingsResponseMessage.Types.Response.Types.Status Status {
            get { return result.Status; }
            set { SetStatus(value); }
          }
          public Builder SetStatus(global::Plugin.SettingsResponseMessage.Types.Response.Types.Status value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasStatus = true;
            result.status_ = value;
            return this;
          }
          public Builder SetStatus(global::Plugin.SettingsResponseMessage.Types.Response.Types.Status.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasStatus = true;
            result.status_ = builderForValue.Build();
            return this;
          }
          public Builder MergeStatus(global::Plugin.SettingsResponseMessage.Types.Response.Types.Status value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasStatus &&
                result.status_ != global::Plugin.SettingsResponseMessage.Types.Response.Types.Status.DefaultInstance) {
                result.status_ = global::Plugin.SettingsResponseMessage.Types.Response.Types.Status.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
            } else {
              result.status_ = value;
            }
            result.hasStatus = true;
            return this;
          }
          public Builder ClearStatus() {
            PrepareBuilder();
            result.hasStatus = false;
            result.status_ = null;
            return this;
          }
        }
        static Response() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::Plugin.Common.Types.Header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::Plugin.Common.Types.Header Header {
      get { return header_ ?? global::Plugin.Common.Types.Header.DefaultInstance; }
    }
    
    public const int PayloadFieldNumber = 2;
    private pbc::PopsicleList<global::Plugin.SettingsResponseMessage.Types.Response> payload_ = new pbc::PopsicleList<global::Plugin.SettingsResponseMessage.Types.Response>();
    public scg::IList<global::Plugin.SettingsResponseMessage.Types.Response> PayloadList {
      get { return payload_; }
    }
    public int PayloadCount {
      get { return payload_.Count; }
    }
    public global::Plugin.SettingsResponseMessage.Types.Response GetPayload(int index) {
      return payload_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (HasHeader) {
          if (!Header.IsInitialized) return false;
        }
        foreach (global::Plugin.SettingsResponseMessage.Types.Response element in PayloadList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _settingsResponseMessageFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[0], Header);
      }
      if (payload_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], payload_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
        }
        foreach (global::Plugin.SettingsResponseMessage.Types.Response element in PayloadList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SettingsResponseMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SettingsResponseMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SettingsResponseMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SettingsResponseMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SettingsResponseMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SettingsResponseMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SettingsResponseMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SettingsResponseMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SettingsResponseMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SettingsResponseMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SettingsResponseMessage MakeReadOnly() {
      payload_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SettingsResponseMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SettingsResponseMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SettingsResponseMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SettingsResponseMessage result;
      
      private SettingsResponseMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          SettingsResponseMessage original = result;
          result = new SettingsResponseMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SettingsResponseMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.SettingsResponseMessage.Descriptor; }
      }
      
      public override SettingsResponseMessage DefaultInstanceForType {
        get { return global::Plugin.SettingsResponseMessage.DefaultInstance; }
      }
      
      public override SettingsResponseMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SettingsResponseMessage) {
          return MergeFrom((SettingsResponseMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SettingsResponseMessage other) {
        if (other == global::Plugin.SettingsResponseMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.payload_.Count != 0) {
          result.payload_.Add(other.payload_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_settingsResponseMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _settingsResponseMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Plugin.Common.Types.Header.Builder subBuilder = global::Plugin.Common.Types.Header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.payload_, global::Plugin.SettingsResponseMessage.Types.Response.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::Plugin.Common.Types.Header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::Plugin.Common.Types.Header.DefaultInstance) {
            result.header_ = global::Plugin.Common.Types.Header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.SettingsResponseMessage.Types.Response> PayloadList {
        get { return PrepareBuilder().payload_; }
      }
      public int PayloadCount {
        get { return result.PayloadCount; }
      }
      public global::Plugin.SettingsResponseMessage.Types.Response GetPayload(int index) {
        return result.GetPayload(index);
      }
      public Builder SetPayload(int index, global::Plugin.SettingsResponseMessage.Types.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_[index] = value;
        return this;
      }
      public Builder SetPayload(int index, global::Plugin.SettingsResponseMessage.Types.Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPayload(global::Plugin.SettingsResponseMessage.Types.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_.Add(value);
        return this;
      }
      public Builder AddPayload(global::Plugin.SettingsResponseMessage.Types.Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePayload(scg::IEnumerable<global::Plugin.SettingsResponseMessage.Types.Response> values) {
        PrepareBuilder();
        result.payload_.Add(values);
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.payload_.Clear();
        return this;
      }
    }
    static SettingsResponseMessage() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LogEntry : pb::GeneratedMessage<LogEntry, LogEntry.Builder> {
    private LogEntry() { }
    private static readonly LogEntry defaultInstance = new LogEntry().MakeReadOnly();
    private static readonly string[] _logEntryFieldNames = new string[] { "entry" };
    private static readonly uint[] _logEntryFieldTags = new uint[] { 10 };
    public static LogEntry DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LogEntry DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LogEntry ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_LogEntry__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LogEntry, LogEntry.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_LogEntry__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Entry : pb::GeneratedMessage<Entry, Entry.Builder> {
        private Entry() { }
        private static readonly Entry defaultInstance = new Entry().MakeReadOnly();
        private static readonly string[] _entryFieldNames = new string[] { "date", "file", "level", "line", "message", "sender" };
        private static readonly uint[] _entryFieldTags = new uint[] { 48, 26, 8, 32, 42, 18 };
        public static Entry DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Entry DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Entry ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_LogEntry_Entry__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Entry, Entry.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_LogEntry_Entry__FieldAccessorTable; }
        }
        
        #region Nested types
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static partial class Types {
          public enum Level {
            LOG_DEBUG = 500,
            LOG_INFO = 150,
            LOG_WARNING = 50,
            LOG_ERROR = 10,
            LOG_CRITICAL = 1,
          }
          
        }
        #endregion
        
        public const int LevelFieldNumber = 1;
        private bool hasLevel;
        private global::Plugin.LogEntry.Types.Entry.Types.Level level_ = global::Plugin.LogEntry.Types.Entry.Types.Level.LOG_DEBUG;
        public bool HasLevel {
          get { return hasLevel; }
        }
        public global::Plugin.LogEntry.Types.Entry.Types.Level Level {
          get { return level_; }
        }
        
        public const int SenderFieldNumber = 2;
        private bool hasSender;
        private string sender_ = "";
        public bool HasSender {
          get { return hasSender; }
        }
        public string Sender {
          get { return sender_; }
        }
        
        public const int FileFieldNumber = 3;
        private bool hasFile;
        private string file_ = "";
        public bool HasFile {
          get { return hasFile; }
        }
        public string File {
          get { return file_; }
        }
        
        public const int LineFieldNumber = 4;
        private bool hasLine;
        private int line_;
        public bool HasLine {
          get { return hasLine; }
        }
        public int Line {
          get { return line_; }
        }
        
        public const int MessageFieldNumber = 5;
        private bool hasMessage;
        private string message_ = "";
        public bool HasMessage {
          get { return hasMessage; }
        }
        public string Message {
          get { return message_; }
        }
        
        public const int DateFieldNumber = 6;
        private bool hasDate;
        private int date_;
        public bool HasDate {
          get { return hasDate; }
        }
        public int Date {
          get { return date_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasLevel) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _entryFieldNames;
          if (hasLevel) {
            output.WriteEnum(1, field_names[2], (int) Level, Level);
          }
          if (hasSender) {
            output.WriteString(2, field_names[5], Sender);
          }
          if (hasFile) {
            output.WriteString(3, field_names[1], File);
          }
          if (hasLine) {
            output.WriteInt32(4, field_names[3], Line);
          }
          if (hasMessage) {
            output.WriteString(5, field_names[4], Message);
          }
          if (hasDate) {
            output.WriteInt32(6, field_names[0], Date);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasLevel) {
              size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Level);
            }
            if (hasSender) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Sender);
            }
            if (hasFile) {
              size += pb::CodedOutputStream.ComputeStringSize(3, File);
            }
            if (hasLine) {
              size += pb::CodedOutputStream.ComputeInt32Size(4, Line);
            }
            if (hasMessage) {
              size += pb::CodedOutputStream.ComputeStringSize(5, Message);
            }
            if (hasDate) {
              size += pb::CodedOutputStream.ComputeInt32Size(6, Date);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Entry ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Entry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Entry ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Entry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Entry ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Entry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Entry ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Entry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Entry ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Entry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Entry MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Entry prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Entry, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Entry cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Entry result;
          
          private Entry PrepareBuilder() {
            if (resultIsReadOnly) {
              Entry original = result;
              result = new Entry();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Entry MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.LogEntry.Types.Entry.Descriptor; }
          }
          
          public override Entry DefaultInstanceForType {
            get { return global::Plugin.LogEntry.Types.Entry.DefaultInstance; }
          }
          
          public override Entry BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Entry) {
              return MergeFrom((Entry) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Entry other) {
            if (other == global::Plugin.LogEntry.Types.Entry.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasLevel) {
              Level = other.Level;
            }
            if (other.HasSender) {
              Sender = other.Sender;
            }
            if (other.HasFile) {
              File = other.File;
            }
            if (other.HasLine) {
              Line = other.Line;
            }
            if (other.HasMessage) {
              Message = other.Message;
            }
            if (other.HasDate) {
              Date = other.Date;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_entryFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _entryFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  object unknown;
                  if(input.ReadEnum(ref result.level_, out unknown)) {
                    result.hasLevel = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(1, (ulong)(int)unknown);
                  }
                  break;
                }
                case 18: {
                  result.hasSender = input.ReadString(ref result.sender_);
                  break;
                }
                case 26: {
                  result.hasFile = input.ReadString(ref result.file_);
                  break;
                }
                case 32: {
                  result.hasLine = input.ReadInt32(ref result.line_);
                  break;
                }
                case 42: {
                  result.hasMessage = input.ReadString(ref result.message_);
                  break;
                }
                case 48: {
                  result.hasDate = input.ReadInt32(ref result.date_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasLevel {
           get { return result.hasLevel; }
          }
          public global::Plugin.LogEntry.Types.Entry.Types.Level Level {
            get { return result.Level; }
            set { SetLevel(value); }
          }
          public Builder SetLevel(global::Plugin.LogEntry.Types.Entry.Types.Level value) {
            PrepareBuilder();
            result.hasLevel = true;
            result.level_ = value;
            return this;
          }
          public Builder ClearLevel() {
            PrepareBuilder();
            result.hasLevel = false;
            result.level_ = global::Plugin.LogEntry.Types.Entry.Types.Level.LOG_DEBUG;
            return this;
          }
          
          public bool HasSender {
            get { return result.hasSender; }
          }
          public string Sender {
            get { return result.Sender; }
            set { SetSender(value); }
          }
          public Builder SetSender(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasSender = true;
            result.sender_ = value;
            return this;
          }
          public Builder ClearSender() {
            PrepareBuilder();
            result.hasSender = false;
            result.sender_ = "";
            return this;
          }
          
          public bool HasFile {
            get { return result.hasFile; }
          }
          public string File {
            get { return result.File; }
            set { SetFile(value); }
          }
          public Builder SetFile(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasFile = true;
            result.file_ = value;
            return this;
          }
          public Builder ClearFile() {
            PrepareBuilder();
            result.hasFile = false;
            result.file_ = "";
            return this;
          }
          
          public bool HasLine {
            get { return result.hasLine; }
          }
          public int Line {
            get { return result.Line; }
            set { SetLine(value); }
          }
          public Builder SetLine(int value) {
            PrepareBuilder();
            result.hasLine = true;
            result.line_ = value;
            return this;
          }
          public Builder ClearLine() {
            PrepareBuilder();
            result.hasLine = false;
            result.line_ = 0;
            return this;
          }
          
          public bool HasMessage {
            get { return result.hasMessage; }
          }
          public string Message {
            get { return result.Message; }
            set { SetMessage(value); }
          }
          public Builder SetMessage(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasMessage = true;
            result.message_ = value;
            return this;
          }
          public Builder ClearMessage() {
            PrepareBuilder();
            result.hasMessage = false;
            result.message_ = "";
            return this;
          }
          
          public bool HasDate {
            get { return result.hasDate; }
          }
          public int Date {
            get { return result.Date; }
            set { SetDate(value); }
          }
          public Builder SetDate(int value) {
            PrepareBuilder();
            result.hasDate = true;
            result.date_ = value;
            return this;
          }
          public Builder ClearDate() {
            PrepareBuilder();
            result.hasDate = false;
            result.date_ = 0;
            return this;
          }
        }
        static Entry() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int EntryFieldNumber = 1;
    private pbc::PopsicleList<global::Plugin.LogEntry.Types.Entry> entry_ = new pbc::PopsicleList<global::Plugin.LogEntry.Types.Entry>();
    public scg::IList<global::Plugin.LogEntry.Types.Entry> EntryList {
      get { return entry_; }
    }
    public int EntryCount {
      get { return entry_.Count; }
    }
    public global::Plugin.LogEntry.Types.Entry GetEntry(int index) {
      return entry_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Plugin.LogEntry.Types.Entry element in EntryList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _logEntryFieldNames;
      if (entry_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], entry_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Plugin.LogEntry.Types.Entry element in EntryList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LogEntry ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LogEntry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LogEntry ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LogEntry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LogEntry ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LogEntry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LogEntry ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LogEntry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LogEntry ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LogEntry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LogEntry MakeReadOnly() {
      entry_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LogEntry prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LogEntry, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LogEntry cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LogEntry result;
      
      private LogEntry PrepareBuilder() {
        if (resultIsReadOnly) {
          LogEntry original = result;
          result = new LogEntry();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LogEntry MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.LogEntry.Descriptor; }
      }
      
      public override LogEntry DefaultInstanceForType {
        get { return global::Plugin.LogEntry.DefaultInstance; }
      }
      
      public override LogEntry BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LogEntry) {
          return MergeFrom((LogEntry) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LogEntry other) {
        if (other == global::Plugin.LogEntry.DefaultInstance) return this;
        PrepareBuilder();
        if (other.entry_.Count != 0) {
          result.entry_.Add(other.entry_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_logEntryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _logEntryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.entry_, global::Plugin.LogEntry.Types.Entry.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Plugin.LogEntry.Types.Entry> EntryList {
        get { return PrepareBuilder().entry_; }
      }
      public int EntryCount {
        get { return result.EntryCount; }
      }
      public global::Plugin.LogEntry.Types.Entry GetEntry(int index) {
        return result.GetEntry(index);
      }
      public Builder SetEntry(int index, global::Plugin.LogEntry.Types.Entry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entry_[index] = value;
        return this;
      }
      public Builder SetEntry(int index, global::Plugin.LogEntry.Types.Entry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entry_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEntry(global::Plugin.LogEntry.Types.Entry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entry_.Add(value);
        return this;
      }
      public Builder AddEntry(global::Plugin.LogEntry.Types.Entry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entry_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEntry(scg::IEnumerable<global::Plugin.LogEntry.Types.Entry> values) {
        PrepareBuilder();
        result.entry_.Add(values);
        return this;
      }
      public Builder ClearEntry() {
        PrepareBuilder();
        result.entry_.Clear();
        return this;
      }
    }
    static LogEntry() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MetricsMessage : pb::GeneratedMessage<MetricsMessage, MetricsMessage.Builder> {
    private MetricsMessage() { }
    private static readonly MetricsMessage defaultInstance = new MetricsMessage().MakeReadOnly();
    private static readonly string[] _metricsMessageFieldNames = new string[] { "attachments", "header", "payload" };
    private static readonly uint[] _metricsMessageFieldTags = new uint[] { 26, 10, 18 };
    public static MetricsMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MetricsMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MetricsMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_MetricsMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MetricsMessage, MetricsMessage.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_MetricsMessage__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Metric : pb::GeneratedMessage<Metric, Metric.Builder> {
        private Metric() { }
        private static readonly Metric defaultInstance = new Metric().MakeReadOnly();
        private static readonly string[] _metricFieldNames = new string[] { "key", "value" };
        private static readonly uint[] _metricFieldTags = new uint[] { 10, 18 };
        public static Metric DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Metric DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Metric ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_MetricsMessage_Metric__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Metric, Metric.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_MetricsMessage_Metric__FieldAccessorTable; }
        }
        
        public const int KeyFieldNumber = 1;
        private bool hasKey;
        private string key_ = "";
        public bool HasKey {
          get { return hasKey; }
        }
        public string Key {
          get { return key_; }
        }
        
        public const int ValueFieldNumber = 2;
        private bool hasValue;
        private global::Plugin.Common.Types.AnyDataType value_;
        public bool HasValue {
          get { return hasValue; }
        }
        public global::Plugin.Common.Types.AnyDataType Value {
          get { return value_ ?? global::Plugin.Common.Types.AnyDataType.DefaultInstance; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasKey) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _metricFieldNames;
          if (hasKey) {
            output.WriteString(1, field_names[0], Key);
          }
          if (hasValue) {
            output.WriteMessage(2, field_names[1], Value);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasKey) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Key);
            }
            if (hasValue) {
              size += pb::CodedOutputStream.ComputeMessageSize(2, Value);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Metric ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Metric ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Metric ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Metric ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Metric ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Metric ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Metric ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Metric ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Metric ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Metric ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Metric MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Metric prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Metric, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Metric cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Metric result;
          
          private Metric PrepareBuilder() {
            if (resultIsReadOnly) {
              Metric original = result;
              result = new Metric();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Metric MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.MetricsMessage.Types.Metric.Descriptor; }
          }
          
          public override Metric DefaultInstanceForType {
            get { return global::Plugin.MetricsMessage.Types.Metric.DefaultInstance; }
          }
          
          public override Metric BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Metric) {
              return MergeFrom((Metric) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Metric other) {
            if (other == global::Plugin.MetricsMessage.Types.Metric.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasKey) {
              Key = other.Key;
            }
            if (other.HasValue) {
              MergeValue(other.Value);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_metricFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _metricFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasKey = input.ReadString(ref result.key_);
                  break;
                }
                case 18: {
                  global::Plugin.Common.Types.AnyDataType.Builder subBuilder = global::Plugin.Common.Types.AnyDataType.CreateBuilder();
                  if (result.hasValue) {
                    subBuilder.MergeFrom(Value);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Value = subBuilder.BuildPartial();
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasKey {
            get { return result.hasKey; }
          }
          public string Key {
            get { return result.Key; }
            set { SetKey(value); }
          }
          public Builder SetKey(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasKey = true;
            result.key_ = value;
            return this;
          }
          public Builder ClearKey() {
            PrepareBuilder();
            result.hasKey = false;
            result.key_ = "";
            return this;
          }
          
          public bool HasValue {
           get { return result.hasValue; }
          }
          public global::Plugin.Common.Types.AnyDataType Value {
            get { return result.Value; }
            set { SetValue(value); }
          }
          public Builder SetValue(global::Plugin.Common.Types.AnyDataType value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasValue = true;
            result.value_ = value;
            return this;
          }
          public Builder SetValue(global::Plugin.Common.Types.AnyDataType.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasValue = true;
            result.value_ = builderForValue.Build();
            return this;
          }
          public Builder MergeValue(global::Plugin.Common.Types.AnyDataType value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasValue &&
                result.value_ != global::Plugin.Common.Types.AnyDataType.DefaultInstance) {
                result.value_ = global::Plugin.Common.Types.AnyDataType.CreateBuilder(result.value_).MergeFrom(value).BuildPartial();
            } else {
              result.value_ = value;
            }
            result.hasValue = true;
            return this;
          }
          public Builder ClearValue() {
            PrepareBuilder();
            result.hasValue = false;
            result.value_ = null;
            return this;
          }
        }
        static Metric() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Metrics : pb::GeneratedMessage<Metrics, Metrics.Builder> {
        private Metrics() { }
        private static readonly Metrics defaultInstance = new Metrics().MakeReadOnly();
        private static readonly string[] _metricsFieldNames = new string[] { "id", "metrics", "target" };
        private static readonly uint[] _metricsFieldTags = new uint[] { 8, 18, 58 };
        public static Metrics DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Metrics DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Metrics ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_MetricsMessage_Metrics__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Metrics, Metrics.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_MetricsMessage_Metrics__FieldAccessorTable; }
        }
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private int id_;
        public bool HasId {
          get { return hasId; }
        }
        public int Id {
          get { return id_; }
        }
        
        public const int TargetFieldNumber = 7;
        private bool hasTarget;
        private string target_ = "";
        public bool HasTarget {
          get { return hasTarget; }
        }
        public string Target {
          get { return target_; }
        }
        
        public const int Metrics_FieldNumber = 2;
        private pbc::PopsicleList<global::Plugin.MetricsMessage.Types.Metrics> metrics_ = new pbc::PopsicleList<global::Plugin.MetricsMessage.Types.Metrics>();
        public scg::IList<global::Plugin.MetricsMessage.Types.Metrics> Metrics_List {
          get { return metrics_; }
        }
        public int Metrics_Count {
          get { return metrics_.Count; }
        }
        public global::Plugin.MetricsMessage.Types.Metrics GetMetrics_(int index) {
          return metrics_[index];
        }
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _metricsFieldNames;
          if (hasId) {
            output.WriteInt32(1, field_names[0], Id);
          }
          if (metrics_.Count > 0) {
            output.WriteMessageArray(2, field_names[1], metrics_);
          }
          if (hasTarget) {
            output.WriteString(7, field_names[2], Target);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasId) {
              size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
            }
            if (hasTarget) {
              size += pb::CodedOutputStream.ComputeStringSize(7, Target);
            }
            foreach (global::Plugin.MetricsMessage.Types.Metrics element in Metrics_List) {
              size += pb::CodedOutputStream.ComputeMessageSize(2, element);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Metrics ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Metrics ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Metrics ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Metrics ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Metrics ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Metrics ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Metrics ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Metrics ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Metrics ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Metrics ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Metrics MakeReadOnly() {
          metrics_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Metrics prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Metrics, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Metrics cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Metrics result;
          
          private Metrics PrepareBuilder() {
            if (resultIsReadOnly) {
              Metrics original = result;
              result = new Metrics();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Metrics MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.MetricsMessage.Types.Metrics.Descriptor; }
          }
          
          public override Metrics DefaultInstanceForType {
            get { return global::Plugin.MetricsMessage.Types.Metrics.DefaultInstance; }
          }
          
          public override Metrics BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Metrics) {
              return MergeFrom((Metrics) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Metrics other) {
            if (other == global::Plugin.MetricsMessage.Types.Metrics.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasTarget) {
              Target = other.Target;
            }
            if (other.metrics_.Count != 0) {
              result.metrics_.Add(other.metrics_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_metricsFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _metricsFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasId = input.ReadInt32(ref result.id_);
                  break;
                }
                case 18: {
                  input.ReadMessageArray(tag, field_name, result.metrics_, global::Plugin.MetricsMessage.Types.Metrics.DefaultInstance, extensionRegistry);
                  break;
                }
                case 58: {
                  result.hasTarget = input.ReadString(ref result.target_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public int Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(int value) {
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = 0;
            return this;
          }
          
          public bool HasTarget {
            get { return result.hasTarget; }
          }
          public string Target {
            get { return result.Target; }
            set { SetTarget(value); }
          }
          public Builder SetTarget(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasTarget = true;
            result.target_ = value;
            return this;
          }
          public Builder ClearTarget() {
            PrepareBuilder();
            result.hasTarget = false;
            result.target_ = "";
            return this;
          }
          
          public pbc::IPopsicleList<global::Plugin.MetricsMessage.Types.Metrics> Metrics_List {
            get { return PrepareBuilder().metrics_; }
          }
          public int Metrics_Count {
            get { return result.Metrics_Count; }
          }
          public global::Plugin.MetricsMessage.Types.Metrics GetMetrics_(int index) {
            return result.GetMetrics_(index);
          }
          public Builder SetMetrics_(int index, global::Plugin.MetricsMessage.Types.Metrics value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.metrics_[index] = value;
            return this;
          }
          public Builder SetMetrics_(int index, global::Plugin.MetricsMessage.Types.Metrics.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.metrics_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddMetrics_(global::Plugin.MetricsMessage.Types.Metrics value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.metrics_.Add(value);
            return this;
          }
          public Builder AddMetrics_(global::Plugin.MetricsMessage.Types.Metrics.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.metrics_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeMetrics_(scg::IEnumerable<global::Plugin.MetricsMessage.Types.Metrics> values) {
            PrepareBuilder();
            result.metrics_.Add(values);
            return this;
          }
          public Builder ClearMetrics_() {
            PrepareBuilder();
            result.metrics_.Clear();
            return this;
          }
        }
        static Metrics() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::Plugin.Common.Types.Header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::Plugin.Common.Types.Header Header {
      get { return header_ ?? global::Plugin.Common.Types.Header.DefaultInstance; }
    }
    
    public const int PayloadFieldNumber = 2;
    private pbc::PopsicleList<global::Plugin.MetricsMessage.Types.Metrics> payload_ = new pbc::PopsicleList<global::Plugin.MetricsMessage.Types.Metrics>();
    public scg::IList<global::Plugin.MetricsMessage.Types.Metrics> PayloadList {
      get { return payload_; }
    }
    public int PayloadCount {
      get { return payload_.Count; }
    }
    public global::Plugin.MetricsMessage.Types.Metrics GetPayload(int index) {
      return payload_[index];
    }
    
    public const int AttachmentsFieldNumber = 3;
    private pbc::PopsicleList<global::Plugin.Common.Types.Attachment> attachments_ = new pbc::PopsicleList<global::Plugin.Common.Types.Attachment>();
    public scg::IList<global::Plugin.Common.Types.Attachment> AttachmentsList {
      get { return attachments_; }
    }
    public int AttachmentsCount {
      get { return attachments_.Count; }
    }
    public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
      return attachments_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (HasHeader) {
          if (!Header.IsInitialized) return false;
        }
        foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _metricsMessageFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[1], Header);
      }
      if (payload_.Count > 0) {
        output.WriteMessageArray(2, field_names[2], payload_);
      }
      if (attachments_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], attachments_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
        }
        foreach (global::Plugin.MetricsMessage.Types.Metrics element in PayloadList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MetricsMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MetricsMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MetricsMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MetricsMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MetricsMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MetricsMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MetricsMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MetricsMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MetricsMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MetricsMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MetricsMessage MakeReadOnly() {
      payload_.MakeReadOnly();
      attachments_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MetricsMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MetricsMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MetricsMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MetricsMessage result;
      
      private MetricsMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          MetricsMessage original = result;
          result = new MetricsMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MetricsMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.MetricsMessage.Descriptor; }
      }
      
      public override MetricsMessage DefaultInstanceForType {
        get { return global::Plugin.MetricsMessage.DefaultInstance; }
      }
      
      public override MetricsMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MetricsMessage) {
          return MergeFrom((MetricsMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MetricsMessage other) {
        if (other == global::Plugin.MetricsMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.payload_.Count != 0) {
          result.payload_.Add(other.payload_);
        }
        if (other.attachments_.Count != 0) {
          result.attachments_.Add(other.attachments_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_metricsMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _metricsMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Plugin.Common.Types.Header.Builder subBuilder = global::Plugin.Common.Types.Header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.payload_, global::Plugin.MetricsMessage.Types.Metrics.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.attachments_, global::Plugin.Common.Types.Attachment.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::Plugin.Common.Types.Header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::Plugin.Common.Types.Header.DefaultInstance) {
            result.header_ = global::Plugin.Common.Types.Header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.MetricsMessage.Types.Metrics> PayloadList {
        get { return PrepareBuilder().payload_; }
      }
      public int PayloadCount {
        get { return result.PayloadCount; }
      }
      public global::Plugin.MetricsMessage.Types.Metrics GetPayload(int index) {
        return result.GetPayload(index);
      }
      public Builder SetPayload(int index, global::Plugin.MetricsMessage.Types.Metrics value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_[index] = value;
        return this;
      }
      public Builder SetPayload(int index, global::Plugin.MetricsMessage.Types.Metrics.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPayload(global::Plugin.MetricsMessage.Types.Metrics value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_.Add(value);
        return this;
      }
      public Builder AddPayload(global::Plugin.MetricsMessage.Types.Metrics.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePayload(scg::IEnumerable<global::Plugin.MetricsMessage.Types.Metrics> values) {
        PrepareBuilder();
        result.payload_.Add(values);
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.payload_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.Common.Types.Attachment> AttachmentsList {
        get { return PrepareBuilder().attachments_; }
      }
      public int AttachmentsCount {
        get { return result.AttachmentsCount; }
      }
      public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
        return result.GetAttachments(index);
      }
      public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachments_[index] = value;
        return this;
      }
      public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachments_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttachments(global::Plugin.Common.Types.Attachment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachments_.Add(value);
        return this;
      }
      public Builder AddAttachments(global::Plugin.Common.Types.Attachment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachments_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttachments(scg::IEnumerable<global::Plugin.Common.Types.Attachment> values) {
        PrepareBuilder();
        result.attachments_.Add(values);
        return this;
      }
      public Builder ClearAttachments() {
        PrepareBuilder();
        result.attachments_.Clear();
        return this;
      }
    }
    static MetricsMessage() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
