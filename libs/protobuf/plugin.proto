package Plugin;

// option optimize_for = LITE_RUNTIME;

//
// Common utility types (re-used in various messages below)
//
message Common {

	//
	// A "nagios" status result.
	//
	enum ResultCode {
		OK		= 0;
		WARNING	= 1;
		CRITICAL	= 2;
		UNKNOWN	= 3;
	};

	//
	// Type of data fields.
	// @deprecated in favour of checking which field is available.
	//
	enum DataType {
		INT = 1;
		STRING = 2;
		FLOAT = 3;
		BOOL = 4;
		LIST = 5;
	};

	//
	// Data type used to wrap "any" primitive type.
	// Used whenever the type can change.
	//
	message AnyDataType {

		// String payload
		optional string string_data = 2;

		// Numeric integer payload
		optional int64 int_data = 3;

		// Numeric floating point payload
		optional double float_data = 4;

		// Boolean (true/false) payload
		optional bool bool_data = 5;

		// A string (multiple lines are separated by list entries
		// @todo: remove repeated modifier from this field.
		repeated string list_data = 6;
	}

	//
	// Key value pair
	//
	message KeyValue {

		// The key identifying the value
		required string key = 1;

		// The value
		required string value = 2;
	}
	

	//
	// Field identifying a host entry
	//
	message Host {

		// A unique identifier representing the host in *this* message
		optional string id = 1;

		// The host name
		optional string host = 2;

		// The address (usually the ip)
		optional string address = 3;

		// The protocol used to talk whit this host.
		optional string protocol = 4;

		// A comment describing the host
		optional string comment = 5;

		// A key value store with attributes describing this host.
		// The content and use of this attributes are application defined.
		repeated Common.KeyValue metadata = 6;

		// A numer of tags defined for this host (can be used for routing purposes).
		repeated string tags = 7;
	};

	//
	// Header used in all messages.
	// Contains basic information about the message.
	//
	message Header {

		// Command.
		// A bundle command when the entire chunk is sent "as-is".
		optional string command = 1;

		// Source (sending) system.
		// This is the system which sends the message (me).
		optional string source_id = 3;

		// Sender is the original source of the message.
		// THis is same as source unless message has been relayed.
		optional string sender_id = 4;

		// Recipient is the final destination.
		// This is the same as destination_id unless message is to be relayed.
		optional string recipient_id = 5;

		// Destination (target) system.
		// The system which will receive the message.
		optional string destination_id = 6;

		// Message identification.
		// Has no meaning apart from identification.
		// Set by source system and retained in any processing system.
		optional string message_id = 16;

		// Meta data related to the message.
		repeated Common.KeyValue metadata = 8;

		// A list of tags associated with the message.
		repeated string tags = 9;

		// A list of hosts.
		// All recipient/destination ids point to objects in this data set.
		repeated Host hosts = 10;
	};

	//
	// Attachment is used to attach information to another request.
	// This is usually used to send along additional information not directly relatedt to the request.
	// Or send unstructured data which is not supported by the original request.
	//
	message Attachment {

		// Identifier of attachment (for reference purpouses)
		optional int64 id = 1;

		// The mime type for this attachment.
		required string type = 2;

		// Meta data related to the attachment.
		repeated Common.KeyValue metadata = 3;

		// A list of tags associated with the attachment.
		repeated string tags = 4;

		// The actual attachment (encoded)
		required string data = 5;
	};
	
	message PerformanceData {
		message IntValue {
			required int64 value = 1;
			optional string unit = 2;
			optional int64 warning = 3;
			optional int64 critical = 4;
			optional int64 minimum = 6;
			optional int64 maximum = 7;
		}
		message StringValue {
			required string value = 1;
		}
		message FloatValue {
			required double value = 1;
			optional string unit = 2;
			optional double warning = 3;
			optional double critical = 4;
			optional double minimum = 6;
			optional double maximum = 7;
		}
		message BoolValue {
			required bool value = 1;
			optional string unit = 2;
			optional bool warning = 3;
			optional bool critical = 4;
		}
		required string alias = 1;
		optional IntValue int_value = 3;
		optional StringValue string_value = 4;
		optional FloatValue float_value = 5;
		optional BoolValue bool_value = 6;
	}

	message Metric {
		required string key = 1;
		required AnyDataType value = 2;

		optional string alias = 3;
		optional string desc = 4;
	}

	message MetricsBundle {
		required string key = 1;
		repeated Metric value = 2;
		repeated MetricsBundle children = 6;

		optional string alias = 3;
		optional string desc = 4;
	}
	
	message Result {
	
		enum StatusCodeType {
			STATUS_OK = 0;
			STATUS_WARNING = 1;
			STATUS_ERROR = 2;
			STATUS_DELAYED = 3;
		};
	
		required StatusCodeType code = 1;
		optional string message = 2;
		optional string data = 3;
	}
};

//
// Query request
// Used for querying the client this is the "normal" check_nrpe message request.
// Associated response is :py:class:`Plugin.QueryResponseMessage`
//
message QueryRequestMessage {
	message Request {
		optional int32 id = 1;
		optional string target = 7;
		required string command = 2;
		optional string alias = 3;
		repeated string arguments = 4;

		// The attachment is used to attach additional free form information.
		repeated Common.Attachment attachments = 17;
	};

	optional Common.Header header = 1;
	repeated Request payload = 2;

	// The attachment is used to attach additional free form information.
	repeated Common.Attachment attachments = 3;
}

//
// Query response
// Used for querying the client this is the "normal" check_nrpe message request.
// Associated request is :py:class:`Plugin.QueryRequestMessage`
//
message QueryResponseMessage {

	message Response {
		message Line {
			required string message = 1;
			repeated Common.PerformanceData perf = 2;
		}

		optional int32 id = 1;
		optional string source = 7;
		optional string command = 2;
		optional string alias = 3;
		repeated string arguments = 16;
		
		required Common.ResultCode result = 4;
		repeated Line lines = 9;

		// The attachment is used to attach additional free form information.
		repeated Common.Attachment attachments = 17;
		optional bytes data = 5;
		
	}

	optional Common.Header header = 1;
	repeated Response payload = 2;

	// The attachment is used to attach additional free form information.
	repeated Common.Attachment attachments = 3;
}

//
// Execute command request and response.
// Used for executing commands on clients similar to :py:class:`Plugin.QueryRequestMessage` but wont return nagios check data
// Associated response is :py:class:`Plugin.ExecuteResponseMessage`
//
message ExecuteRequestMessage {
	message Request {
		optional int32 id = 1;
		required string command = 2;
		repeated string arguments = 3;

		// The attachment is used to attach additional free form information.
		repeated Common.Attachment attachments = 17;
	};

	optional Common.Header header = 1;
	repeated Request payload = 2;

	// The attachment is used to attach additional free form information.
	repeated Common.Attachment attachments = 3;
}
message ExecuteResponseMessage {
	message Response {
		optional int32 id = 2;
		required string command = 5;
		repeated string arguments = 16;
		
		required Common.ResultCode result = 9;
		required string message = 10;
		optional bytes data = 7;

		// The attachment is used to attach additional free form information.
		repeated Common.Attachment attachments = 17;
		
	}
	optional Common.Header header = 1;
	repeated Response payload = 2;

	// The attachment is used to attach additional free form information.
	repeated Common.Attachment attachments = 3;
}

//
// Submit result request message.
// Used for submitting a passive check results.
// The actual payload (Request) is a normal :py:class:`Plugin.QueryResponseMessage.Response`.
// Associated response is :py:class:`Plugin.SubmitResponseMessage`
//
message SubmitRequestMessage {
	optional Common.Header header = 1;
	required string channel = 2;
	repeated QueryResponseMessage.Response payload = 3;

	// The attachment is used to attach additional free form information.
	repeated Common.Attachment attachments = 4;
}

//
// Submit result response message.
// Response from submitting a passive check results.
// Associated request is :py:class:`Plugin.SubmitRequestMessage`
//
message SubmitResponseMessage {
	message Response {
		optional int32 id = 1;
		required string command = 2;
		required Common.Result result = 3;

		// The attachment is used to attach additional free form information.
		repeated Common.Attachment attachments = 17;
	};
	optional Common.Header header = 1;
	repeated Response payload = 2;

	// The attachment is used to attach additional free form information.
	repeated Common.Attachment attachments = 3;
}


//
// Registration is an internal message.
// It is not used to submit checks or query status instead it is used so register modules, plug-ins, command.
// As well as query for them.
// The registry is a central component inside NSClient++ and this is the way to interact with the registry.
//
message Registry {
	enum ItemType { 
		QUERY = 1;
		COMMAND = 2;
		HANDLER = 3;
		PLUGIN = 4;
		QUERY_ALIAS = 5;
		ROUTER = 6;
		MODULE = 7;
		SCHEDULE = 8;

		ALL = 99;
	};
	message Query {
		optional string expression = 1;
	};
	message Information {
		optional string title = 1;
		optional string description = 2;

		repeated Common.KeyValue metadata = 3;
		
		optional string min_version = 5;
		optional string max_version = 6;
		
		optional bool advanced = 8;
		repeated string plugin = 9;
	};
	message KeyWordDescription {
		required string parameter = 1;
		optional string context = 2;
		required string key = 3;
		optional string short_description = 5;
		optional string long_description = 6;
	};
	message ParameterDetail {
		optional string name = 1;
		optional string default_value = 2;
		optional bool required = 3;
		optional bool repeatable = 4;
		optional Common.DataType content_type = 5;
		optional string short_description = 6;
		optional string long_description = 7;
		repeated KeyWordDescription keyword = 8;
	};
	message ParameterDetails {
		repeated ParameterDetail parameter = 1;
	}

	message Schedule {
		optional string id = 1;
		optional string cron = 2;
		optional string interval = 3;
	};
	enum Command {
		LOAD	= 1;
		UNLOAD	= 2;
		RELOAD	= 3;
	};
};

message RegistryRequestMessage {
	message Request {
		message Registration {
			optional int32 plugin_id = 1;
			required Registry.ItemType type = 2;
			required string name = 3;
			optional Registry.Information info = 4;
			optional bool unregister = 5;
			
			repeated string alias = 9;

			repeated Registry.Schedule schedule = 20;
		};
		message Inventory {
			optional string plugin = 1;
			repeated Registry.ItemType type = 2;
			optional string name = 3;
			//optional Registry.Information info = 4;

			optional bool fetch_all = 6;
			optional bool fetch_information = 7;
		};
		message Control {
			required Registry.Command command = 1;
			required Registry.ItemType type = 2;
			optional string name = 3;
			optional string alias = 4;
		};
		optional int64 id = 1;
		optional Registration registration = 3;
		optional Inventory inventory = 4;
		optional Control control = 5;
	};
	optional Common.Header header = 1;
	repeated Request payload = 2;
};
message RegistryResponseMessage {
	message Response {
		message Registration {
			optional int32 item_id = 1;
		};
		message Inventory {
			repeated string plugin = 1;
			required Registry.ItemType type = 2;
			required string name = 3;
			optional string id = 6;
			optional Registry.Information info = 4;
			optional Registry.ParameterDetails parameters = 5;

			repeated Registry.Schedule schedule = 20;

		};
		message Control {
		};
		optional int64 id = 1;
		required Common.Result result = 2;

		optional Registration registration = 3;
		repeated Inventory inventory = 4;
		optional Control control = 5;
	};

	optional Common.Header header = 1;
	repeated Response payload = 2;
};

// // // // // // // // // // // // // // // // // // // // // // // // 
//
// Schedule Notification commands
// Used when a schedule is executed
//
// // // // // // // // // // // // // // // // // // // // // // // // 

message ScheduleNotificationMessage {
	message Request {
		optional int64 id = 1;
		required int32 plugin_id = 3;

		optional Registry.Information info = 4;

		optional Registry.Schedule schedule = 20;
	};
	optional Common.Header header = 1;
	repeated Request payload = 2;
};


//
// Settings is an internal message.
// It is not used to submit checks or query status instead it is used to interact with the settings store.
// The settings is a central component inside NSClient++ and this is the way to interact with it.
//
message Settings {
	message Node {
		required string path = 1;
		optional string key = 2;
	};
	message Query {
		optional string expression = 1;
	};
	message Information {
		optional string title = 1;
		optional string description = 2;
		optional Common.AnyDataType default_value = 3;
		optional string min_version = 4;
		optional string max_version = 5;
		optional bool advanced = 6;
		optional bool sample = 7;
		optional string sample_usage = 8;
		repeated string plugin = 9;
	};
	enum Command {
		LOAD	= 1;
		SAVE	= 2;
		RELOAD	= 3;
	};
};

message SettingsRequestMessage {
	message Request {
		message Registration {
			optional Settings.Node node = 1;
			optional Settings.Information info = 2;
		};
		message Query {
			optional Settings.Node node = 1;
			optional Settings.Query query = 4;
			optional bool recursive = 2;
			optional Common.DataType type = 3;
			optional Common.AnyDataType default_value = 5;
		};
		message Update {
			optional Settings.Node node = 1;
			optional Common.AnyDataType value = 2;
		};
		message Inventory {
			optional string plugin = 11;
			optional Settings.Node node = 1;
			optional Settings.Query query = 10;
			optional bool recursive_fetch = 2;
			optional bool fetch_keys = 3;
			optional bool fetch_paths = 4;
			optional bool fetch_samples = 5;
			optional bool descriptions = 6;
		};
		message Control {
			required Settings.Command command = 1;
			optional string context = 2;
		};
		message Status {
		};
		optional int64 id = 1;
		required int32 plugin_id = 3;
		
		optional Registration registration = 10;
		optional Query query = 11;
		optional Update update = 12;
		optional Inventory inventory = 13;
		optional Control control = 14;
		optional Status status = 15;
	};
	optional Common.Header header = 1;
	repeated Request payload = 2;
};
message SettingsResponseMessage {
	message Response {
		message Registration {
		};
		message Query {
			required Settings.Node node = 1;
			required Common.AnyDataType value = 2;
		};
		message Update {
		};
		message Inventory {
			required Settings.Node node = 1;
			required Settings.Information info = 2;
			optional Common.AnyDataType value = 3;
		};
		message Control {
		};
		message Status {
			optional string context = 1;
			optional string type = 2;
			optional bool has_changed = 3;
		};
		optional int64 id = 1;
		required Common.Result result = 2;
		
		optional Registration registration = 10;
		optional Query query = 11;
		optional Update update = 12;
		repeated Inventory inventory = 13;
		optional Control control = 14;
		optional Status status = 15;
	};

	optional Common.Header header = 1;
	repeated Response payload = 2;
};


//
// LogEntry is used to log status information.
//
message LogEntry {
	message Entry {
		enum Level {
			LOG_DEBUG	= 500;
			LOG_INFO 	= 150;
			LOG_WARNING	=  50;
			LOG_ERROR	=  10;
			LOG_CRITICAL	=   1;
		};
		required Level	level	= 1;
		optional string	sender	= 2;
		optional string	file	= 3;
		optional int32	line	= 4;
		optional string	message = 5;
		optional int32	date	= 6;
	};

	repeated Entry entry = 1;
}


//
// Metrics message
// Used for fetching and sending metrics.
//
message MetricsQueryMessage {
	message Request {
		optional int64 id = 1;
		optional string type = 2;
	};

	optional Common.Header header = 1;
	repeated Request payload = 2;

	// The attachment is used to attach additional free form information.
	repeated Common.Attachment attachments = 3;
}

//
// Metrics message
// Used for fetching and sending metrics.
//
message MetricsMessage {
	message Response {
		optional int64 id = 1;
		required Common.Result result = 2;
		
		repeated Common.MetricsBundle bundles = 3;
	};

	optional Common.Header header = 1;
	repeated Response payload = 2;

	// The attachment is used to attach additional free form information.
	repeated Common.Attachment attachments = 3;
}

