cmake_minimum_required(VERSION 2.6)

SET(TARGET DotnetPlugins)

PROJECT(${TARGET})

SET(SRCS ${SRCS}
	"${TARGET}.cpp"
	plugin_instance.cpp
	block_allocator.cpp
	json.cpp
	json_writer.cpp

	${NSCP_INCLUDEDIR}/nscapi/nscapi_core_wrapper.cpp
	${NSCP_INCLUDEDIR}/nscapi/nscapi_helper.cpp
	${NSCP_INCLUDEDIR}/nscapi/nscapi_helper_singleton.cpp
)

ADD_DEFINITIONS(${NSCP_GLOBAL_DEFINES} -Dplugin_api_NOLIB)

IF(WIN32)
	SET(SRCS ${SRCS}
		"${TARGET}.h"
		plugin_instance.hpp
		DotnetPlugins.def

		block_allocator.h
		json.h
		json_writer.h

		${NSCP_INCLUDEDIR}/utf8.hpp
		${NSCP_INCLUDEDIR}/format.hpp
		${NSCP_INCLUDEDIR}/strEx.h
		${NSCP_INCLUDEDIR}/config.h
		${NSCP_INCLUDEDIR}/utils.h
		${NSCP_INCLUDEDIR}/NSCAPI.h
		${NSCP_INCLUDEDIR}/nscapi/nscapi_settings_helper.hpp
#		${NSCP_INCLUDEDIR}/nscapi/nscapi_settings_object.hpp
	)
ENDIF(WIN32)

STRING(REPLACE "/EHsc" "/EHa" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
STRING(REPLACE "/EHs" "/EHa" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
STRING(REPLACE "/MT" "/MD" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
STRING(REPLACE "/EHsc" "/EHa" CMAKE_CXX_FLAGS_RELWITHDEBINFO ${CMAKE_CXX_FLAGS_RELWITHDEBINFO})
STRING(REPLACE "/EHs" "/EHa" CMAKE_CXX_FLAGS_RELWITHDEBINFO ${CMAKE_CXX_FLAGS_RELWITHDEBINFO})
STRING(REPLACE "/MT" "/MD" CMAKE_CXX_FLAGS_RELWITHDEBINFO ${CMAKE_CXX_FLAGS_RELWITHDEBINFO})
STRING(REPLACE "/MT" "/MD" CMAKE_CXX_FLAGS_MINSIZEREL ${CMAKE_CXX_FLAGS_MINSIZEREL})
STRING(REPLACE "/MT" "/MD" CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})
STRING(REPLACE "/EHsc" "/EHa" CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})
STRING(REPLACE "/EHs" "/EHa" CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})
STRING(REPLACE "/MTd" "/MDd" CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})
STRING(REPLACE "/RTC1" "" CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})
STRING(REPLACE "/RTCs" "" CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})
STRING(REPLACE "/RTCu" "" CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})
STRING(REPLACE "/GZ" "" CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /clr /EHa /FU${NSCP_PROJECT_BINARY_DIR}/Google.ProtocolBuffers.dll /FU${NSCP_PROJECT_BINARY_DIR}/NSCP.Core.dll /FU${NSCP_PROJECT_BINARY_DIR}/NSCP.Protobuf.dll")
ADD_LIBRARY(${TARGET} MODULE ${SRCS})

ADD_DEPENDENCIES(${TARGET} NSCP.Core)
ADD_DEPENDENCIES(${TARGET} NSCP.Protobuf)

target_link_libraries(${TARGET})
INCLUDE(${BUILD_CMAKE_FOLDER}/module.cmake)
