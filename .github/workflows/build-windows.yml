name: Build Windows

on:
  workflow_call:
    inputs:
      architecture:
        type: string
        description: 'Architecture to build'
        required: true
        default: 'x64'


env:
  PERL_VERSION: 5.34
  PYTHON_VERSION: 3.11
  OPENSSL_VERSION: 1.1.1q
  PROTOBUF_VERSION: 21.6
  BOOST_VERSION: 1.82.0
  CRYPTOPP_VERSION: 8.8.0

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - id: setup
      run: |
        if ("${{ inputs.architecture }}" -eq "x64") {
          echo "msvc_arch=x64" >> $env:GITHUB_OUTPUT
          echo "platform=x64" >> $env:GITHUB_OUTPUT
        } else {
          echo "msvc_arch=amd64_x86" >> $env:GITHUB_OUTPUT
          echo "platform=Win32" >> $env:GITHUB_OUTPUT
        }
      shell: pwsh

    - id: python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ ENV.PYTHON_VERSION }}
        architecture: ${{ inputs.architecture }}
        cache-dependency-path: 'build/python/requirements.txt'
        cache: 'pip'

    - uses: ilammy/msvc-dev-cmd@v1
      name: Setup msvc environment
      with:
        arch: ${{ steps.setup.outputs.msvc_arch }}

    - id: version
      run: |
        & "$env:Python_ROOT_DIR\python" build\python\version.py -f version.txt -a >> $env:GITHUB_OUTPUT
      shell: pwsh

    - name: make dirs
      run: |
        mkdir tmp
        mkdir tmp\nscp
      shell: cmd

    - uses: shogo82148/actions-setup-perl@v1
      with:
        perl-version: ${{ ENV.PERL_VERSION }}

    - name: setup python dependencies
      run: |
        & "$env:Python_ROOT_DIR\Scripts\pip" install -r build/python/requirements.txt
  
    - id: openssl
      uses: ./.github/actions/openssl
      with:
        version: ${{ ENV.OPENSSL_VERSION }}
        architecture: ${{ inputs.architecture }}

    - id: protobuf
      uses: ./.github/actions/protobuf
      with:
        version: ${{ ENV.PROTOBUF_VERSION }}
        architecture: ${{ inputs.architecture }}

    - id: cryptopp
      uses: ./.github/actions/cryptopp
      with:
        version: ${{ ENV.CRYPTOPP_VERSION }}
        architecture: ${{ inputs.architecture }}
  
    - name: Build Boost
      id: boost
      uses: egor-tensin/build-boost@v1
      with:
        version: ${{ ENV.BOOST_VERSION }}
        libraries: system filesystem thread regex date_time program_options python chrono
        platform: ${{ inputs.architecture }}
        configuration: Release

    - id: paths
      run: |
        $path_unix="${{ steps.boost.outputs.root }}".replace('\','/')
        echo "boost_root=$path_unix" >> $env:GITHUB_OUTPUT
        $path_unix="${{ steps.boost.outputs.librarydir }}".replace('\','/')
        echo "boost_librarydir=$path_unix" >> $env:GITHUB_OUTPUT
        $path_unix="${{ env.Python_ROOT_DIR }}".replace('\','/')
        echo "python_path=$path_unix" >> $env:GITHUB_OUTPUT
      shell: pwsh
        
    - uses: DamianReeves/write-file-action@master
      with:
        path: tmp/nscp/build.cmake
        contents: |
            set(Boost_USE_STATIC_RUNTIME ON)

            SET(USE_STATIC_RUNTIME FALSE)
            SET(LIBRARY_ROOT_FOLDER	"${{ env.GITHUB_WORKSPACE }}")
            SET(BOOST_ROOT "${{ steps.paths.outputs.boost_root }}")
            SET(BOOST_LIBRARYDIR "${{ steps.paths.outputs.boost_librarydir }}")
            SET(PROTOBUF_ROOT "${{ steps.protobuf.outputs.path_unix }}")
            SET(PROTOBUF_LIBRARYDIR "${PROTOBUF_ROOT}/build/Release")
            SET(OPENSSL_ROOT_DIR "${{ steps.openssl.outputs.path_unix }}")
            SET(LUA_SOURCE_ROOT "${LIBRARY_ROOT_FOLDER}/lua-5.1.5")
            SET(Python3_ROOT_DIR "${{ steps.paths.outputs.python_path }}")
            SET(Python3_FIND_STRATEGY LOCATION)
            SET(CRYPTOPP_ROOT "${{ steps.cryptopp.outputs.path_unix }}")

            #SET(CSHARP_DOTNET_VERSION "v4.0.30319")
            #SET(ARCHIVE_FOLDER "TODO")
            #SET(TARGET_SITE "TODO")
  
    - name: CMake x64
      working-directory: tmp/nscp
      run: |
        cmake ../.. -G "Visual Studio 17" -A ${{ steps.setup.outputs.platform }}

    - name: Build nsclient
      working-directory: tmp/nscp
      run: |
        copy D:\a\nscp\nscp\tmp\protobuf-21.6\build\Release\libprotobuf.dll .
        msbuild NSCP.sln /p:Configuration=Release /p:Platform=${{ steps.setup.outputs.platform }}

    - name: Run tests
      working-directory: tmp/nscp
      run: |
        ctest --output-on-failure -C Release

    - name: Generate archives
      working-directory: tmp/nscp
      run: |
        echo Running postbuild
        python postbuild.py
        echo Running cpack
        cpack
        dir *.zip

    - uses: actions/upload-artifact@v3
      with:
        name: NSCP-${{ steps.version.outputs.version }}-docs.zip
        path: tmp/nscp/NSCP-${{ steps.version.outputs.version }}-${{ inputs.architecture }}-docs.zip
        if-no-files-found: error
    - uses: actions/upload-artifact@v3
      with:
        name: NSCP-${{ steps.version.outputs.version }}-${{ inputs.architecture }}.zip
        path: tmp/nscp/NSCP-${{ steps.version.outputs.version }}-${{ inputs.architecture }}.zip
        if-no-files-found: error

    - name: Running tests
      working-directory: tmp/nscp
      run: |
          echo Running tests
          ctest --output-on-failure -C Release
    
  